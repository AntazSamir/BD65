{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# BD Explorer - Full-Stack Travel Booking Platform\n\n## Overview\n\nBD Explorer is a modern full-stack travel booking platform built with React, TypeScript, and Express.js, specifically focused on Bangladesh tourism. The application provides users with a comprehensive travel planning experience, allowing them to browse Bangladesh's destinations, hotels, domestic flights, and travel packages. The platform features a responsive design with a modern UI built using shadcn/ui components and Tailwind CSS, showcasing authentic Bangladesh tourist spots and experiences.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nProject Focus: Bangladesh tourism and travel destinations.\n\n## Recent Changes\n\n- Updated all travel data to showcase authentic Bangladesh tourist destinations including Cox's Bazar, Sundarbans, Sylhet Tea Gardens, Saint Martin Island, Bandarban Hills, and Paharpur Buddhist Vihara\n- Changed pricing format from USD ($) to Bangladeshi Taka (à§³) throughout the application\n- Updated branding from \"TravelHub\" to \"BD Explorer\" \n- Modified flight routes to show domestic Bangladesh destinations (Dhaka, Cox's Bazar, Sylhet, Chittagong, Jessore)\n- Updated hotel listings to feature authentic Bangladesh accommodations\n- Created Bangladesh-specific testimonials\n- Added comprehensive FAQ section about Bangladesh travel\n- Updated hero section messaging to focus on discovering Bangladesh\n- Removed travel packages section from home page per user request\n- Created comprehensive About page with company story, team, values, mission, and statistics\n- Updated navigation to link to the new About page (/about route)\n- Created comprehensive Support page (/support route) with contact information, FAQ section, support ticket form, and help resources (August 2025)\n- Enhanced Support page hero section with professional customer service imagery and improved layout with stats and visual elements\n\n### Layout and Visual Improvements (August 2025)\n- Enhanced Popular Destinations section layout with increased spacing between hero and destinations\n- Moved destination text content (headings, descriptions, buttons) to a dedicated gap section with light background\n- Increased destination section height to 800px for more immersive background images\n- Positioned destination cards at the bottom of the section for better visual hierarchy\n- Reduced destination card image heights for better proportions (h-32 md:h-48)\n- Updated 9 destinations with authentic custom images stored in /client/public/assets/\n- Implemented proper state management for destination selection across components\n- Completely redesigned destinations page hero section with dynamic carousel backgrounds, interactive search, stats display, and engaging CTAs (August 2025)\n- Added functional search and filtering capabilities for destinations with real-time results\n- Enhanced visual hierarchy with backdrop blur effects, gradient text, and animated elements\n- **Full Page Booking System (August 2025)**: \n  - Created dedicated booking pages for hotels (/hotel-booking/:id), restaurants (/restaurant-booking/:id), and transportation (/transport-booking/:type/:id)\n  - Replaced dialog-based booking with comprehensive full-page forms\n  - Added mandatory National ID (NID) requirement for hotel and transport bookings\n  - Implemented comprehensive booking forms with authentication requirements\n  - Users must sign in before making any hotel, restaurant, or transportation bookings\n  - Added seat selection functionality for bus bookings\n  - Implemented booking confirmation screens with receipt download capability\n  - Enhanced booking receipts to include NID information for compliance\n  - Added \"Couple Room\" option to hotel booking room types\n- **Auto-sliding Carousel Implementation (August 2025)**: \n  - Added 9 new destinations with high-quality Unsplash images (total now 18 destinations)\n  - Implemented auto-sliding carousel showing 5 cards with center focus\n  - Auto-slides every 3 seconds with smooth transitions\n  - Manual navigation with left/right arrows and dot indicators\n  - Center card displays larger with white ring indicator\n  - Background changes to match center card image with smooth transitions\n  - Auto-sliding pauses for 10 seconds when user interacts manually\n  - Enhanced destination details display in header with rating and pricing\n\n### Bug Fixes and Code Quality Improvements (August 2025)\n- **Authentication System**: Fixed auth hook to properly handle 401 responses without throwing errors\n- **API Response Handling**: Fixed sign in, sign up, sign out, and profile update functions to properly parse JSON responses\n- **Code Cleanup**: Removed debugging console.log statements from production booking API routes\n- **Hotels Display**: Limited home page Recommended Hotels section to show only 6 hotels (2 rows) with \"View All Hotels\" button for more options\n- **Hero Section Consistency**: Standardized all page hero section main headings to use consistent text size (text-4xl md:text-5xl) across home, about, destinations, destination detail, trip planner, and hotels pages\n- **Trip Cards Consistency**: Updated home page trip planner cards to match trip planner page format with unified layout showing route with arrow, duration, departure date, stops, deal type badge, rating, pricing, and \"Select Flight\" button\n- **Trip Planner UI**: Reduced trip planner card image height from h-48 to h-36 for more compact display\n- **Unnecessary Code Removal**: Removed placeholder alert functions, unused booking dialog components, console.log statements, and redundant imports for cleaner codebase\n- **Mobile Responsive Optimization (August 2025)**: Implemented comprehensive mobile-first responsive design across all components including hero section tabs, destination cards carousel, hotel grids, testimonials, FAQ, newsletter, and footer sections with proper touch-friendly button sizing and mobile-specific spacing improvements\n- **Destinations Page Mobile Fix (August 2025)**: Fixed carousel indicators and destination grid layout for mobile devices with proper responsive sizing and touch-friendly interactions\n- **ShareTrip.net Mobile Design Optimization (August 2025)**: \n  - Redesigned all cards (destinations, hotels, flights) to match ShareTrip's compact mobile design with smaller heights, cleaner shadows, and simplified layouts\n  - Reduced card image heights to h-40 on mobile (vs h-56+ on larger screens) for efficient screen space usage\n  - Applied clean white background cards with subtle shadows instead of elaborate hover effects on mobile\n  - Optimized mobile navigation with smaller text and compact spacing (px-3 py-2)\n  - Updated search interface with ShareTrip-style clean white input fields on semi-transparent background\n  - Implemented mobile-first grid layouts with minimal gaps (gap-3) for maximum content density\n  - Added ShareTrip-style mobile CSS utilities for consistent compact design across all components\n  - Changed \"Trip Planner\" to \"Flights\" in navigation to match ShareTrip's terminology\n\n### Design System Overhaul - \"Why Choose Us\" Styling Applied (August 2025)\n- **Consistent Visual Language**: Applied the elegant \"Why Choose Us\" section styling across the entire website\n- **Soft Gradient Backgrounds**: Implemented three main background gradients (soft, warm, cool) for different sections\n- **Enhanced Card Design**: Created unified \"elegant-card\" class with improved shadows, rounded corners, and hover effects\n- **Colorful Section Icons**: Added decorative colored icons to all major sections:\n  - Hotels: Blue building icon\n  - Trip Planner: Orange map icon  \n  - Testimonials: Green chat icon\n  - FAQ: Purple question icon\n  - Newsletter: Yellow mail icon\n- **Improved Visual Hierarchy**: Enhanced navigation with better shadows, updated buttons with rounded corners and lift effects\n- **Color Coordination**: Applied consistent color scheme with orange, blue, green, purple, red, and yellow icon backgrounds\n- **Smooth Transitions**: Enhanced all hover effects and animations to match the refined aesthetic\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: shadcn/ui component library with Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables\n- **State Management**: TanStack Query for server state management\n- **Build Tool**: Vite for fast development and optimized builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Development Server**: Hot module replacement via Vite integration\n- **Middleware**: JSON parsing, URL encoding, and request logging\n- **Error Handling**: Centralized error handling middleware\n\n### Data Layer\n- **Database**: PostgreSQL (configured for production)\n- **ORM**: Drizzle ORM with type-safe schema definitions\n- **Storage Interface**: Abstracted storage layer with in-memory implementation for development\n- **Schema**: Includes users, destinations, hotels, flights, and travel packages tables\n\n### Development Environment\n- **Hot Reloading**: Vite development server with HMR\n- **Type Checking**: TypeScript with strict mode enabled\n- **Code Quality**: Path aliases for clean imports\n- **Error Overlay**: Runtime error modal for development\n\n### Project Structure\n- **Monorepo Layout**: Client, server, and shared code in organized directories\n- **Client**: React application with component-based architecture\n- **Server**: Express.js API with modular route structure\n- **Shared**: Common TypeScript types and database schema\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18, React DOM, TanStack Query for data fetching\n- **Express.js**: Web server framework with TypeScript support\n- **Wouter**: Lightweight routing library for React\n\n### Database & ORM\n- **Drizzle ORM**: Type-safe database interactions\n- **Neon Database**: PostgreSQL serverless database provider\n- **Drizzle Kit**: Database migrations and schema management\n\n### UI & Styling\n- **Radix UI**: Comprehensive set of unstyled, accessible UI primitives\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library\n- **shadcn/ui**: Pre-built component library\n\n### Development Tools\n- **Vite**: Build tool and development server\n- **TypeScript**: Static type checking\n- **PostCSS**: CSS processing with Tailwind\n- **ESBuild**: Fast JavaScript bundler for production\n\n### Additional Libraries\n- **Date-fns**: Date manipulation utilities\n- **Class Variance Authority**: Utility for managing component variants\n- **React Hook Form**: Form state management with validation\n- **Embla Carousel**: Carousel component library","size_bytes":10806},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        neutral: {\n          DEFAULT: \"var(--neutral)\",\n          foreground: \"var(--neutral-foreground)\",\n        },\n        \"light-gray\": \"var(--light-gray)\",\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2927},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Serve static files from attached_assets\napp.use('/attached_assets', express.static('attached_assets'));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2174},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { getSession, isAuthenticated } from \"./auth\";\nimport { \n  insertUserSchema,\n  loginSchema,\n  updateUserSchema,\n  insertDestinationSchema,\n  insertHotelSchema,\n  insertTripPlannerSchema,\n  insertBusSchema,\n  insertPrivateCarSchema,\n  insertTravelPackageSchema,\n  insertRestaurantSchema,\n  insertBookingSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session middleware\n  app.use(getSession());\n\n  // Auth routes\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists with this email\" });\n      }\n\n      const existingUsername = await storage.getUserByUsername(validatedData.username);\n      if (existingUsername) {\n        return res.status(400).json({ message: \"Username already taken\" });\n      }\n\n      const user = await storage.createUser(validatedData);\n      req.session.userId = user.id;\n      req.session.user = user;\n      \n      const { password, ...userWithoutPassword } = user;\n      res.status(201).json(userWithoutPassword);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.post(\"/api/auth/signin\", async (req, res) => {\n    try {\n      const validatedData = loginSchema.parse(req.body);\n      const user = await storage.validateUser(validatedData.email, validatedData.password);\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      req.session.userId = user.id;\n      req.session.user = user;\n      \n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to sign in\" });\n    }\n  });\n\n  app.post(\"/api/auth/signout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Failed to sign out\" });\n      }\n      res.json({ message: \"Signed out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/me\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = req.session.userId;\n      if (!userId) {\n        return res.status(401).json({ message: \"No user session found\" });\n      }\n      \n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Profile routes\n  app.put(\"/api/profile\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = req.session.userId;\n      if (!userId) {\n        return res.status(401).json({ message: \"No user session found\" });\n      }\n      \n      const validatedData = updateUserSchema.parse(req.body);\n      const user = await storage.updateUser(userId, validatedData);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      req.session.user = user;\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Destinations routes\n  app.get(\"/api/destinations\", async (req, res) => {\n    try {\n      const destinations = await storage.getDestinations();\n      res.json(destinations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch destinations\" });\n    }\n  });\n\n  app.get(\"/api/destinations/:id\", async (req, res) => {\n    try {\n      const destination = await storage.getDestination(req.params.id);\n      if (!destination) {\n        return res.status(404).json({ message: \"Destination not found\" });\n      }\n      res.json(destination);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch destination\" });\n    }\n  });\n\n  app.post(\"/api/destinations\", async (req, res) => {\n    try {\n      const validatedData = insertDestinationSchema.parse(req.body);\n      const destination = await storage.createDestination(validatedData);\n      res.status(201).json(destination);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create destination\" });\n    }\n  });\n\n  // Hotels routes\n  app.get(\"/api/hotels\", async (req, res) => {\n    try {\n      const hotels = await storage.getHotels();\n      res.json(hotels);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch hotels\" });\n    }\n  });\n\n  app.get(\"/api/hotels/:id\", async (req, res) => {\n    try {\n      const hotel = await storage.getHotel(req.params.id);\n      if (!hotel) {\n        return res.status(404).json({ message: \"Hotel not found\" });\n      }\n      res.json(hotel);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch hotel\" });\n    }\n  });\n\n  app.post(\"/api/hotels\", async (req, res) => {\n    try {\n      const validatedData = insertHotelSchema.parse(req.body);\n      const hotel = await storage.createHotel(validatedData);\n      res.status(201).json(hotel);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create hotel\" });\n    }\n  });\n\n  // Trip Planner routes\n  app.get(\"/api/trip-planners\", async (req, res) => {\n    try {\n      const tripPlanners = await storage.getTripPlanners();\n      res.json(tripPlanners);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch trip planners\" });\n    }\n  });\n\n  app.get(\"/api/trip-planners/:id\", async (req, res) => {\n    try {\n      const tripPlanner = await storage.getTripPlanner(req.params.id);\n      if (!tripPlanner) {\n        return res.status(404).json({ message: \"Trip planner not found\" });\n      }\n      res.json(tripPlanner);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch trip planner\" });\n    }\n  });\n\n  app.post(\"/api/trip-planners\", async (req, res) => {\n    try {\n      const validatedData = insertTripPlannerSchema.parse(req.body);\n      const tripPlanner = await storage.createTripPlanner(validatedData);\n      res.status(201).json(tripPlanner);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create trip planner\" });\n    }\n  });\n\n  // Bus routes\n  app.get(\"/api/buses\", async (req, res) => {\n    try {\n      const buses = await storage.getBuses();\n      res.json(buses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch buses\" });\n    }\n  });\n\n  app.post(\"/api/buses\", async (req, res) => {\n    try {\n      const validatedData = insertBusSchema.parse(req.body);\n      const bus = await storage.createBus(validatedData);\n      res.status(201).json(bus);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create bus\" });\n    }\n  });\n\n  // Private Car routes\n  app.get(\"/api/private-cars\", async (req, res) => {\n    try {\n      const privateCars = await storage.getPrivateCars();\n      res.json(privateCars);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch private cars\" });\n    }\n  });\n\n  app.post(\"/api/private-cars\", async (req, res) => {\n    try {\n      const validatedData = insertPrivateCarSchema.parse(req.body);\n      const privateCar = await storage.createPrivateCar(validatedData);\n      res.status(201).json(privateCar);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create private car\" });\n    }\n  });\n\n  // Travel packages routes\n  app.get(\"/api/travel-packages\", async (req, res) => {\n    try {\n      const packages = await storage.getTravelPackages();\n      res.json(packages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch travel packages\" });\n    }\n  });\n\n  app.get(\"/api/travel-packages/:id\", async (req, res) => {\n    try {\n      const travelPackage = await storage.getTravelPackage(req.params.id);\n      if (!travelPackage) {\n        return res.status(404).json({ message: \"Travel package not found\" });\n      }\n      res.json(travelPackage);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch travel package\" });\n    }\n  });\n\n  app.post(\"/api/travel-packages\", async (req, res) => {\n    try {\n      const validatedData = insertTravelPackageSchema.parse(req.body);\n      const travelPackage = await storage.createTravelPackage(validatedData);\n      res.status(201).json(travelPackage);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create travel package\" });\n    }\n  });\n\n  // Restaurant routes\n  app.get(\"/api/restaurants\", async (req, res) => {\n    try {\n      const restaurants = await storage.getRestaurants();\n      res.json(restaurants);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch restaurants\" });\n    }\n  });\n\n  app.get(\"/api/restaurants/:id\", async (req, res) => {\n    try {\n      const restaurant = await storage.getRestaurant(req.params.id);\n      if (!restaurant) {\n        return res.status(404).json({ message: \"Restaurant not found\" });\n      }\n      res.json(restaurant);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch restaurant\" });\n    }\n  });\n\n  app.post(\"/api/restaurants\", async (req, res) => {\n    try {\n      const validatedData = insertRestaurantSchema.parse(req.body);\n      const restaurant = await storage.createRestaurant(validatedData);\n      res.status(201).json(restaurant);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create restaurant\" });\n    }\n  });\n\n  // Booking routes\n  app.get(\"/api/bookings\", async (req, res) => {\n    try {\n      const userId = req.session?.userId;\n      const bookings = userId ? await storage.getBookings(userId) : [];\n      res.json(bookings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.post(\"/api/bookings\", async (req, res) => {\n    try {\n      const userId = req.session?.userId;\n      const validatedData = insertBookingSchema.parse(req.body);\n      const booking = await storage.createBooking({ ...validatedData, userId: userId || null });\n      res.status(201).json(booking);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create booking\" });\n    }\n  });\n\n  app.put(\"/api/bookings/:id/cancel\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = req.session.userId;\n      if (!userId) {\n        return res.status(401).json({ message: \"No user session found\" });\n      }\n      \n      const bookingId = req.params.id;\n      const booking = await storage.getBooking(bookingId);\n      \n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      \n      if (booking.userId !== userId) {\n        return res.status(403).json({ message: \"Unauthorized to cancel this booking\" });\n      }\n      \n      const updatedBooking = await storage.updateBookingStatus(bookingId, 'cancelled');\n      res.json(updatedBooking);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to cancel booking\" });\n    }\n  });\n\n  // Get booked seats for a specific bus and travel date\n  app.get(\"/api/bookings/seats\", async (req, res) => {\n    try {\n      const { busId, travelDate } = req.query;\n      \n      if (!busId || !travelDate) {\n        return res.status(400).json({ message: \"Bus ID and travel date are required\" });\n      }\n      \n      const bookedSeats = await storage.getBookedSeats(busId as string, travelDate as string);\n      res.json({ bookedSeats });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch booked seats\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":13550},"server/storage.ts":{"content":"import { \n  type User, type InsertUser, type UpdateUser, type LoginCredentials,\n  type Destination, type InsertDestination,\n  type Hotel, type InsertHotel,\n  type TripPlanner, type InsertTripPlanner,\n  type Bus, type InsertBus,\n  type PrivateCar, type InsertPrivateCar,\n  type TravelPackage, type InsertTravelPackage,\n  type Restaurant, type InsertRestaurant,\n  type Booking, type InsertBooking,\n  users, destinations, hotels, tripPlanners, buses, privateCars, travelPackages, restaurants, bookings\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcrypt\";\nimport { eq, and } from \"drizzle-orm\";\nimport { db } from \"./db\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: UpdateUser): Promise<User | undefined>;\n  validateUser(email: string, password: string): Promise<User | undefined>;\n  \n  // Destination operations\n  getDestinations(): Promise<Destination[]>;\n  getDestination(id: string): Promise<Destination | undefined>;\n  createDestination(destination: InsertDestination): Promise<Destination>;\n  \n  // Hotel operations\n  getHotels(): Promise<Hotel[]>;\n  getHotel(id: string): Promise<Hotel | undefined>;\n  createHotel(hotel: InsertHotel): Promise<Hotel>;\n  \n  // Trip Planner operations\n  getTripPlanners(): Promise<TripPlanner[]>;\n  getTripPlanner(id: string): Promise<TripPlanner | undefined>;\n  createTripPlanner(tripPlanner: InsertTripPlanner): Promise<TripPlanner>;\n  \n  // Bus operations\n  getBuses(): Promise<Bus[]>;\n  getBus(id: string): Promise<Bus | undefined>;\n  createBus(bus: InsertBus): Promise<Bus>;\n  \n  // Private Car operations\n  getPrivateCars(): Promise<PrivateCar[]>;\n  getPrivateCar(id: string): Promise<PrivateCar | undefined>;\n  createPrivateCar(privateCar: InsertPrivateCar): Promise<PrivateCar>;\n  \n  // Travel Package operations\n  getTravelPackages(): Promise<TravelPackage[]>;\n  getTravelPackage(id: string): Promise<TravelPackage | undefined>;\n  createTravelPackage(travelPackage: InsertTravelPackage): Promise<TravelPackage>;\n  \n  // Restaurant operations\n  getRestaurants(): Promise<Restaurant[]>;\n  getRestaurant(id: string): Promise<Restaurant | undefined>;\n  createRestaurant(restaurant: InsertRestaurant): Promise<Restaurant>;\n  \n  // Booking operations\n  getBookings(userId: string): Promise<Booking[]>;\n  getBooking(id: string): Promise<Booking | undefined>;\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  updateBookingStatus(id: string, status: string): Promise<Booking | undefined>;\n  getBookedSeats(busId: string, travelDate: string): Promise<string[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private destinations: Map<string, Destination>;\n  private hotels: Map<string, Hotel>;\n  private tripPlanners: Map<string, TripPlanner>;\n  private buses: Map<string, Bus>;\n  private privateCars: Map<string, PrivateCar>;\n  private travelPackages: Map<string, TravelPackage>;\n  private restaurants: Map<string, Restaurant>;\n  private bookings: Map<string, Booking>;\n\n  constructor() {\n    this.users = new Map();\n    this.destinations = new Map();\n    this.hotels = new Map();\n    this.tripPlanners = new Map();\n    this.buses = new Map();\n    this.privateCars = new Map();\n    this.travelPackages = new Map();\n    this.restaurants = new Map();\n    this.bookings = new Map();\n    \n    // Initialize with sample data\n    this.initializeSampleData().catch((error) => {\n      console.error('Failed to initialize sample data:', error);\n      // Continue with empty storage if initialization fails\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const now = new Date().toISOString();\n    \n    // Hash the password before storing\n    const saltRounds = 10;\n    const hashedPassword = await bcrypt.hash(insertUser.password, saltRounds);\n    \n    const user: User = { \n      ...insertUser,\n      password: hashedPassword, // Store the hashed password instead of plain text\n      id,\n      phone: insertUser.phone || null,\n      dateOfBirth: insertUser.dateOfBirth || null,\n      nationality: insertUser.nationality || null,\n      profileImageUrl: insertUser.profileImageUrl || null,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updateData: UpdateUser): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser: User = {\n      ...user,\n      ...updateData,\n      updatedAt: new Date().toISOString()\n    };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async validateUser(email: string, password: string): Promise<User | undefined> {\n    const user = await this.getUserByEmail(email);\n    if (user) {\n      // Use bcrypt to compare the provided password with the hashed password\n      const isValid = await bcrypt.compare(password, user.password);\n      if (isValid) {\n        return user;\n      }\n    }\n    return undefined;\n  }\n  \n  // Destination operations\n  async getDestinations(): Promise<Destination[]> {\n    return Array.from(this.destinations.values());\n  }\n  \n  async getDestination(id: string): Promise<Destination | undefined> {\n    return this.destinations.get(id);\n  }\n  \n  async createDestination(insertDestination: InsertDestination): Promise<Destination> {\n    const id = randomUUID();\n    const destination: Destination = { ...insertDestination, id };\n    this.destinations.set(id, destination);\n    return destination;\n  }\n  \n  // Hotel operations\n  async getHotels(): Promise<Hotel[]> {\n    return Array.from(this.hotels.values());\n  }\n  \n  async getHotel(id: string): Promise<Hotel | undefined> {\n    return this.hotels.get(id);\n  }\n  \n  async createHotel(insertHotel: InsertHotel): Promise<Hotel> {\n    const id = randomUUID();\n    const hotel: Hotel = { \n      ...insertHotel, \n      id,\n      amenities: insertHotel.amenities || []\n    };\n    this.hotels.set(id, hotel);\n    return hotel;\n  }\n  \n  // Trip Planner operations\n  async getTripPlanners(): Promise<TripPlanner[]> {\n    return Array.from(this.tripPlanners.values());\n  }\n  \n  async getTripPlanner(id: string): Promise<TripPlanner | undefined> {\n    return this.tripPlanners.get(id);\n  }\n  \n  async createTripPlanner(insertTripPlanner: InsertTripPlanner): Promise<TripPlanner> {\n    const id = randomUUID();\n    const tripPlanner: TripPlanner = { \n      ...insertTripPlanner, \n      id,\n      duration: insertTripPlanner.duration || '',\n      stops: insertTripPlanner.stops || '',\n      departureDate: insertTripPlanner.departureDate || '',\n      returnDate: insertTripPlanner.returnDate || '',\n      dealType: insertTripPlanner.dealType || ''\n    };\n    this.tripPlanners.set(id, tripPlanner);\n    return tripPlanner;\n  }\n  \n  // Bus operations\n  async getBuses(): Promise<Bus[]> {\n    return Array.from(this.buses.values());\n  }\n  \n  async getBus(id: string): Promise<Bus | undefined> {\n    return this.buses.get(id);\n  }\n  \n  async createBus(insertBus: InsertBus): Promise<Bus> {\n    const id = randomUUID();\n    const bus: Bus = { \n      ...insertBus, \n      id,\n      amenities: insertBus.amenities || []\n    };\n    this.buses.set(id, bus);\n    return bus;\n  }\n  \n  // Private Car operations\n  async getPrivateCars(): Promise<PrivateCar[]> {\n    return Array.from(this.privateCars.values());\n  }\n  \n  async getPrivateCar(id: string): Promise<PrivateCar | undefined> {\n    return this.privateCars.get(id);\n  }\n  \n  async createPrivateCar(insertPrivateCar: InsertPrivateCar): Promise<PrivateCar> {\n    const id = randomUUID();\n    const privateCar: PrivateCar = { \n      ...insertPrivateCar, \n      id,\n      features: insertPrivateCar.features || []\n    };\n    this.privateCars.set(id, privateCar);\n    return privateCar;\n  }\n  \n  // Travel Package operations\n  async getTravelPackages(): Promise<TravelPackage[]> {\n    return Array.from(this.travelPackages.values());\n  }\n  \n  async getTravelPackage(id: string): Promise<TravelPackage | undefined> {\n    return this.travelPackages.get(id);\n  }\n  \n  async createTravelPackage(insertTravelPackage: InsertTravelPackage): Promise<TravelPackage> {\n    const id = randomUUID();\n    const travelPackage: TravelPackage = { \n      ...insertTravelPackage, \n      id,\n      includes: insertTravelPackage.includes || []\n    };\n    this.travelPackages.set(id, travelPackage);\n    return travelPackage;\n  }\n  \n  // Restaurant operations\n  async getRestaurants(): Promise<Restaurant[]> {\n    return Array.from(this.restaurants.values());\n  }\n  \n  async getRestaurant(id: string): Promise<Restaurant | undefined> {\n    return this.restaurants.get(id);\n  }\n  \n  async createRestaurant(insertRestaurant: InsertRestaurant): Promise<Restaurant> {\n    const id = randomUUID();\n    const restaurant: Restaurant = { \n      ...insertRestaurant, \n      id,\n      reviews: insertRestaurant.reviews || []\n    };\n    this.restaurants.set(id, restaurant);\n    return restaurant;\n  }\n\n  // Booking operations\n  async getBookings(userId: string): Promise<Booking[]> {\n    return Array.from(this.bookings.values()).filter(\n      (booking) => booking.userId === userId\n    );\n  }\n\n  async getBooking(id: string): Promise<Booking | undefined> {\n    return this.bookings.get(id);\n  }\n\n  async createBooking(insertBooking: InsertBooking): Promise<Booking> {\n    const id = randomUUID();\n    const now = new Date();\n    const booking: Booking = { \n      ...insertBooking,\n      id,\n      status: insertBooking.status || 'confirmed',\n      // Handle nullable fields by converting undefined to null\n      userId: insertBooking.userId || null,\n      passengers: insertBooking.passengers || null,\n      specialRequests: insertBooking.specialRequests || null,\n      travelDate: insertBooking.travelDate || null,\n      // Property information\n      propertyName: insertBooking.propertyName || null,\n      propertyLocation: insertBooking.propertyLocation || null,\n      propertyImageUrl: insertBooking.propertyImageUrl || null,\n      propertyPhone: insertBooking.propertyPhone || null,\n      confirmationNumber: insertBooking.confirmationNumber || null,\n      bookingType: insertBooking.bookingType || null,\n      // Hotel specific fields\n      roomType: insertBooking.roomType || null,\n      checkIn: insertBooking.checkIn || null,\n      checkOut: insertBooking.checkOut || null,\n      nights: insertBooking.nights || null,\n      guests: insertBooking.guests || null,\n      totalAmount: insertBooking.totalAmount || null,\n      // Restaurant specific fields\n      reservationDate: insertBooking.reservationDate || null,\n      reservationTime: insertBooking.reservationTime || null,\n      partySize: insertBooking.partySize || null,\n      cuisine: insertBooking.cuisine || null,\n      priceRange: insertBooking.priceRange || null,\n      // Bus specific fields\n      selectedSeats: insertBooking.selectedSeats || null,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.bookings.set(id, booking);\n    return booking;\n  }\n\n  async updateBookingStatus(id: string, status: string): Promise<Booking | undefined> {\n    const booking = this.bookings.get(id);\n    if (booking) {\n      const updatedBooking = { ...booking, status, updatedAt: new Date() };\n      this.bookings.set(id, updatedBooking);\n      return updatedBooking;\n    }\n    return undefined;\n  }\n\n  async getBookedSeats(busId: string, travelDate: string): Promise<string[]> {\n    const busBookings = Array.from(this.bookings.values()).filter(\n      (booking) => \n        booking.itemId === busId && \n        booking.travelDate === travelDate && \n        booking.status === 'confirmed' &&\n        booking.selectedSeats\n    );\n    \n    const bookedSeats: string[] = [];\n    busBookings.forEach((booking: any) => {\n      if (booking.selectedSeats) {\n        bookedSeats.push(...booking.selectedSeats);\n      }\n    });\n    \n    return bookedSeats;\n  }\n  \n  private async initializeSampleData() {\n    // Initialize sample destinations\n    await this.createDestination({\n      name: 'Lalbagh Fort',\n      country: 'Bangladesh',\n      district: 'Dhaka',\n      description: 'Historic Mughal fort complex in Old Dhaka with beautiful architecture',\n      imageUrl: '/assets/lalbagh-fort.jpg',\n      rating: '4.2',\n      priceFrom: 500,\n    });\n\n    await this.createDestination({\n      name: \"Cox's Bazar\",\n      country: 'Bangladesh',\n      district: \"Cox's Bazar\",\n      description: \"World's longest natural sandy sea beach\",\n      imageUrl: '/attached_assets/coxs-bazar-beach.jpg',\n      rating: '4.8',\n      priceFrom: 3500,\n    });\n    \n    await this.createDestination({\n      name: 'Sundarbans',\n      country: 'Bangladesh',\n      district: 'Khulna',\n      description: 'Largest mangrove forest and Royal Bengal Tiger habitat',\n      imageUrl: '/attached_assets/à¦¬à¦¿à¦·à§à¦®à¦¯à¦¼à¦à¦°_à¦¸à§à¦¨à§à¦¦à¦°à¦¬à¦¨_1755679381011.jpg',\n      rating: '4.9',\n      priceFrom: 4500,\n    });\n    \n    await this.createDestination({\n      name: 'Sylhet Tea Gardens',\n      country: 'Bangladesh',\n      district: 'Sylhet',\n      description: 'Rolling green hills covered with tea plantations',\n      imageUrl: '/attached_assets/R_1755680607561.jpg',\n      rating: '4.7',\n      priceFrom: 2800,\n    });\n\n    await this.createDestination({\n      name: 'Saint Martin Island',\n      country: 'Bangladesh',\n      district: \"Cox's Bazar\",\n      description: 'Small coral island with pristine beaches and clear blue waters',\n      imageUrl: '/attached_assets/R_1755681418237.jpg',\n      rating: '4.6',\n      priceFrom: 5200,\n    });\n\n    await this.createDestination({\n      name: 'Chittagong Hill Tracts',\n      country: 'Bangladesh',\n      district: 'Chittagong Hill Tracts',\n      description: 'Mountainous region with tribal culture, waterfalls and scenic beauty',\n      imageUrl: '/attached_assets/rsz_chittagong_hill_tracts_bangladesh_13817459523_1755682005508.jpg',\n      rating: '4.8',\n      priceFrom: 3200,\n    });\n\n    await this.createDestination({\n      name: 'Rangamati',\n      country: 'Bangladesh',\n      district: 'Chittagong Hill Tracts',\n      description: 'Lake district with hanging bridge, tribal museums and boat rides',\n      imageUrl: 'https://images.unsplash.com/photo-1507041957456-9c397ce39c97?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080',\n      rating: '4.5',\n      priceFrom: 2900,\n    });\n\n    await this.createDestination({\n      name: 'Kuakata Beach',\n      country: 'Bangladesh',\n      district: 'Patuakhali',\n      description: 'Unique beach where you can see both sunrise and sunset',\n      imageUrl: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080',\n      rating: '4.4',\n      priceFrom: 2500,\n    });\n\n    await this.createDestination({\n      name: 'Paharpur Buddhist Vihara',\n      country: 'Bangladesh',\n      district: 'Naogaon',\n      description: 'UNESCO World Heritage archaeological site with ancient Buddhist ruins',\n      imageUrl: 'https://images.unsplash.com/photo-1609949908476-d7e8aa50caf1?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080',\n      rating: '4.3',\n      priceFrom: 1800,\n    });\n\n    await this.createDestination({\n      name: 'Bagerhat Mosque City',\n      country: 'Bangladesh',\n      district: 'Bagerhat',\n      description: 'Historic mosque city with 60 domed mosques and ancient Islamic architecture',\n      imageUrl: '/assets/Sixty_Dome_Mosque,Bagerhat_1755544692073.jpg',\n      rating: '4.4',\n      priceFrom: 2200,\n    });\n\n    await this.createDestination({\n      name: 'Sajek Valley',\n      country: 'Bangladesh',\n      district: 'Rangamati',\n      description: 'Queen of hills with clouds touching mountain peaks and tribal culture',\n      imageUrl: 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080',\n      rating: '4.7',\n      priceFrom: 3800,\n    });\n\n    await this.createDestination({\n      name: 'Jaflong',\n      country: 'Bangladesh',\n      district: 'Sylhet',\n      description: 'Stone collection area with crystal clear river and scenic mountain views',\n      imageUrl: 'https://images.unsplash.com/photo-1596394516093-501ba68a0ba6?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080',\n      rating: '4.5',\n      priceFrom: 2400,\n    });\n\n    await this.createDestination({\n      name: 'Srimangal',\n      country: 'Bangladesh',\n      district: 'Moulvibazar',\n      description: 'Tea capital of Bangladesh with seven-layer tea and rainforest',\n      imageUrl: 'https://images.unsplash.com/photo-1627813303514-4e6a628b3bce?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080',\n      rating: '4.6',\n      priceFrom: 2600,\n    });\n\n    await this.createDestination({\n      name: 'Nilgiri Hills',\n      country: 'Bangladesh',\n      district: 'Bandarban',\n      description: 'Highest hills in Bangladesh with cloud kissing peaks and scenic beauty',\n      imageUrl: 'https://images.unsplash.com/photo-1554734867-bf3c00a49371?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080',\n      rating: '4.8',\n      priceFrom: 4200,\n    });\n\n    await this.createDestination({\n      name: 'Nafakhum Waterfall',\n      country: 'Bangladesh',\n      district: 'Bandarban',\n      description: 'Largest waterfall in Bangladesh surrounded by hills and natural beauty',\n      imageUrl: 'https://images.unsplash.com/photo-1518837695005-2083093ee35b?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080',\n      rating: '4.9',\n      priceFrom: 4800,\n    });\n\n    await this.createDestination({\n      name: 'Mahasthangarh',\n      country: 'Bangladesh',\n      district: 'Bogra',\n      description: 'Ancient archaeological site with ruins of the earliest urban settlement',\n      imageUrl: 'https://images.unsplash.com/photo-1469474968028-56623f02e42e?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080',\n      rating: '4.2',\n      priceFrom: 1600,\n    });\n\n    await this.createDestination({\n      name: 'Ratargul Swamp Forest',\n      country: 'Bangladesh',\n      district: 'Sylhet',\n      description: 'Freshwater swamp forest with boat rides through submerged trees',\n      imageUrl: 'https://images.unsplash.com/photo-1544551763-46a013bb70d5?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080',\n      rating: '4.5',\n      priceFrom: 2300,\n    });\n\n    await this.createDestination({\n      name: 'Bandarban',\n      country: 'Bangladesh',\n      district: 'Bandarban',\n      description: 'Hill district with tribal culture, natural beauty and adventure activities',\n      imageUrl: 'https://images.unsplash.com/photo-1585409677983-0f6c41ca9c3b?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080',\n      rating: '4.7',\n      priceFrom: 3500,\n    });\n\n    // Initialize sample hotels\n    await this.createHotel({\n      name: 'Sea Palace Hotel',\n      location: \"Cox's Bazar â¢ Sea View â¢ Premium Resort\",\n      description: 'Luxury beachfront hotel overlooking the Bay of Bengal',\n      imageUrl: 'https://images.unsplash.com/photo-1571896349842-33c89424de2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.7',\n      pricePerNight: 8500,\n      phone: '+880-341-64521',\n      amenities: ['Sea View', 'Pool', 'Spa', 'Restaurant'],\n    });\n    \n    await this.createHotel({\n      name: 'Pan Pacific Sonargaon',\n      location: 'Dhaka â¢ Business District â¢ 5-Star',\n      description: 'Premier luxury hotel in the heart of Dhaka',\n      imageUrl: 'https://images.unsplash.com/photo-1566073771259-6a8506099945?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.8',\n      pricePerNight: 12500,\n      phone: '+880-2-8833221',\n      amenities: ['Business Center', 'Gym', 'Pool', 'Multiple Restaurants'],\n    });\n\n    await this.createHotel({\n      name: 'Hotel Agrabad',\n      location: 'Chittagong â¢ Port City â¢ Business Hotel',\n      description: 'Modern hotel in the commercial heart of Chittagong',\n      imageUrl: 'https://images.unsplash.com/photo-1520250497591-112f2f40a3f4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.3',\n      pricePerNight: 7800,\n      phone: '+880-31-726543',\n      amenities: ['Conference Hall', 'Restaurant', 'Wi-Fi', 'Airport Shuttle'],\n    });\n\n    await this.createHotel({\n      name: 'Hotel Supreme',\n      location: 'Sylhet â¢ City Center â¢ Premium',\n      description: 'Elegant hotel with mountain views and tea garden access',\n      imageUrl: 'https://images.unsplash.com/photo-1571896349842-33c89424de2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.4',\n      pricePerNight: 6500,\n      phone: '+880-821-719832',\n      amenities: ['Garden View', 'Traditional Cuisine', 'Cultural Tours'],\n    });\n\n    await this.createHotel({\n      name: 'Kuakata Guest House',\n      location: 'Kuakata â¢ Beachfront â¢ Eco-Resort',\n      description: 'Sustainable beachfront accommodation with sunrise/sunset views',\n      imageUrl: 'https://images.unsplash.com/photo-1507525428034-b723cf961d3e?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.1',\n      pricePerNight: 4200,\n      phone: '+880-441-56789',\n      amenities: ['Beach Access', 'Fishing Trips', 'Local Cuisine'],\n    });\n\n    await this.createHotel({\n      name: 'Rangamati Water Resort',\n      location: 'Rangamati â¢ Lakeside â¢ Resort',\n      description: 'Floating resort with panoramic lake views and boat facilities',\n      imageUrl: 'https://images.unsplash.com/photo-1544551763-46a013bb70d5?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.5',\n      pricePerNight: 5800,\n      phone: '+880-351-62456',\n      amenities: ['Lake View', 'Boat Rides', 'Tribal Cultural Shows'],\n    });\n\n    // Initialize sample trip planners\n    await this.createTripPlanner({\n      origin: 'Dhaka',\n      destination: \"Cox's Bazar\",\n      price: 4500,\n      duration: 'Round trip â¢ Direct',\n      stops: 'Direct',\n      departureDate: 'Dec 15 - Dec 22',\n      returnDate: 'Dec 22',\n      dealType: 'Save 20%',\n    });\n    \n    await this.createTripPlanner({\n      origin: 'Dhaka',\n      destination: 'Sylhet',\n      price: 3800,\n      duration: 'Round trip â¢ Direct',\n      stops: 'Direct',\n      departureDate: 'Jan 10 - Jan 20',\n      returnDate: 'Jan 20',\n      dealType: 'Hot Deal',\n    });\n\n    await this.createTripPlanner({\n      origin: 'Dhaka',\n      destination: 'Chittagong',\n      price: 4200,\n      duration: 'Round trip â¢ Direct',\n      stops: 'Direct',\n      departureDate: 'Feb 5 - Feb 15',\n      returnDate: 'Feb 15',\n      dealType: 'Limited Seats',\n    });\n\n    await this.createTripPlanner({\n      origin: 'Chittagong',\n      destination: 'Cox\\'s Bazar',\n      price: 2800,\n      duration: 'Round trip â¢ Direct',\n      stops: 'Direct',\n      departureDate: 'Mar 1 - Mar 10',\n      returnDate: 'Mar 10',\n      dealType: 'Best Price',\n    });\n\n    await this.createTripPlanner({\n      origin: 'Dhaka',\n      destination: 'Jessore',\n      price: 3200,\n      duration: 'Round trip â¢ Direct',\n      stops: 'Direct',\n      departureDate: 'Apr 15 - Apr 25',\n      returnDate: 'Apr 25',\n      dealType: 'Early Bird',\n    });\n\n    await this.createTripPlanner({\n      origin: 'Sylhet',\n      destination: 'Cox\\'s Bazar',\n      price: 5500,\n      duration: 'Round trip â¢ 1 Stop',\n      stops: '1 Stop in Dhaka',\n      departureDate: 'May 20 - May 30',\n      returnDate: 'May 30',\n      dealType: 'Weekend Special',\n    });\n\n    await this.createTripPlanner({\n      origin: 'Dhaka',\n      destination: 'Barisal',\n      price: 2900,\n      duration: 'Round trip â¢ Direct',\n      stops: 'Direct',\n      departureDate: 'Jun 10 - Jun 20',\n      returnDate: 'Jun 20',\n      dealType: 'Summer Deal',\n    });\n\n    // Initialize sample buses\n    await this.createBus({\n      operator: 'Green Line Paribahan',\n      type: 'AC Bus',\n      origin: 'Dhaka',\n      destination: 'Cox\\'s Bazar',\n      departure: '07:00 AM',\n      arrival: '03:00 PM',\n      duration: '8h 0m',\n      price: 1200,\n      seats: 45,\n      amenities: ['AC', 'WiFi', 'TV', 'Refreshments'],\n      rating: '4.5'\n    });\n\n    await this.createBus({\n      operator: 'Shohagh Paribahan',\n      type: 'Non-AC Bus',\n      origin: 'Dhaka',\n      destination: 'Chittagong',\n      departure: '09:30 AM',\n      arrival: '05:30 PM',\n      duration: '8h 0m',\n      price: 800,\n      seats: 52,\n      amenities: ['TV', 'Refreshments'],\n      rating: '4.2'\n    });\n\n    await this.createBus({\n      operator: 'Hanif Enterprise',\n      type: 'Sleeper Coach',\n      origin: 'Dhaka',\n      destination: 'Sylhet',\n      departure: '10:00 PM',\n      arrival: '06:00 AM',\n      duration: '8h 0m',\n      price: 1500,\n      seats: 32,\n      amenities: ['AC', 'WiFi', 'Sleeper Berth', 'Blanket'],\n      rating: '4.7'\n    });\n\n    await this.createBus({\n      operator: 'Ena Transport',\n      type: 'Deluxe Bus',\n      origin: 'Chittagong',\n      destination: 'Cox\\'s Bazar',\n      departure: '06:00 AM',\n      arrival: '02:00 PM',\n      duration: '8h 0m',\n      price: 1000,\n      seats: 40,\n      amenities: ['AC', 'TV', 'Refreshments'],\n      rating: '4.3'\n    });\n\n    // Initialize sample private cars\n    await this.createPrivateCar({\n      type: 'Toyota Premio',\n      category: 'Sedan',\n      origin: 'Dhaka',\n      destination: 'Cox\\'s Bazar',\n      capacity: 4,\n      duration: '5h 30m',\n      price: 8500,\n      driver: 'Included',\n      features: ['AC', 'GPS', 'Professional Driver', 'Fuel Included'],\n      rating: '4.8'\n    });\n\n    await this.createPrivateCar({\n      type: 'Toyota Hiace',\n      category: 'Microbus',\n      origin: 'Dhaka',\n      destination: 'Chittagong',\n      capacity: 12,\n      duration: '6h 0m',\n      price: 12000,\n      driver: 'Included',\n      features: ['AC', 'GPS', 'Professional Driver', 'Fuel Included', 'Extra Space'],\n      rating: '4.6'\n    });\n\n    await this.createPrivateCar({\n      type: 'Mitsubishi Pajero',\n      category: 'SUV',\n      origin: 'Dhaka',\n      destination: 'Sylhet',\n      capacity: 7,\n      duration: '5h 45m',\n      price: 15000,\n      driver: 'Included',\n      features: ['AC', 'GPS', '4WD', 'Professional Driver', 'Fuel Included', 'Luxury Interior'],\n      rating: '4.9'\n    });\n\n    await this.createPrivateCar({\n      type: 'Honda CRV',\n      category: 'SUV',\n      origin: 'Chittagong',\n      destination: 'Cox\\'s Bazar',\n      capacity: 5,\n      duration: '5h 15m',\n      price: 10500,\n      driver: 'Included',\n      features: ['AC', 'GPS', 'Professional Driver', 'Fuel Included', 'Comfortable Interior'],\n      rating: '4.7'\n    });\n\n    // Initialize sample travel packages\n    await this.createTravelPackage({\n      name: \"Cox's Bazar Beach Getaway\",\n      description: 'Relax at the world\\'s longest natural beach with sunset views',\n      imageUrl: 'https://images.unsplash.com/photo-1559827260-dc66d52bef19?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      duration: '5 Days',\n      rating: '4.8',\n      price: 15500,\n      includes: ['Round-trip flights included', 'Sea-view hotel accommodation', 'Beach activities & water sports'],\n    });\n\n    await this.createTravelPackage({\n      name: 'Sundarbans Wildlife Safari',\n      description: 'Explore the mangrove forests and spot Royal Bengal Tigers',\n      imageUrl: 'https://images.unsplash.com/photo-1544551763-46a013bb70d5?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      duration: '4 Days',\n      rating: '4.9',\n      price: 18500,\n      includes: ['Professional wildlife guide', 'Boat safari through mangroves', 'Eco-lodge accommodation'],\n    });\n\n    await this.createTravelPackage({\n      name: 'Chittagong Hill Adventure',\n      description: 'Experience tribal culture and pristine hill station beauty',\n      imageUrl: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      duration: '6 Days',\n      rating: '4.6',\n      price: 16200,\n      includes: ['Tribal village visits', 'Waterfall trekking', 'Mountain resort accommodation'],\n    });\n\n    await this.createTravelPackage({\n      name: 'Rangamati Lake District Tour',\n      description: 'Discover the lake district with hanging bridge and cultural experiences',\n      imageUrl: 'https://images.unsplash.com/photo-1544551763-46a013bb70d5?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      duration: '3 Days',\n      rating: '4.4',\n      price: 12800,\n      includes: ['Lake boat rides', 'Tribal museum visits', 'Traditional handicraft shopping'],\n    });\n\n    // Initialize sample restaurants\n    await this.createRestaurant({\n      name: 'Jhau Bon Restaurant',\n      location: \"Cox's Bazar â¢ Beachfront â¢ Seafood\",\n      description: 'Fresh seafood with panoramic ocean views and traditional Bengali cuisine',\n      imageUrl: 'https://images.unsplash.com/photo-1559339352-11d035aa65de?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.6',\n      cuisine: 'Bengali Seafood',\n      priceRange: 'à§³à§³à§³',\n      phone: '+880-341-65432',\n      reviews: ['Amazing fresh fish and prawns!', 'Best beachfront dining experience', 'Authentic Bengali flavors with sea view']\n    });\n\n    await this.createRestaurant({\n      name: 'Handi Restaurant',\n      location: 'Dhaka â¢ Dhanmondi â¢ Fine Dining',\n      description: 'Premium dining experience with authentic Bangladeshi and Indian cuisine',\n      imageUrl: 'https://images.unsplash.com/photo-1414235077428-338989a2e8c0?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.8',\n      cuisine: 'Bangladeshi & Indian',\n      priceRange: 'à§³à§³à§³à§³',\n      phone: '+880-2-9661234',\n      reviews: ['Excellent biryani and kebabs', 'Elegant atmosphere for special occasions', 'Outstanding service and food quality']\n    });\n\n    await this.createRestaurant({\n      name: 'Mezban Restaurant',\n      location: 'Chittagong â¢ Agrabad â¢ Traditional',\n      description: 'Traditional Chittagonian cuisine including famous mezbani beef',\n      imageUrl: 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.5',\n      cuisine: 'Chittagonian',\n      priceRange: 'à§³à§³',\n      phone: '+880-31-654987',\n      reviews: ['Authentic mezbani beef curry', 'Must-try Chittagonian specialties', 'Rich flavors and generous portions']\n    });\n\n    await this.createRestaurant({\n      name: 'Tea Resort Restaurant',\n      location: 'Sylhet â¢ Sreemangal â¢ Garden Dining',\n      description: 'Garden restaurant serving fresh local cuisine amidst tea plantations',\n      imageUrl: 'https://images.unsplash.com/photo-1551632436-cbf8dd35adfa?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.4',\n      cuisine: 'Local & Continental',\n      priceRange: 'à§³à§³',\n      phone: '+880-821-567234',\n      reviews: ['Beautiful garden setting', 'Fresh organic ingredients', 'Perfect spot for tea lovers']\n    });\n\n    await this.createRestaurant({\n      name: 'Tribal Kitchen',\n      location: 'Bandarban â¢ Hill District â¢ Ethnic',\n      description: 'Authentic tribal cuisine featuring indigenous cooking methods and ingredients',\n      imageUrl: 'https://images.unsplash.com/photo-1504674900247-0877df9cc836?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.7',\n      cuisine: 'Tribal & Indigenous',\n      priceRange: 'à§³à§³',\n      phone: '+880-361-23456',\n      reviews: ['Unique bamboo shoot dishes', 'Cultural dining experience', 'Incredible hill station atmosphere']\n    });\n\n    await this.createRestaurant({\n      name: 'Mangrove Cafe',\n      location: 'Sundarbans â¢ Eco-Resort â¢ Natural',\n      description: 'Eco-friendly restaurant serving sustainable local cuisine in the heart of mangroves',\n      imageUrl: 'https://images.unsplash.com/photo-1544148103-0773bf10d330?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.3',\n      cuisine: 'Eco-Local',\n      priceRange: 'à§³à§³',\n      phone: '+880-41-789123',\n      reviews: ['Sustainable and delicious', 'Beautiful nature views while dining', 'Supporting local communities']\n    });\n\n    // Add more location-specific hotels for better filtering\n    await this.createHotel({\n      name: 'Dhaka Regency Hotel',\n      location: 'Dhaka â¢ Gulshan â¢ Business District',\n      description: 'Modern business hotel in the heart of Dhaka with executive facilities',\n      imageUrl: 'https://images.unsplash.com/photo-1566073771259-6a8506099945?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.5',\n      pricePerNight: 9500,\n      phone: '+880-2-8821456',\n      amenities: ['Business Center', 'Rooftop Pool', 'Airport Transfer', 'Conference Rooms'],\n    });\n\n    await this.createHotel({\n      name: 'Sundarbans Eco Lodge',\n      location: 'Khulna â¢ Sundarbans â¢ Eco Resort',\n      description: 'Sustainable eco-lodge offering wildlife viewing and nature experiences',\n      imageUrl: 'https://images.unsplash.com/photo-1544551763-46a013bb70d5?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.2',\n      pricePerNight: 6800,\n      phone: '+880-41-567890',\n      amenities: ['Wildlife Tours', 'Boat Trips', 'Nature Walks', 'Bird Watching'],\n    });\n\n    await this.createHotel({\n      name: 'Hill View Resort',\n      location: 'Bandarban â¢ Hill District â¢ Mountain Resort',\n      description: 'Mountain resort with panoramic valley views and adventure activities',\n      imageUrl: 'https://images.unsplash.com/photo-1506197603052-3cc9c3a201bd?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.6',\n      pricePerNight: 7200,\n      phone: '+880-361-78912',\n      amenities: ['Mountain Views', 'Trekking Guide', 'Tribal Cultural Shows', 'Adventure Sports'],\n    });\n\n    // Add more location-specific restaurants\n    await this.createRestaurant({\n      name: 'Old Dhaka Biriyani House',\n      location: 'Dhaka â¢ Old Town â¢ Traditional',\n      description: 'Famous for authentic Dhaka-style biriyani and traditional Bengali dishes',\n      imageUrl: 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.7',\n      cuisine: 'Traditional Bengali',\n      priceRange: 'à§³à§³',\n      phone: '+880-2-7312456',\n      reviews: ['Best biriyani in Old Dhaka!', 'Authentic flavors passed down generations', 'Must-try for biriyani lovers']\n    });\n\n    await this.createRestaurant({\n      name: 'Khulna Riverside Grill',\n      location: 'Khulna â¢ Riverfront â¢ Seafood',\n      description: 'Fresh river fish and traditional Khulna cuisine with riverside dining',\n      imageUrl: 'https://images.unsplash.com/photo-1559339352-11d035aa65de?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.4',\n      cuisine: 'River Fish & Bengali',\n      priceRange: 'à§³à§³',\n      phone: '+880-41-234567',\n      reviews: ['Fresh river fish preparations', 'Beautiful riverside setting', 'Authentic Khulna flavors']\n    });\n\n    await this.createRestaurant({\n      name: 'Patuakhali Beach Shack',\n      location: 'Patuakhali â¢ Kuakata Beach â¢ Coastal',\n      description: 'Beachside restaurant specializing in fresh seafood and coastal delicacies',\n      imageUrl: 'https://images.unsplash.com/photo-1559339352-11d035aa65de?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.3',\n      cuisine: 'Coastal Seafood',\n      priceRange: 'à§³à§³',\n      phone: '+880-441-34567',\n      reviews: ['Fresh crab and prawns', 'Perfect sunset dining', 'Authentic coastal flavors']\n    });\n\n    // Add Bagerhat hotels and restaurants\n    await this.createHotel({\n      name: 'Bagerhat Heritage Hotel',\n      location: 'Bagerhat â¢ Historic City â¢ Heritage Hotel',\n      description: 'Traditional hotel near the famous Sixty Dome Mosque with Islamic architecture',\n      imageUrl: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.1',\n      pricePerNight: 4500,\n      phone: '+880-468-23456',\n      amenities: ['Mosque View', 'Traditional Architecture', 'Cultural Tours', 'Free WiFi'],\n    });\n\n    await this.createHotel({\n      name: 'Khan Jahan Ali Resort',\n      location: 'Bagerhat â¢ Mosque City â¢ Boutique Resort',\n      description: 'Boutique resort inspired by the medieval ruler Khan Jahan Ali with modern amenities',\n      imageUrl: 'https://images.unsplash.com/photo-1520250497591-112f2f40a3f4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.3',\n      pricePerNight: 5800,\n      phone: '+880-468-56789',\n      amenities: ['Heritage Tours', 'Restaurant', 'Garden Views', 'Airport Transfer'],\n    });\n\n    await this.createHotel({\n      name: 'Sixty Dome Guest House',\n      location: 'Bagerhat â¢ UNESCO Site â¢ Budget Hotel',\n      description: 'Comfortable budget accommodation within walking distance of UNESCO World Heritage sites',\n      imageUrl: 'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '3.9',\n      pricePerNight: 2800,\n      phone: '+880-468-12345',\n      amenities: ['Heritage Site Access', 'Local Guide Service', 'Traditional Breakfast', 'Bicycle Rental'],\n    });\n\n    await this.createRestaurant({\n      name: 'Khan Jahan Ali Kitchen',\n      location: 'Bagerhat â¢ Historic Quarter â¢ Traditional',\n      description: 'Traditional Bengali restaurant serving authentic regional dishes near the mosque complex',\n      imageUrl: 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.2',\n      cuisine: 'Traditional Bengali',\n      priceRange: 'à§³à§³',\n      phone: '+880-468-98765',\n      reviews: ['Authentic local flavors', 'Historic atmosphere', 'Great traditional fish curry']\n    });\n\n    await this.createRestaurant({\n      name: 'Heritage Spice Restaurant',\n      location: 'Bagerhat â¢ Mosque City â¢ Regional Cuisine',\n      description: 'Family-owned restaurant specializing in Bagerhat regional cuisine and fresh river fish',\n      imageUrl: 'https://images.unsplash.com/photo-1414235077428-338989a2e8c0?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.4',\n      cuisine: 'Regional Bengali',\n      priceRange: 'à§³à§³',\n      phone: '+880-468-45678',\n      reviews: ['Amazing river fish preparations', 'Warm hospitality', 'Must-try local specialties']\n    });\n\n    await this.createRestaurant({\n      name: 'Dome View Cafe',\n      location: 'Bagerhat â¢ UNESCO Area â¢ Cafe',\n      description: 'Charming cafe with views of historic domes serving tea, snacks and light meals',\n      imageUrl: 'https://images.unsplash.com/photo-1551632436-cbf8dd35adfa?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      rating: '4.0',\n      cuisine: 'Cafe & Snacks',\n      phone: '+880-468-87654',\n      priceRange: 'à§³',\n      reviews: ['Perfect for history lovers', 'Great tea and pastries', 'Beautiful dome views']\n    });\n    \n    // Storage initialized successfully with sample data\n  }\n}\n\nexport class DbStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    // Hash the password before storing\n    const saltRounds = 10;\n    const hashedPassword = await bcrypt.hash(user.password, saltRounds);\n    \n    const result = await db.insert(users).values({\n      ...user,\n      password: hashedPassword,\n    }).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, user: UpdateUser): Promise<User | undefined> {\n    const result = await db.update(users).set(user).where(eq(users.id, id)).returning();\n    return result[0];\n  }\n\n  async validateUser(email: string, password: string): Promise<User | undefined> {\n    const user = await this.getUserByEmail(email);\n    if (user) {\n      const isValid = await bcrypt.compare(password, user.password);\n      if (isValid) {\n        return user;\n      }\n    }\n    return undefined;\n  }\n\n  // Destination operations\n  async getDestinations(): Promise<Destination[]> {\n    return db.select().from(destinations);\n  }\n\n  async getDestination(id: string): Promise<Destination | undefined> {\n    const result = await db.select().from(destinations).where(eq(destinations.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createDestination(destination: InsertDestination): Promise<Destination> {\n    const result = await db.insert(destinations).values(destination).returning();\n    return result[0];\n  }\n\n  // Hotel operations\n  async getHotels(): Promise<Hotel[]> {\n    return db.select().from(hotels);\n  }\n\n  async getHotel(id: string): Promise<Hotel | undefined> {\n    const result = await db.select().from(hotels).where(eq(hotels.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createHotel(hotel: InsertHotel): Promise<Hotel> {\n    const result = await db.insert(hotels).values(hotel).returning();\n    return result[0];\n  }\n\n  // Trip Planner operations\n  async getTripPlanners(): Promise<TripPlanner[]> {\n    return db.select().from(tripPlanners);\n  }\n\n  async getTripPlanner(id: string): Promise<TripPlanner | undefined> {\n    const result = await db.select().from(tripPlanners).where(eq(tripPlanners.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createTripPlanner(tripPlanner: InsertTripPlanner): Promise<TripPlanner> {\n    const result = await db.insert(tripPlanners).values(tripPlanner).returning();\n    return result[0];\n  }\n\n  // Bus operations\n  async getBuses(): Promise<Bus[]> {\n    return db.select().from(buses);\n  }\n\n  async getBus(id: string): Promise<Bus | undefined> {\n    const result = await db.select().from(buses).where(eq(buses.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createBus(bus: InsertBus): Promise<Bus> {\n    const result = await db.insert(buses).values(bus).returning();\n    return result[0];\n  }\n\n  // Private Car operations\n  async getPrivateCars(): Promise<PrivateCar[]> {\n    return db.select().from(privateCars);\n  }\n\n  async getPrivateCar(id: string): Promise<PrivateCar | undefined> {\n    const result = await db.select().from(privateCars).where(eq(privateCars.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createPrivateCar(privateCar: InsertPrivateCar): Promise<PrivateCar> {\n    const result = await db.insert(privateCars).values(privateCar).returning();\n    return result[0];\n  }\n\n  // Travel Package operations\n  async getTravelPackages(): Promise<TravelPackage[]> {\n    return db.select().from(travelPackages);\n  }\n\n  async getTravelPackage(id: string): Promise<TravelPackage | undefined> {\n    const result = await db.select().from(travelPackages).where(eq(travelPackages.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createTravelPackage(travelPackage: InsertTravelPackage): Promise<TravelPackage> {\n    const result = await db.insert(travelPackages).values(travelPackage).returning();\n    return result[0];\n  }\n\n  // Restaurant operations\n  async getRestaurants(): Promise<Restaurant[]> {\n    return db.select().from(restaurants);\n  }\n\n  async getRestaurant(id: string): Promise<Restaurant | undefined> {\n    const result = await db.select().from(restaurants).where(eq(restaurants.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createRestaurant(restaurant: InsertRestaurant): Promise<Restaurant> {\n    const result = await db.insert(restaurants).values(restaurant).returning();\n    return result[0];\n  }\n\n  // Booking operations\n  async getBookings(userId: string): Promise<Booking[]> {\n    return db.select().from(bookings).where(eq(bookings.userId, userId));\n  }\n\n  async getBooking(id: string): Promise<Booking | undefined> {\n    const result = await db.select().from(bookings).where(eq(bookings.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createBooking(booking: InsertBooking): Promise<Booking> {\n    const result = await db.insert(bookings).values(booking).returning();\n    return result[0];\n  }\n\n  async updateBookingStatus(id: string, status: string): Promise<Booking | undefined> {\n    const result = await db.update(bookings)\n      .set({ status })\n      .where(eq(bookings.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async getBookedSeats(busId: string, travelDate: string): Promise<string[]> {\n    const busBookings = await db.select()\n      .from(bookings)\n      .where(and(\n        eq(bookings.itemId, busId),\n        eq(bookings.travelDate, travelDate),\n        eq(bookings.status, 'confirmed')\n      ));\n    \n    const bookedSeats: string[] = [];\n    busBookings.forEach((booking: any) => {\n      if (booking.selectedSeats) {\n        bookedSeats.push(...booking.selectedSeats);\n      }\n    });\n    \n    return bookedSeats;\n  }\n}\n\n// Temporarily use MemStorage while fixing database connection\n// TODO: Switch to DbStorage once Supabase connection is resolved\nexport const storage = new MemStorage();\n","size_bytes":45946},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  username: text(\"username\").notNull().unique(),\n  phone: text(\"phone\"),\n  dateOfBirth: text(\"date_of_birth\"),\n  nationality: text(\"nationality\"),\n  profileImageUrl: text(\"profile_image_url\"),\n  createdAt: text(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const destinations = pgTable(\"destinations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  country: text(\"country\").notNull(),\n  district: text(\"district\").notNull(),\n  description: text(\"description\").notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  rating: text(\"rating\").notNull(),\n  priceFrom: integer(\"price_from\").notNull(),\n});\n\nexport const hotels = pgTable(\"hotels\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  location: text(\"location\").notNull(),\n  description: text(\"description\").notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  rating: text(\"rating\").notNull(),\n  pricePerNight: integer(\"price_per_night\").notNull(),\n  phone: text(\"phone\").notNull(),\n  amenities: text(\"amenities\").array().notNull().default([]),\n});\n\nexport const tripPlanners = pgTable(\"trip_planners\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  origin: text(\"origin\").notNull(),\n  destination: text(\"destination\").notNull(),\n  price: integer(\"price\").notNull(),\n  duration: text(\"duration\").notNull().default(''),\n  stops: text(\"stops\").notNull().default(''),\n  departureDate: text(\"departure_date\").notNull().default(''),\n  returnDate: text(\"return_date\").notNull().default(''),\n  dealType: text(\"deal_type\").notNull().default(''),\n});\n\nexport const buses = pgTable(\"buses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  operator: text(\"operator\").notNull(),\n  type: text(\"type\").notNull(),\n  origin: text(\"origin\").notNull(),\n  destination: text(\"destination\").notNull(),\n  departure: text(\"departure\").notNull(),\n  arrival: text(\"arrival\").notNull(),\n  duration: text(\"duration\").notNull(),\n  price: integer(\"price\").notNull(),\n  seats: integer(\"seats\").notNull(),\n  amenities: text(\"amenities\").array().notNull().default([]),\n  rating: text(\"rating\").notNull(),\n});\n\nexport const privateCars = pgTable(\"private_cars\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(),\n  category: text(\"category\").notNull(),\n  origin: text(\"origin\").notNull(),\n  destination: text(\"destination\").notNull(),\n  capacity: integer(\"capacity\").notNull(),\n  duration: text(\"duration\").notNull(),\n  price: integer(\"price\").notNull(),\n  driver: text(\"driver\").notNull(),\n  features: text(\"features\").array().notNull().default([]),\n  rating: text(\"rating\").notNull(),\n});\n\nexport const travelPackages = pgTable(\"travel_packages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  duration: text(\"duration\").notNull(),\n  rating: text(\"rating\").notNull(),\n  price: integer(\"price\").notNull(),\n  includes: text(\"includes\").array().notNull().default([]),\n});\n\nexport const restaurants = pgTable(\"restaurants\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  location: text(\"location\").notNull(),\n  description: text(\"description\").notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  rating: text(\"rating\").notNull(),\n  cuisine: text(\"cuisine\").notNull(),\n  priceRange: text(\"price_range\").notNull(),\n  phone: text(\"phone\").notNull(),\n  reviews: text(\"reviews\").array().notNull().default([]),\n});\n\nexport const bookings = pgTable(\"bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\"),\n  itemId: varchar(\"item_id\").notNull(),\n  itemType: text(\"item_type\").notNull(), // 'hotel', 'restaurant', 'flight', 'bus', 'car'\n  customerName: text(\"customer_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\").notNull(),\n  passengers: integer(\"passengers\"),\n  specialRequests: text(\"special_requests\"),\n  travelDate: text(\"travel_date\"),\n  status: text(\"status\").notNull().default('confirmed'), // 'confirmed', 'cancelled', 'pending'\n  // Property information\n  propertyName: text(\"property_name\"),\n  propertyLocation: text(\"property_location\"),\n  propertyImageUrl: text(\"property_image_url\"),\n  propertyPhone: text(\"property_phone\"),\n  confirmationNumber: text(\"confirmation_number\"),\n  bookingType: text(\"booking_type\"), // 'hotel', 'restaurant'\n  // Hotel specific fields\n  roomType: text(\"room_type\"),\n  checkIn: text(\"check_in\"),\n  checkOut: text(\"check_out\"),\n  nights: integer(\"nights\"),\n  guests: integer(\"guests\"),\n  totalAmount: integer(\"total_amount\"),\n  // Restaurant specific fields\n  reservationDate: text(\"reservation_date\"),\n  reservationTime: text(\"reservation_time\"),\n  partySize: integer(\"party_size\"),\n  cuisine: text(\"cuisine\"),\n  priceRange: text(\"price_range\"),\n  // Bus specific fields\n  selectedSeats: text(\"selected_seats\").array(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateUserSchema = createInsertSchema(users).omit({\n  id: true,\n  email: true,\n  password: true,\n  createdAt: true,\n  updatedAt: true,\n}).partial();\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport const insertDestinationSchema = createInsertSchema(destinations).omit({\n  id: true,\n});\n\nexport const insertHotelSchema = createInsertSchema(hotels).omit({\n  id: true,\n});\n\nexport const insertTripPlannerSchema = createInsertSchema(tripPlanners).omit({\n  id: true,\n});\n\nexport const insertBusSchema = createInsertSchema(buses).omit({\n  id: true,\n});\n\nexport const insertPrivateCarSchema = createInsertSchema(privateCars).omit({\n  id: true,\n});\n\nexport const insertTravelPackageSchema = createInsertSchema(travelPackages).omit({\n  id: true,\n});\n\nexport const insertRestaurantSchema = createInsertSchema(restaurants).omit({\n  id: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UpdateUser = z.infer<typeof updateUserSchema>;\nexport type LoginCredentials = z.infer<typeof loginSchema>;\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertDestination = z.infer<typeof insertDestinationSchema>;\nexport type InsertHotel = z.infer<typeof insertHotelSchema>;\nexport type InsertTripPlanner = z.infer<typeof insertTripPlannerSchema>;\nexport type InsertBus = z.infer<typeof insertBusSchema>;\nexport type InsertPrivateCar = z.infer<typeof insertPrivateCarSchema>;\nexport type InsertTravelPackage = z.infer<typeof insertTravelPackageSchema>;\nexport type InsertRestaurant = z.infer<typeof insertRestaurantSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Destination = typeof destinations.$inferSelect;\nexport type Hotel = typeof hotels.$inferSelect;\nexport type TripPlanner = typeof tripPlanners.$inferSelect;\nexport type Bus = typeof buses.$inferSelect;\nexport type PrivateCar = typeof privateCars.$inferSelect;\nexport type TravelPackage = typeof travelPackages.$inferSelect;\nexport type Restaurant = typeof restaurants.$inferSelect;\n","size_bytes":8207},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport About from \"@/pages/about\";\nimport Destinations from \"@/pages/destinations\";\nimport DestinationDetail from \"@/pages/destination-detail\";\nimport Hotels from \"@/pages/hotels\";\nimport TripPlanner from \"@/pages/trip-planner\";\nimport MyBookings from \"@/pages/my-bookings\";\nimport HotelBooking from \"@/pages/hotel-booking\";\nimport RestaurantBooking from \"@/pages/restaurant-booking\";\nimport TransportBooking from \"@/pages/transport-booking\";\nimport Support from \"@/pages/support\";\nimport SignIn from \"@/pages/sign-in\";\nimport SignUp from \"@/pages/sign-up\";\nimport Profile from \"@/pages/profile\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/destinations\" component={Destinations} />\n      <Route path=\"/destinations/:id\" component={DestinationDetail} />\n      <Route path=\"/hotels\" component={Hotels} />\n      <Route path=\"/trip-planner\" component={TripPlanner} />\n\n      <Route path=\"/my-bookings\" component={MyBookings} />\n      <Route path=\"/hotel-booking/:id\" component={HotelBooking} />\n      <Route path=\"/restaurant-booking/:id\" component={RestaurantBooking} />\n      <Route path=\"/transport-booking/:type/:id\" component={TransportBooking} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/support\" component={Support} />\n      <Route path=\"/sign-in\" component={SignIn} />\n      <Route path=\"/sign-up\" component={SignUp} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2079},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Custom smooth animations for carousel */\n@layer utilities {\n  .perspective-1000 {\n    perspective: 1000px;\n  }\n  \n  .preserve-3d {\n    transform-style: preserve-3d;\n  }\n  \n  .backface-hidden {\n    backface-visibility: hidden;\n    -webkit-backface-visibility: hidden;\n  }\n  \n  .smooth-gpu {\n    will-change: transform, opacity;\n    transform: translate3d(0, 0, 0);\n    backface-visibility: hidden;\n    -webkit-backface-visibility: hidden;\n  }\n  \n  .carousel-card {\n    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n    will-change: transform, opacity, filter;\n  }\n  \n  .carousel-card-fast {\n    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n    will-change: transform, opacity, filter;\n  }\n}\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(218, 87%, 38%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(218, 87%, 58%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --accent: hsl(21, 92%, 53%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --neutral: hsl(212, 26%, 40%);\n  --neutral-foreground: hsl(0, 0%, 100%);\n  --light-gray: hsl(210, 40%, 98%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n/* Glass form input styling */\n.glass-form input[type=\"text\"],\n.glass-form input[type=\"date\"],\n.glass-form select,\n.glass-form button[role=\"combobox\"] {\n  color: white !important;\n}\n\n.glass-form input[type=\"text\"]::placeholder,\n.glass-form input[type=\"date\"]::placeholder {\n  color: rgba(255, 255, 255, 0.7) !important;\n}\n\n.glass-form [data-placeholder] {\n  color: rgba(255, 255, 255, 0.7) !important;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(218, 87%, 48%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(218, 87%, 68%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --accent: hsl(21, 92%, 63%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --neutral: hsl(212, 26%, 50%);\n  --neutral-foreground: hsl(0, 0%, 100%);\n  --light-gray: hsl(210, 40%, 8%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n@layer utilities {\n  /* Smooth animations */\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  .animate-fade-in {\n    animation: fadeIn 0.8s ease-out forwards;\n  }\n\n  .animate-slide-up {\n    animation: slideUp 0.6s ease-out forwards;\n  }\n\n  .animate-scale-in {\n    animation: scaleIn 0.5s ease-out forwards;\n  }\n\n  .animate-bounce-subtle {\n    animation: bounceSubtle 2s ease-in-out infinite;\n  }\n\n  /* Custom smooth transitions */\n  .transition-smooth {\n    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .transition-butter {\n    transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  }\n\n  .transition-elastic {\n    transition: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n  }\n\n  /* Enhanced Hover effects matching Why Choose Us style */\n  .hover-lift {\n    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1), box-shadow 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .hover-lift:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.12);\n  }\n\n  .hover-glow {\n    transition: box-shadow 0.3s ease;\n  }\n\n  .hover-glow:hover {\n    box-shadow: 0 0 20px rgba(59, 130, 246, 0.25);\n  }\n\n  /* Why Choose Us inspired card styles */\n  .elegant-card {\n    @apply bg-white rounded-2xl shadow-lg hover:shadow-xl transition-butter border border-gray-100;\n  }\n\n  .elegant-card:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.1);\n  }\n\n  .section-bg-soft {\n    background: linear-gradient(135deg, #fdf2f8 0%, #fef7ff 50%, #f0f9ff 100%);\n  }\n\n  .section-bg-warm {\n    background: linear-gradient(135deg, #fff7ed 0%, #fef3c7 50%, #fdf2f8 100%);\n  }\n\n  .section-bg-cool {\n    background: linear-gradient(135deg, #f0f9ff 0%, #eff6ff 50%, #fdf2f8 100%);\n  }\n\n  .section-bg-lavender {\n    background: linear-gradient(135deg, #f3e8ff 0%, #fdf4ff 50%, #f0f9ff 100%);\n  }\n\n  .section-bg-mint {\n    background: linear-gradient(135deg, #ecfdf5 0%, #f0fdf4 50%, #fef7ff 100%);\n  }\n\n  .icon-bg-orange {\n    @apply bg-orange-100 text-orange-600 rounded-xl w-12 h-12 flex items-center justify-center;\n  }\n\n  .icon-bg-blue {\n    @apply bg-blue-100 text-blue-600 rounded-xl w-12 h-12 flex items-center justify-center;\n  }\n\n  .icon-bg-green {\n    @apply bg-green-100 text-green-600 rounded-xl w-12 h-12 flex items-center justify-center;\n  }\n\n  .icon-bg-purple {\n    @apply bg-purple-100 text-purple-600 rounded-xl w-12 h-12 flex items-center justify-center;\n  }\n\n  .icon-bg-red {\n    @apply bg-red-100 text-red-600 rounded-xl w-12 h-12 flex items-center justify-center;\n  }\n\n  .icon-bg-yellow {\n    @apply bg-yellow-100 text-yellow-600 rounded-xl w-12 h-12 flex items-center justify-center;\n  }\n\n  /* Backdrop blur animations */\n  .backdrop-animate {\n    backdrop-filter: blur(10px);\n    transition: backdrop-filter 0.3s ease, background-color 0.3s ease;\n  }\n\n  .backdrop-animate:hover {\n    backdrop-filter: blur(20px);\n  }\n\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-20px); }\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(30px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes slideUp {\n  from { opacity: 0; transform: translateY(60px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes scaleIn {\n  from { opacity: 0; transform: scale(0.8); }\n  to { opacity: 1; transform: scale(1); }\n}\n\n@keyframes bounceSubtle {\n  0%, 20%, 50%, 80%, 100% { transform: translateY(0); }\n  40% { transform: translateY(-10px); }\n  60% { transform: translateY(-5px); }\n}\n\n/* Smooth scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: rgba(0, 0, 0, 0.1);\n  border-radius: 10px;\n}\n\n::-webkit-scrollbar-thumb {\n  background: linear-gradient(45deg, #3b82f6, #1d4ed8);\n  border-radius: 10px;\n  transition: background 0.3s ease;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(45deg, #1d4ed8, #1e40af);\n}\n\n/* Mobile-specific responsive improvements */\n@media (max-width: 640px) {\n  .mobile-padding {\n    padding-left: 1rem !important;\n    padding-right: 1rem !important;\n  }\n  \n  .mobile-text {\n    font-size: 0.875rem !important;\n    line-height: 1.25rem !important;\n  }\n  \n  .mobile-spacing > * + * {\n    margin-top: 0.75rem !important;\n  }\n  \n  /* Ensure buttons are touch-friendly */\n  button {\n    min-height: 44px;\n  }\n  \n  /* Better form input sizing on mobile */\n  input, textarea {\n    min-height: 44px;\n    padding: 12px 16px;\n  }\n}\n\n/* ShareTrip-style mobile optimizations */\n@media (max-width: 768px) {\n  .mobile-compact-card {\n    @apply rounded-lg shadow-sm bg-white;\n  }\n  \n  .mobile-compact-padding {\n    @apply p-3;\n  }\n  \n  .mobile-compact-text {\n    @apply text-sm;\n  }\n  \n  .mobile-compact-title {\n    @apply text-base font-semibold;\n  }\n  \n  .mobile-compact-button {\n    @apply px-3 py-1.5 text-xs rounded-md;\n  }\n  \n  .mobile-compact-grid {\n    @apply gap-3;\n  }\n  \n  .mobile-clean-shadow {\n    @apply shadow-sm hover:shadow-md transition-shadow duration-200;\n  }\n  \n  /* Override elegant-card for mobile */\n  .elegant-card {\n    @apply bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300 border-0;\n  }\n  \n  .elegant-card:hover {\n    transform: none;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  }\n}\n\n/* Tablet optimizations */\n@media (min-width: 641px) and (max-width: 1024px) {\n  .tablet-grid {\n    grid-template-columns: repeat(2, 1fr) !important;\n    gap: 1.5rem !important;\n  }\n}\n\n","size_bytes":11979},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/faq.tsx":{"content":"import { useState } from 'react';\nimport { ChevronDown, ChevronUp } from 'lucide-react';\n\ninterface FAQItem {\n  question: string;\n  answer: string;\n}\n\nconst faqData: FAQItem[] = [\n  {\n    question: \"What is the best time to visit Bangladesh?\",\n    answer: \"The best time to visit Bangladesh is during the cool, dry season from October to March. This period offers pleasant weather with lower humidity and minimal rainfall, perfect for sightseeing and outdoor activities.\"\n  },\n  {\n    question: \"Do I need a visa to visit Bangladesh?\",\n    answer: \"Most visitors need a visa to enter Bangladesh. You can apply for a tourist visa online or at a Bangladesh embassy. Some countries are eligible for visa-on-arrival. Check with your local Bangladesh embassy for specific requirements.\"\n  },\n  {\n    question: \"What currency is used in Bangladesh?\",\n    answer: \"The currency of Bangladesh is the Bangladeshi Taka (BDT), symbolized as à§³. Major credit cards are accepted in hotels and restaurants in big cities, but it's advisable to carry cash for local markets and smaller establishments.\"\n  },\n  {\n    question: \"Is Bangladesh safe for tourists?\",\n    answer: \"Bangladesh is generally safe for tourists. Like any destination, it's important to stay aware of your surroundings, avoid isolated areas at night, and follow local guidelines. Our tours include experienced local guides for added safety.\"\n  },\n  {\n    question: \"What languages are spoken in Bangladesh?\",\n    answer: \"Bengali (Bangla) is the official language of Bangladesh. English is widely spoken in tourist areas, hotels, and by educated locals, especially in major cities like Dhaka and Chittagong.\"\n  },\n  {\n    question: \"What should I pack for my trip to Bangladesh?\",\n    answer: \"Pack lightweight, breathable clothing, comfortable walking shoes, sunscreen, insect repellent, and modest attire for visiting religious sites. During monsoon season (June-September), waterproof clothing is essential.\"\n  }\n];\n\nexport default function FAQ() {\n  const [openIndex, setOpenIndex] = useState<number | null>(null);\n\n  const toggleFAQ = (index: number) => {\n    setOpenIndex(openIndex === index ? null : index);\n  };\n\n  return (\n    <section className=\"py-8 sm:py-12 lg:py-16 section-bg-soft\">\n      <div className=\"max-w-4xl mx-auto px-3 sm:px-4 lg:px-8\">\n        <div className=\"text-center mb-8 sm:mb-10 lg:mb-12\">\n          <div className=\"flex justify-center mb-3 sm:mb-4\">\n            <div className=\"icon-bg-purple\">\n              <svg className=\"w-5 sm:w-6 h-5 sm:h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n            </div>\n          </div>\n          <h2 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-800 mb-3 sm:mb-4\">Frequently Asked Questions</h2>\n          <p className=\"text-base sm:text-lg lg:text-xl text-gray-600\">Everything you need to know about traveling to Bangladesh</p>\n        </div>\n\n        <div className=\"space-y-3 sm:space-y-4\">\n          {faqData.map((faq, index) => (\n            <div \n              key={index}\n              className=\"elegant-card overflow-hidden hover-lift transition-butter\"\n            >\n              <button\n                className=\"w-full px-4 sm:px-6 py-3 sm:py-4 text-left flex justify-between items-center hover:bg-gray-50 transition-colors\"\n                onClick={() => toggleFAQ(index)}\n              >\n                <span className=\"font-semibold text-gray-800 text-sm sm:text-base pr-4\">{faq.question}</span>\n                {openIndex === index ? (\n                  <ChevronUp className=\"w-5 h-5 text-primary\" />\n                ) : (\n                  <ChevronDown className=\"w-5 h-5 text-primary\" />\n                )}\n              </button>\n              {openIndex === index && (\n                <div className=\"px-6 pb-4\">\n                  <p className=\"text-gray-600 leading-relaxed\">{faq.answer}</p>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":4262},"client/src/components/flight-deals.tsx":{"content":"import { Heart, ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useQuery } from '@tanstack/react-query';\nimport type { Flight } from '@shared/schema';\n\nexport default function FlightDeals() {\n  const { data: flights = [], isLoading, error } = useQuery<Flight[]>({\n    queryKey: ['/api/flights'],\n  });\n\n  const handleBookNow = () => {\n    alert('This would navigate to the booking page in a real application.');\n  };\n\n  // Map flights to destination images\n  const getDestinationImage = (destination: string) => {\n    const imageMap: { [key: string]: string } = {\n      \"Cox's Bazar\": \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n      \"Sylhet\": \"https://images.unsplash.com/photo-1544551763-46a013bb70d5?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n      \"Chittagong\": \"https://images.unsplash.com/photo-1571896349842-33c89424de2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n      \"Jessore\": \"https://images.unsplash.com/photo-1566073771259-6a8506099945?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\"\n    };\n    return imageMap[destination] || \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\";\n  };\n\n  if (isLoading) {\n    return (\n      <section id=\"flights\" className=\"py-16 bg-white\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">Flight Offer Deals</h2>\n            <p className=\"text-gray-600\">Competitive fares for your route-specific searches.</p>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"bg-white rounded-xl shadow-md animate-pulse\">\n                <div className=\"w-full h-48 bg-gray-200 rounded-t-xl\"></div>\n                <div className=\"p-4\">\n                  <div className=\"h-6 bg-gray-200 rounded mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"flex justify-between items-center\">\n                    <div className=\"h-8 bg-gray-200 rounded w-24\"></div>\n                    <div className=\"h-10 bg-gray-200 rounded w-20\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  if (error) {\n    return (\n      <section id=\"flights\" className=\"py-16 bg-white\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">Flight Offer Deals</h2>\n            <p className=\"text-red-600\">Failed to load flight deals. Please try again later.</p>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"flights\" className=\"py-16 bg-white\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">Flight Offer Deals</h2>\n          <p className=\"text-gray-600\">Competitive fares for your route-specific searches.</p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto mb-8\">\n          {flights.slice(0, 4).map((flight, index) => (\n            <div \n              key={flight.id}\n              className=\"bg-white rounded-xl shadow-md hover-lift transition-butter overflow-hidden animate-fade-in group\"\n              style={{ animationDelay: `${index * 0.1}s` }}\n              data-testid={`card-flight-${flight.id}`}\n            >\n              {/* Image Section */}\n              <div className=\"relative\">\n                <img \n                  src={getDestinationImage(flight.destination)} \n                  alt={flight.destination}\n                  className=\"w-full h-48 object-cover transition-butter group-hover:scale-110\"\n                />\n                <button className=\"absolute top-3 right-3 p-2 rounded-full bg-white/80 hover:bg-white transition-butter hover-glow\">\n                  <Heart className=\"w-4 h-4 text-gray-600 transition-elastic hover:scale-110 hover:text-red-500\" />\n                </button>\n              </div>\n              \n              {/* Content Section */}\n              <div className=\"p-4\">\n                {/* Date and Route Info */}\n                <div className=\"flex items-center justify-between text-xs text-gray-500 mb-2\">\n                  <span>ð {flight.departureDate}</span>\n                  <span>ð {flight.returnDate || '16 Jun 2024'}</span>\n                </div>\n                \n                {/* Route */}\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"text-lg font-semibold text-gray-900\">{flight.origin}</div>\n                  <ArrowUpDown className=\"w-4 h-4 text-gray-400\" />\n                  <div className=\"text-lg font-semibold text-gray-900\">{flight.destination}</div>\n                </div>\n                \n                {/* Class and Pricing */}\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"space-y-1\">\n                    <div className=\"text-xs text-gray-500\">Business</div>\n                    <div className=\"text-lg font-bold text-gray-900\">à§³{flight.price}</div>\n                  </div>\n                  <div className=\"space-y-1 text-right\">\n                    <div className=\"text-xs text-gray-500\">Business</div>\n                    <div className=\"text-lg font-bold text-gray-900\">à§³{flight.price}</div>\n                  </div>\n                </div>\n                \n                {/* Seats Left and Book Button */}\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-gray-500\">18 Seats left</span>\n                  <Button \n                    onClick={handleBookNow}\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium\"\n                    data-testid={`button-book-flight-${flight.id}`}\n                  >\n                    Book Now\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n        \n        {/* Navigation Arrows */}\n        <div className=\"flex justify-center space-x-4\">\n          <button className=\"p-2 rounded-full border border-gray-300 hover:bg-gray-50 transition-colors\">\n            <ChevronLeft className=\"w-5 h-5 text-gray-600\" />\n          </button>\n          <button className=\"p-2 rounded-full border border-gray-300 hover:bg-gray-50 transition-colors\">\n            <ChevronRight className=\"w-5 h-5 text-gray-600\" />\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7051},"client/src/components/footer.tsx":{"content":"import { Facebook, Twitter, Instagram, Youtube } from 'lucide-react';\nimport logoImage from '@assets/ChatGPT Image Aug 14, 2025, 10_54_35 PM_1755361280936.png';\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-gradient-to-br from-gray-800 via-gray-900 to-gray-800 text-white py-8 sm:py-12 lg:py-16\">\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 sm:gap-8\">\n          <div>\n            <div className=\"flex items-center text-xl sm:text-2xl font-bold mb-3 sm:mb-4\">\n              <img \n                src={logoImage} \n                alt=\"BD Explorer Logo\" \n                className=\"w-7 sm:w-8 h-7 sm:h-8 mr-2 sm:mr-3\"\n              />\n              BD Explorer\n            </div>\n            <p className=\"text-gray-300 mb-4\">\n              Your trusted partner for discovering Bangladesh's hidden gems and authentic travel experiences.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"text-gray-300 hover:text-accent transition-colors\">\n                <Facebook className=\"w-5 h-5\" />\n              </a>\n              <a href=\"#\" className=\"text-gray-300 hover:text-accent transition-colors\">\n                <Twitter className=\"w-5 h-5\" />\n              </a>\n              <a href=\"#\" className=\"text-gray-300 hover:text-accent transition-colors\">\n                <Instagram className=\"w-5 h-5\" />\n              </a>\n              <a href=\"#\" className=\"text-gray-300 hover:text-accent transition-colors\">\n                <Youtube className=\"w-5 h-5\" />\n              </a>\n            </div>\n          </div>\n          \n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Destinations</h3>\n            <ul className=\"space-y-2 text-gray-300\">\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\">Popular Destinations</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\">Beach Vacations</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\">City Breaks</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\">Adventure Travel</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Services</h3>\n            <ul className=\"space-y-2 text-gray-300\">\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\">Flight Booking</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\">Hotel Reservations</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\">Car Rentals</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\">Travel Insurance</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Support</h3>\n            <ul className=\"space-y-2 text-gray-300\">\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\">Help Center</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\">Contact Us</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\">Privacy Policy</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\">Terms of Service</a></li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-gray-700 mt-8 pt-8 text-center text-gray-300\">\n          <p>&copy; 2024 BD Explorer. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3688},"client/src/components/hero-section.tsx":{"content":"import { useState } from 'react';\nimport { Hotel, Car, MapPin, Search, Star, Users, Plane } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport heroImage from '@assets/1781002652_1755358586408.jpg';\nimport logoImage from '@assets/ChatGPT Image Aug 14, 2025, 10_54_35 PM_1755361280936.png';\n\nexport default function HeroSection() {\n  const [activeTab, setActiveTab] = useState('flights');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    window.location.href = '/destinations';\n  };\n\n  return (\n    <section className=\"relative bg-black text-white py-16 sm:py-24 lg:py-32 min-h-screen flex items-center overflow-hidden\">\n      {/* Background overlay */}\n      <div \n        className=\"absolute inset-0 bg-cover bg-center opacity-70\" \n        style={{\n          backgroundImage: `url(${heroImage})`\n        }}\n      />\n      <div className=\"absolute inset-0 bg-gradient-to-r from-black/60 via-transparent to-black/40\"></div>\n      \n      <div className=\"relative max-w-7xl mx-auto px-3 sm:px-4 lg:px-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-12 items-center\">\n          <div className=\"animate-fade-in text-center lg:text-left\">\n            <h1 className=\"text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold mb-4 sm:mb-6 leading-tight animate-slide-up\">\n              Discover Beautiful <br />\n              <span className=\"text-accent bg-gradient-to-r from-accent to-yellow-400 bg-clip-text text-transparent animate-bounce-subtle\">Bangladesh</span>\n            </h1>\n            <p className=\"text-base sm:text-lg lg:text-xl mb-6 sm:mb-8 opacity-90 animate-fade-in\" style={{animationDelay: '0.2s'}}>\n              Explore Bangladesh's stunning natural beauty, rich culture, and heritage sites with our authentic travel experiences.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4 justify-center lg:justify-start\" style={{animationDelay: '0.4s'}}>\n              <div className=\"flex items-center bg-white/10 backdrop-blur-md rounded-xl px-4 sm:px-6 py-2 sm:py-3 hover-glow transition-butter border border-white/20\">\n                <Star className=\"w-4 sm:w-5 h-4 sm:h-5 text-yellow-400 mr-2 animate-bounce-subtle\" />\n                <span className=\"font-medium text-sm sm:text-base\">4.8/5 Rating</span>\n              </div>\n              <div className=\"flex items-center bg-white/10 backdrop-blur-md rounded-xl px-4 sm:px-6 py-2 sm:py-3 hover-glow transition-butter border border-white/20\">\n                <Users className=\"w-4 sm:w-5 h-4 sm:h-5 text-green-400 mr-2 animate-bounce-subtle\" style={{animationDelay: '1s'}} />\n                <span className=\"font-medium text-sm sm:text-base\">50K+ Happy Travelers</span>\n              </div>\n            </div>\n          </div>\n          \n          {/* Booking Form */}\n          <div className=\"bg-white/20 backdrop-blur-xl rounded-2xl p-4 sm:p-6 lg:p-8 shadow-2xl text-white border border-white/30 glass-form animate-scale-in transition-all duration-300 hover:shadow-3xl\">\n            <div className=\"flex flex-wrap gap-1 sm:gap-2 mb-4 sm:mb-6\">\n              <Button\n                type=\"button\"\n                variant={activeTab === 'flights' ? 'default' : 'outline'}\n                className={`group flex-1 py-2 sm:py-3 px-2 sm:px-4 rounded-xl text-xs sm:text-sm font-medium transition-all duration-300 hover:scale-105 ${\n                  activeTab === 'flights' \n                    ? 'bg-primary text-white hover:bg-primary/90 shadow-lg' \n                    : 'bg-white/20 text-white hover:bg-white/30 border border-white/30 hover:shadow-lg'\n                }`}\n                onClick={() => setActiveTab('flights')}\n                data-testid=\"button-flights-tab\"\n              >\n                <Plane className=\"w-3 sm:w-4 h-3 sm:h-4 mr-1 sm:mr-2 transition-transform group-hover:rotate-12\" />\n                <span className=\"hidden sm:inline\">Flights</span>\n                <span className=\"sm:hidden\">Flight</span>\n              </Button>\n              <Button\n                type=\"button\"\n                variant={activeTab === 'hotels' ? 'default' : 'outline'}\n                className={`group flex-1 py-2 sm:py-3 px-2 sm:px-4 rounded-xl text-xs sm:text-sm font-medium transition-all duration-300 hover:scale-105 ${\n                  activeTab === 'hotels' \n                    ? 'bg-primary text-white hover:bg-primary/90 shadow-lg' \n                    : 'bg-white/20 text-white hover:bg-white/30 border border-white/30 hover:shadow-lg'\n                }`}\n                onClick={() => setActiveTab('hotels')}\n                data-testid=\"button-hotels-tab\"\n              >\n                <Hotel className=\"w-3 sm:w-4 h-3 sm:h-4 mr-1 sm:mr-2 transition-transform group-hover:scale-110\" />\n                <span className=\"hidden sm:inline\">Hotels</span>\n                <span className=\"sm:hidden\">Hotel</span>\n              </Button>\n              <Button\n                type=\"button\"\n                variant={activeTab === 'cars' ? 'default' : 'outline'}\n                className={`group flex-1 py-2 sm:py-3 px-2 sm:px-4 rounded-xl text-xs sm:text-sm font-medium transition-all duration-300 hover:scale-105 ${\n                  activeTab === 'cars' \n                    ? 'bg-primary text-white hover:bg-primary/90 shadow-lg' \n                    : 'bg-white/20 text-white hover:bg-white/30 border border-white/30 hover:shadow-lg'\n                }`}\n                onClick={() => setActiveTab('cars')}\n                data-testid=\"button-cars-tab\"\n              >\n                <Car className=\"w-3 sm:w-4 h-3 sm:h-4 mr-1 sm:mr-2 transition-transform group-hover:translate-x-1\" />\n                <span className=\"hidden sm:inline\">Cars</span>\n                <span className=\"sm:hidden\">Car</span>\n              </Button>\n            </div>\n            \n            <form className=\"space-y-4\" onSubmit={handleSubmit}>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-white mb-2\">From</label>\n                  <div className=\"relative\">\n                    <MapPin className=\"absolute left-3 top-3 w-4 h-4 text-white text-opacity-70\" />\n                    <Input \n                      type=\"text\" \n                      placeholder=\"Dhaka\" \n                      className=\"pl-10 bg-white/20 backdrop-blur-md border border-white/30 text-white placeholder-white placeholder-opacity-70 focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 focus:scale-[1.02] hover:bg-white/25\"\n                      data-testid=\"input-from-location\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-white mb-2\">To</label>\n                  <div className=\"relative\">\n                    <MapPin className=\"absolute left-3 top-3 w-4 h-4 text-white text-opacity-70\" />\n                    <Input \n                      type=\"text\" \n                      placeholder=\"Cox's Bazar\" \n                      className=\"pl-10 bg-white/20 backdrop-blur-md border border-white/30 text-white placeholder-white placeholder-opacity-70 focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 focus:scale-[1.02] hover:bg-white/25\"\n                      data-testid=\"input-to-location\"\n                    />\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-white mb-2\">Departure</label>\n                  <Input \n                    type=\"date\" \n                    className=\"bg-white/20 backdrop-blur-md border border-white/30 text-white focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 focus:scale-[1.02] hover:bg-white/25\"\n                    data-testid=\"input-departure-date\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-white mb-2\">Return</label>\n                  <Input \n                    type=\"date\" \n                    className=\"bg-white/20 backdrop-blur-md border border-white/30 text-white focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 focus:scale-[1.02] hover:bg-white/25\"\n                    data-testid=\"input-return-date\"\n                  />\n                </div>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-white mb-2\">Passengers</label>\n                <Select>\n                  <SelectTrigger \n                    className=\"bg-white/20 backdrop-blur-md border border-white/30 text-white focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 focus:scale-[1.02] hover:bg-white/25\"\n                    data-testid=\"select-passengers\"\n                  >\n                    <SelectValue placeholder=\"1 Adult\" className=\"text-white placeholder:text-white placeholder:opacity-70\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"1-adult\">1 Adult</SelectItem>\n                    <SelectItem value=\"2-adults\">2 Adults</SelectItem>\n                    <SelectItem value=\"2-adults-1-child\">2 Adults, 1 Child</SelectItem>\n                    <SelectItem value=\"2-adults-2-children\">2 Adults, 2 Children</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full bg-accent hover:bg-accent/90 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-300 hover:scale-105 hover:shadow-xl group\"\n                data-testid=\"button-search-flights\"\n              >\n                <Search className=\"w-4 h-4 mr-2 transition-transform group-hover:rotate-12\" />\n                Search {activeTab === 'flights' ? 'Flights' : activeTab === 'hotels' ? 'Hotels' : 'Cars'}\n              </Button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":10497},"client/src/components/navigation.tsx":{"content":"import { Link } from 'wouter';\nimport { LogOut, UserIcon, Calendar, Menu, X } from 'lucide-react';\nimport { useState } from 'react';\nimport { useIsMobile } from '@/hooks/use-mobile';\nimport { Button } from '@/components/ui/button';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from '@/components/ui/dropdown-menu';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { useAuth } from '@/hooks/useAuth';\nimport logoImage from '@assets/ChatGPT Image Aug 14, 2025, 10_54_35 PM_1755361280936.png';\n\nexport default function Navigation() {\n  const { user, isAuthenticated, signOut, isSigningOut } = useAuth();\n  const isMobile = useIsMobile();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  return (\n    <nav className=\"bg-white/95 backdrop-blur-md shadow-lg sticky top-0 z-50 border-b border-gray-100/50\">\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8\">\n        <div className=\"flex justify-between items-center py-3 sm:py-4\">\n          <Link href=\"/\" className=\"flex items-center\">\n            <div className=\"flex items-center\">\n              <img \n                src={logoImage} \n                alt=\"BD Explorer Logo\" \n                className=\"w-8 sm:w-10 h-8 sm:h-10 mr-2 sm:mr-3\"\n                data-testid=\"logo-image\"\n              />\n              <div className=\"text-lg sm:text-xl lg:text-2xl font-bold text-primary\">\n                <span className=\"hidden sm:inline\">BD Explorer</span>\n                <span className=\"sm:hidden\">BD</span>\n              </div>\n            </div>\n          </Link>\n          \n          <div className=\"hidden md:flex space-x-6 lg:space-x-8\">\n            <Link href=\"/\" className=\"relative text-neutral hover:text-primary after:absolute after:bottom-0 after:left-0 after:w-0 hover:after:w-full after:h-0.5 after:bg-primary after:transition-all after:duration-300 text-sm lg:text-base\">Home</Link>\n            <Link href=\"/destinations\" className=\"relative text-neutral hover:text-primary after:absolute after:bottom-0 after:left-0 after:w-0 hover:after:w-full after:h-0.5 after:bg-primary after:transition-all after:duration-300 text-sm lg:text-base\">Destinations</Link>\n            <Link href=\"/hotels\" className=\"relative text-neutral hover:text-primary after:absolute after:bottom-0 after:left-0 after:w-0 hover:after:w-full after:h-0.5 after:bg-primary after:transition-all after:duration-300 text-sm lg:text-base\">Hotels</Link>\n            <Link \n              href=\"/trip-planner\" \n              className=\"relative text-neutral hover:text-primary cursor-pointer after:absolute after:bottom-0 after:left-0 after:w-0 hover:after:w-full after:h-0.5 after:bg-primary after:transition-all after:duration-300 text-sm lg:text-base\"\n            >\n              Flights\n            </Link>\n            <Link href=\"/about\" className=\"relative text-neutral hover:text-primary after:absolute after:bottom-0 after:left-0 after:w-0 hover:after:w-full after:h-0.5 after:bg-primary after:transition-all after:duration-300 text-sm lg:text-base\">About</Link>\n            <Link href=\"/support\" className=\"relative text-neutral hover:text-primary after:absolute after:bottom-0 after:left-0 after:w-0 hover:after:w-full after:h-0.5 after:bg-primary after:transition-all after:duration-300 text-sm lg:text-base\">Support</Link>\n          </div>\n          \n          <div className=\"flex items-center space-x-2 sm:space-x-4\">\n            {isAuthenticated ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"relative h-7 w-7 sm:h-8 sm:w-8 rounded-full\">\n                    <Avatar className=\"h-7 w-7 sm:h-8 sm:w-8\">\n                      <AvatarImage src={user?.profileImageUrl || \"\"} alt={user?.firstName || \"User\"} />\n                      <AvatarFallback className=\"text-xs sm:text-sm\">\n                        {(user?.firstName?.[0] || \"U\").toUpperCase()}{(user?.lastName?.[0] || \"N\").toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                  <div className=\"flex items-center justify-start gap-2 p-2\">\n                    <div className=\"flex flex-col space-y-1 leading-none\">\n                      <p className=\"font-medium text-sm\">{user?.firstName || \"\"} {user?.lastName || \"\"}</p>\n                      <p className=\"w-[200px] truncate text-xs text-muted-foreground\">\n                        {user?.email || \"\"}\n                      </p>\n                    </div>\n                  </div>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/profile\" className=\"cursor-pointer\">\n                      <UserIcon className=\"mr-2 h-4 w-4\" />\n                      Profile\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/my-bookings\" className=\"cursor-pointer\" data-testid=\"nav-my-bookings\">\n                      <Calendar className=\"mr-2 h-4 w-4\" />\n                      My Bookings\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem \n                    className=\"cursor-pointer\"\n                    onClick={() => signOut()}\n                    disabled={isSigningOut}\n                  >\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    {isSigningOut ? \"Signing out...\" : \"Sign out\"}\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <div className=\"hidden sm:flex items-center space-x-2\">\n                <Button variant=\"ghost\" size=\"sm\" asChild className=\"text-xs sm:text-sm px-2 sm:px-3\">\n                  <Link href=\"/sign-in\">Sign In</Link>\n                </Button>\n                <Button size=\"sm\" asChild className=\"text-xs sm:text-sm px-2 sm:px-3\">\n                  <Link href=\"/sign-up\">Sign Up</Link>\n                </Button>\n              </div>\n            )}\n            \n            {/* Mobile menu button */}\n            <button\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              className=\"md:hidden inline-flex items-center justify-center p-2 rounded-md text-neutral hover:text-primary hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary transition-colors duration-200\"\n              data-testid=\"button-mobile-menu\"\n            >\n              <span className=\"sr-only\">Open main menu</span>\n              {mobileMenuOpen ? (\n                <X className=\"block h-5 w-5\" />\n              ) : (\n                <Menu className=\"block h-5 w-5\" />\n              )}\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Mobile menu */}\n      {mobileMenuOpen && (\n        <div className=\"md:hidden border-t border-gray-200 bg-white/95 backdrop-blur-md\">\n          <div className=\"px-3 pt-2 pb-3 space-y-1\">\n            <Link \n              href=\"/\" \n              className=\"block px-3 py-2 text-base font-medium text-neutral hover:text-primary hover:bg-gray-50 rounded-md transition-colors duration-200\"\n              onClick={() => setMobileMenuOpen(false)}\n            >\n              Home\n            </Link>\n            <Link \n              href=\"/destinations\" \n              className=\"block px-3 py-2 text-base font-medium text-neutral hover:text-primary hover:bg-gray-50 rounded-md transition-colors duration-200\"\n              onClick={() => setMobileMenuOpen(false)}\n            >\n              Destinations\n            </Link>\n            <Link \n              href=\"/hotels\" \n              className=\"block px-3 py-2 text-base font-medium text-neutral hover:text-primary hover:bg-gray-50 rounded-md transition-colors duration-200\"\n              onClick={() => setMobileMenuOpen(false)}\n            >\n              Hotels\n            </Link>\n            <Link \n              href=\"/trip-planner\" \n              className=\"block px-3 py-2 text-base font-medium text-neutral hover:text-primary hover:bg-gray-50 rounded-md transition-colors duration-200\"\n              onClick={() => setMobileMenuOpen(false)}\n            >\n              Flights\n            </Link>\n            <Link \n              href=\"/about\" \n              className=\"block px-3 py-2 text-base font-medium text-neutral hover:text-primary hover:bg-gray-50 rounded-md transition-colors duration-200\"\n              onClick={() => setMobileMenuOpen(false)}\n            >\n              About\n            </Link>\n            <Link \n              href=\"/support\" \n              className=\"block px-3 py-2 text-base font-medium text-neutral hover:text-primary hover:bg-gray-50 rounded-md transition-colors duration-200\"\n              onClick={() => setMobileMenuOpen(false)}\n            >\n              Support\n            </Link>\n            \n            {!isAuthenticated && (\n              <div className=\"pt-4 border-t border-gray-200 space-y-2\">\n                <Link href=\"/sign-in\" className=\"block w-full\" onClick={() => setMobileMenuOpen(false)}>\n                  <Button variant=\"ghost\" className=\"w-full justify-start text-base font-medium\">\n                    Sign In\n                  </Button>\n                </Link>\n                <Link href=\"/sign-up\" className=\"block w-full\" onClick={() => setMobileMenuOpen(false)}>\n                  <Button className=\"w-full justify-start text-base font-medium\">\n                    Sign Up\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n}\n","size_bytes":9894},"client/src/components/newsletter.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport buddhaImage from '@assets/Buddha_Dhatu_Jadi_06_1755534311265.jpg';\n\nexport default function Newsletter() {\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // Form submitted successfully - in production, this would be sent to a backend\n  };\n\n  return (\n    <section className=\"py-8 sm:py-12 lg:py-16 section-bg-warm\">\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8\">\n        <div className=\"elegant-card bg-gradient-to-r from-pink-50 to-orange-50 rounded-2xl sm:rounded-3xl overflow-hidden relative hover-lift transition-butter\">\n          <div className=\"grid lg:grid-cols-2 gap-6 lg:gap-8 items-center min-h-[300px] sm:min-h-[400px]\">\n            {/* Left Content */}\n            <div className=\"p-6 sm:p-8 lg:p-12 text-center lg:text-left\">\n              <div className=\"flex items-center justify-center lg:justify-start mb-6\">\n                <div className=\"icon-bg-yellow mr-3\">\n                  <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 8l7.89 3.26a2 2 0 001.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n                  </svg>\n                </div>\n                <div className=\"bg-yellow-400 text-black px-6 py-3 rounded-full text-sm font-semibold\">\n                  Join our newsletter\n                </div>\n              </div>\n              \n              <h2 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-900 mb-4 sm:mb-6 leading-tight\">\n                Subscribe to see secret deals prices drop the moment you sign up!\n              </h2>\n              \n              <form className=\"space-y-3 sm:space-y-4 max-w-md mx-auto lg:mx-0\" onSubmit={handleSubmit}>\n                <div className=\"flex flex-col sm:flex-row gap-3\">\n                  <Input \n                    type=\"email\" \n                    placeholder=\"Your Email\" \n                    className=\"flex-1 px-4 py-3 rounded-full bg-white border-0 focus:ring-2 focus:ring-blue-500 text-gray-700 text-sm sm:text-base\"\n                    required\n                  />\n                  <Button \n                    type=\"submit\" \n                    className=\"bg-black hover:bg-gray-800 text-white px-6 sm:px-8 py-3 rounded-full font-medium transition-colors text-sm sm:text-base whitespace-nowrap\"\n                  >\n                    Subscribe\n                  </Button>\n                </div>\n              </form>\n              \n              <p className=\"text-sm text-gray-600 mt-4\">\n                No ads. No trails. No commitments\n              </p>\n            </div>\n            \n            {/* Right Image */}\n            <div className=\"relative h-full\">\n              <div \n                className=\"absolute inset-0 bg-cover bg-center rounded-r-3xl lg:rounded-r-3xl\"\n                style={{\n                  backgroundImage: `url(${buddhaImage})`\n                }}\n              >\n                <div className=\"absolute inset-0 bg-gradient-to-l from-transparent to-blue-100/20\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3330},"client/src/components/popular-destinations.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { useState, useEffect, useRef } from 'react';\nimport { useLocation } from 'wouter';\nimport type { Destination } from '@shared/schema';\n\n\ninterface PopularDestinationsProps {\n  selectedDestination: Destination | null;\n  setSelectedDestination: React.Dispatch<React.SetStateAction<Destination | null>>;\n}\n\nexport default function PopularDestinations({ selectedDestination, setSelectedDestination }: PopularDestinationsProps) {\n  const [, setLocation] = useLocation();\n  const { data: destinations = [], isLoading, error } = useQuery<Destination[]>({\n    queryKey: ['/api/destinations'],\n  });\n\n  const [currentIndex, setCurrentIndex] = useState(0); // Start with the first destination\n  const [isAutoSliding, setIsAutoSliding] = useState(true);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Auto-sliding functionality\n  useEffect(() => {\n    // Clear any existing interval first\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n\n    if (isAutoSliding && destinations.length > 0) {\n      intervalRef.current = setInterval(() => {\n        setCurrentIndex((prevIndex) => {\n          if (destinations.length === 0) return 0;\n          return (prevIndex + 1) % destinations.length;\n        });\n      }, 3000); // Optimized timing for fluid experience\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    };\n  }, [isAutoSliding, destinations.length]);\n\n  // Cleanup function for component unmount\n  useEffect(() => {\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Update background when current index changes\n  useEffect(() => {\n    if (destinations.length > 0 && currentIndex >= 0 && currentIndex < destinations.length) {\n      setSelectedDestination(destinations[currentIndex]);\n    }\n  }, [currentIndex, destinations, setSelectedDestination]);\n\n  // Manual navigation functions\n  const goToPrevious = () => {\n    setIsAutoSliding(false);\n    setCurrentIndex((prevIndex) => {\n      if (destinations.length === 0) return 0;\n      return prevIndex === 0 ? destinations.length - 1 : prevIndex - 1;\n    });\n    // Clear existing timeout and set new one\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    timeoutRef.current = setTimeout(() => setIsAutoSliding(true), 10000);\n  };\n\n  const goToNext = () => {\n    setIsAutoSliding(false);\n    setCurrentIndex((prevIndex) => {\n      if (destinations.length === 0) return 0;\n      return (prevIndex + 1) % destinations.length;\n    });\n    // Clear existing timeout and set new one\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    timeoutRef.current = setTimeout(() => setIsAutoSliding(true), 6000);\n  };\n\n  const goToSlide = (index: number) => {\n    if (index >= 0 && index < destinations.length && destinations[index]) {\n      setIsAutoSliding(false);\n      setCurrentIndex(index);\n      setSelectedDestination(destinations[index]);\n      // Clear existing timeout and set new one\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n      timeoutRef.current = setTimeout(() => setIsAutoSliding(true), 10000);\n    }\n  };\n\n  // Get visible cards (7 cards with center one highlighted)\n  const getVisibleCards = () => {\n    if (destinations.length === 0) return [];\n    \n    const visibleCards = [];\n    const totalCards = Math.min(7, destinations.length);\n    const startOffset = Math.floor(totalCards / 2);\n    \n    for (let i = 0; i < totalCards; i++) {\n      const index = (currentIndex - startOffset + i + destinations.length) % destinations.length;\n      \n      // Ensure the index is valid and within bounds\n      if (index >= 0 && index < destinations.length && destinations[index]) {\n        visibleCards.push({\n          destination: destinations[index],\n          position: i - startOffset, // -3, -2, -1, 0, 1, 2, 3\n          index: index\n        });\n      }\n    }\n    \n    return visibleCards;\n  };\n\n  if (isLoading) {\n    return (\n      <section id=\"destinations\" className=\"relative py-24 min-h-[800px] bg-gray-50\">\n        <div className=\"absolute inset-0 bg-gradient-to-b from-black/50 to-black/30\"></div>\n        <div className=\"relative max-w-7xl mx-auto px-3 sm:px-4 lg:px-8\">\n          <div className=\"text-center mb-8 sm:mb-10 lg:mb-12\">\n            <h2 className=\"text-2xl sm:text-3xl md:text-4xl font-bold text-white mb-3 sm:mb-4\">Popular Destinations</h2>\n            <p className=\"text-base sm:text-lg lg:text-xl text-white/90\">Explore the world's most breathtaking locations</p>\n          </div>\n          <div className=\"flex justify-center items-center space-x-2 sm:space-x-4 overflow-x-auto px-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"rounded-2xl overflow-hidden shadow-lg animate-pulse flex-shrink-0\">\n                <div className=\"w-32 sm:w-40 md:w-48 h-40 sm:h-48 md:h-64 bg-gray-300\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  if (error) {\n    return (\n      <section id=\"destinations\" className=\"relative py-24 min-h-[800px] bg-gray-50\">\n        <div className=\"absolute inset-0 bg-gradient-to-b from-black/50 to-black/30\"></div>\n        <div className=\"relative max-w-7xl mx-auto px-3 sm:px-4 lg:px-8\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl sm:text-3xl md:text-4xl font-bold text-white mb-3 sm:mb-4\">Popular Destinations</h2>\n            <p className=\"text-base sm:text-lg lg:text-xl text-red-300\">Failed to load destinations. Please try again later.</p>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  // Set background image from the center card\n  const backgroundImage = selectedDestination?.imageUrl || destinations[0]?.imageUrl || 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080';\n  const visibleCards = getVisibleCards();\n\n  return (\n    <section \n      id=\"destinations\" \n      className=\"relative py-24 min-h-[800px] bg-gray-900 flex flex-col will-change-transform transition-all duration-700 ease-out\"\n      style={{\n        backgroundImage: `url(${backgroundImage})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat',\n        transform: 'translate3d(0, 0, 0)', // Force GPU acceleration\n        backfaceVisibility: 'hidden', // Prevent flickering\n        perspective: '1000px', // Enable 3D transforms\n      }}\n    >\n      {/* Dark overlay for better text readability */}\n      <div className=\"absolute inset-0 bg-gradient-to-b from-black/60 to-black/40\"></div>\n      \n      {/* Currently viewing text in top left */}\n      {visibleCards.find(card => card.position === 0) && (\n        <div className=\"absolute top-6 left-6 z-20\">\n          <p className=\"text-white text-lg font-semibold bg-black/50 px-3 py-1 rounded-lg\">\n            Currently viewing: {visibleCards.find(card => card.position === 0)?.destination.name}\n          </p>\n        </div>\n      )}\n      \n      {/* Spacer to push cards to bottom */}\n      <div className=\"flex-1\"></div>\n      {/* Carousel section */}\n      <div className=\"relative z-10 mt-[-134px] mb-[-134px] pt-[34px] pb-[34px] pl-[0px] pr-[0px] ml-[-13px] mr-[-13px]\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-4\">\n\n\n          {/* Cards container */}\n          <div className=\"flex justify-center items-end space-x-1 sm:space-x-2 px-4 sm:px-8 lg:px-16 perspective-1000 overflow-x-auto\">\n            {visibleCards.map(({ destination, position, index }) => {\n              const isCenterCard = position === 0;\n              const cardScale = isCenterCard ? 'scale-110' : Math.abs(position) === 1 ? 'scale-95' : Math.abs(position) === 2 ? 'scale-85' : 'scale-75';\n              const cardOpacity = isCenterCard ? 'opacity-100' : Math.abs(position) === 1 ? 'opacity-85' : Math.abs(position) === 2 ? 'opacity-70' : 'opacity-50';\n              const cardHeight = isCenterCard \n                ? 'h-48' \n                : Math.abs(position) === 1 \n                  ? 'h-40' \n                  : Math.abs(position) === 2 \n                    ? 'h-32' \n                    : 'h-24';\n              const cardWidth = isCenterCard \n                ? 'w-36' \n                : Math.abs(position) === 1 \n                  ? 'w-28' \n                  : Math.abs(position) === 2 \n                    ? 'w-24' \n                    : 'w-20';\n              const cardBlur = Math.abs(position) > 1 ? 'blur-[1px]' : '';\n              const cardBrightness = isCenterCard ? 'brightness-100' : Math.abs(position) === 1 ? 'brightness-95' : 'brightness-90';\n              \n              return (\n                <div\n                  key={destination.id}\n                  className={`relative rounded-2xl overflow-hidden shadow-2xl carousel-card-fast cursor-pointer hover:scale-105 transition-transform ${cardScale} ${cardOpacity} ${cardHeight} ${cardWidth} ${cardBlur} ${cardBrightness} ${\n                    isCenterCard ? 'ring-4 ring-white/50 z-10' : ''\n                  }`}\n                  style={{\n                    transform: 'translate3d(0, 0, 0)',\n                    backfaceVisibility: 'hidden',\n                    WebkitBackfaceVisibility: 'hidden',\n                    transformStyle: 'preserve-3d',\n                    WebkitTransformStyle: 'preserve-3d',\n                  }}\n                  onClick={() => goToSlide(index)}\n                  data-testid={`card-destination-${destination.id}`}\n                >\n                  <img \n                    src={destination.imageUrl} \n                    alt={destination.name} \n                    className=\"w-full h-full object-cover smooth-gpu\"\n                    data-testid={`img-destination-${destination.id}`}\n                    onError={(e) => {\n                      const target = e.target as HTMLImageElement;\n                      if (!target.src.includes('placeholder')) {\n                        target.src = 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600';\n                      }\n                    }}\n                  />\n                  \n                  {/* Overlay with destination name */}\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 via-transparent to-transparent flex items-end carousel-card-fast\">\n                    <div className=\"p-4 w-full\">\n                      <h3 className=\"text-white font-semibold text-lg text-center\" data-testid={`text-destination-name-${destination.id}`}>\n                        {destination.name}\n                      </h3>\n                      {isCenterCard && (\n                        <p className=\"text-white/80 text-sm text-center mt-1\">{destination.district}</p>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {/* Center card indicator */}\n                  {isCenterCard && (\n                    <div className=\"absolute top-4 right-4 w-4 h-4 bg-white rounded-full shadow-lg carousel-card-fast\"></div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n\n          \n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":11605},"client/src/components/recommended-hotels.tsx":{"content":"import { Star } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useQuery } from '@tanstack/react-query';\nimport type { Hotel } from '@shared/schema';\n\nexport default function RecommendedHotels() {\n  const { data: hotels = [], isLoading, error } = useQuery<Hotel[]>({\n    queryKey: ['/api/hotels'],\n  });\n\n  const handleBooking = (hotelId: string) => {\n    window.location.href = `/hotel-booking/${hotelId}`;\n  };\n\n  if (isLoading) {\n    return (\n      <section id=\"hotels\" className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-800 mb-4\">Recommended Hotels</h2>\n            <p className=\"text-xl text-gray-600\">Stay at the world's finest accommodations</p>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"bg-white rounded-2xl overflow-hidden shadow-lg animate-pulse\">\n                <div className=\"w-full h-56 bg-gray-200\"></div>\n                <div className=\"p-6\">\n                  <div className=\"h-6 bg-gray-200 rounded mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"h-8 bg-gray-200 rounded w-24\"></div>\n                    <div className=\"h-10 bg-gray-200 rounded w-20\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  if (error) {\n    return (\n      <section id=\"hotels\" className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-800 mb-4\">Recommended Hotels</h2>\n            <p className=\"text-xl text-red-600\">Failed to load hotels. Please try again later.</p>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"hotels\" className=\"py-8 sm:py-12 lg:py-16 section-bg-soft\">\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8\">\n        <div className=\"text-center mb-8 sm:mb-10 lg:mb-12\">\n          <div className=\"flex justify-center mb-3 sm:mb-4\">\n            <div className=\"icon-bg-blue\">\n              <svg className=\"w-5 sm:w-6 h-5 sm:h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\" />\n              </svg>\n            </div>\n          </div>\n          <h2 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-800 mb-3 sm:mb-4\">Recommended Hotels</h2>\n          <p className=\"text-base sm:text-lg lg:text-xl text-gray-600\">Stay at the world's finest accommodations</p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 md:gap-6\">\n          {hotels.slice(0, 6).map((hotel, index) => (\n            <div \n              key={hotel.id}\n              className=\"bg-white rounded-lg md:rounded-xl overflow-hidden shadow-sm md:shadow-lg transition-shadow duration-300 hover:shadow-md\"\n              style={{ animationDelay: `${index * 0.1}s` }}\n              data-testid={`card-hotel-${hotel.id}`}\n            >\n              <div className=\"relative\">\n                <img \n                  src={hotel.imageUrl} \n                  alt={hotel.name} \n                  className=\"w-full h-40 md:h-48 object-cover\"\n                  data-testid={`img-hotel-${hotel.id}`}\n                />\n                <div className=\"absolute top-2 right-2 bg-white rounded-full px-2 py-1 shadow-sm\">\n                  <div className=\"flex items-center\">\n                    <Star className=\"w-3 h-3 text-yellow-500 mr-1\" />\n                    <span className=\"text-xs font-medium text-gray-800\" data-testid={`text-hotel-rating-${hotel.id}`}>{hotel.rating}</span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"p-3 md:p-4\">\n                <h3 className=\"text-sm md:text-lg font-semibold mb-1 text-gray-900 line-clamp-1\" data-testid={`text-hotel-name-${hotel.id}`}>{hotel.name}</h3>\n                <p className=\"text-xs md:text-sm text-gray-600 mb-3 line-clamp-1\" data-testid={`text-hotel-location-${hotel.id}`}>{hotel.location}</p>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"text-lg md:text-xl font-bold text-primary\" data-testid={`text-hotel-price-${hotel.id}`}>\n                      à§³{hotel.pricePerNight}\n                    </div>\n                    <div className=\"text-xs text-gray-500\">per night</div>\n                  </div>\n                  <Button \n                    className=\"bg-primary text-white px-3 py-1.5 md:px-4 md:py-2 rounded-md text-xs md:text-sm font-medium transition-colors hover:bg-primary/90\"\n                    onClick={() => handleBooking(hotel.id)}\n                    data-testid={`button-book-hotel-${hotel.id}`}\n                  >\n                    Book Now\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n        \n        {/* View All Hotels Button */}\n        {hotels.length > 6 && (\n          <div className=\"text-center mt-12\">\n            <Button \n              className=\"bg-primary hover:bg-primary/90 text-white px-8 py-3 rounded-lg text-lg font-semibold hover-lift\"\n              onClick={() => window.location.href = '/hotels'}\n            >\n              View All Hotels\n            </Button>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":5951},"client/src/components/testimonials.tsx":{"content":"import { Star } from 'lucide-react';\nimport { testimonials } from '../data/travel-data';\n\nexport default function Testimonials() {\n  return (\n    <section className=\"py-8 sm:py-12 lg:py-16 section-bg-cool\">\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8\">\n        <div className=\"text-center mb-8 sm:mb-10 lg:mb-12\">\n          <div className=\"flex justify-center mb-3 sm:mb-4\">\n            <div className=\"icon-bg-green\">\n              <svg className=\"w-5 sm:w-6 h-5 sm:h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\" />\n              </svg>\n            </div>\n          </div>\n          <h2 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-800 mb-3 sm:mb-4\">What Our Travelers Say</h2>\n          <p className=\"text-base sm:text-lg lg:text-xl text-gray-600\">Real experiences from real adventurers</p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 lg:gap-8\">\n          {testimonials.map((testimonial) => (\n            <div key={testimonial.id} className=\"elegant-card p-4 sm:p-6 lg:p-8 hover-lift transition-butter animate-fade-in\" data-testid={`card-testimonial-${testimonial.id}`}>\n              <div className=\"flex items-center mb-4\">\n                <div className=\"flex text-yellow-400\">\n                  {[...Array(testimonial.rating)].map((_, i) => (\n                    <Star key={i} className=\"w-4 h-4 fill-current\" />\n                  ))}\n                </div>\n              </div>\n              <p className=\"text-gray-600 mb-4 sm:mb-6 text-sm sm:text-base\" data-testid={`text-testimonial-comment-${testimonial.id}`}>\"{testimonial.comment}\"</p>\n              <div className=\"flex items-center\">\n                <img \n                  src={testimonial.avatar} \n                  alt={testimonial.name} \n                  className=\"w-10 sm:w-12 h-10 sm:h-12 rounded-full object-cover mr-3 sm:mr-4\"\n                  data-testid={`img-testimonial-avatar-${testimonial.id}`}\n                />\n                <div>\n                  <div className=\"font-semibold text-sm sm:text-base\" data-testid={`text-testimonial-name-${testimonial.id}`}>{testimonial.name}</div>\n                  <div className=\"text-xs sm:text-sm text-gray-500\" data-testid={`text-testimonial-location-${testimonial.id}`}>{testimonial.location}</div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2713},"client/src/components/travel-packages.tsx":{"content":"import { Star, Plane, Hotel, Utensils, MapPin, Train, Camera, Mountain, TreePine, Tent } from 'lucide-react';\nimport logoImage from '@assets/ChatGPT Image Aug 14, 2025, 10_54_35 PM_1755361280936.png';\nimport { Button } from '@/components/ui/button';\nimport { useQuery } from '@tanstack/react-query';\nimport type { TravelPackage } from '@shared/schema';\n\nexport default function TravelPackages() {\n  const { data: travelPackages = [], isLoading, error } = useQuery<TravelPackage[]>({\n    queryKey: ['/api/travel-packages'],\n  });\n\n  const handleBooking = () => {\n    window.location.href = '/trip-planner';\n  };\n\n  const getIncludeIcon = (include: string) => {\n    if (include.includes('flight')) return () => <img src={logoImage} alt=\"Flight\" className=\"w-4 h-4\" />;\n    if (include.includes('resort') || include.includes('hotel')) return Hotel;\n    if (include.includes('meal') || include.includes('drink')) return Utensils;\n    if (include.includes('countries') || include.includes('cities')) return MapPin;\n    if (include.includes('rail')) return Train;\n    if (include.includes('tour')) return Camera;\n    if (include.includes('mountain') || include.includes('Himalayan')) return Mountain;\n    if (include.includes('guide')) return TreePine;\n    if (include.includes('lodge') || include.includes('camping')) return Tent;\n    return MapPin; // Default icon\n  };\n\n  if (isLoading) {\n    return (\n      <section id=\"packages\" className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-800 mb-4\">Featured Travel Packages</h2>\n            <p className=\"text-xl text-gray-600\">Complete vacation packages designed for every traveler</p>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"bg-white rounded-2xl overflow-hidden shadow-lg animate-pulse\">\n                <div className=\"w-full h-56 bg-gray-200\"></div>\n                <div className=\"p-6\">\n                  <div className=\"h-6 bg-gray-200 rounded mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"space-y-2 mb-4\">\n                    <div className=\"h-4 bg-gray-200 rounded\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded\"></div>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"h-8 bg-gray-200 rounded w-24\"></div>\n                    <div className=\"h-10 bg-gray-200 rounded w-20\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  if (error) {\n    return (\n      <section id=\"packages\" className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-800 mb-4\">Featured Travel Packages</h2>\n            <p className=\"text-xl text-red-600\">Failed to load travel packages. Please try again later.</p>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"packages\" className=\"py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-gray-800 mb-4\">Featured Travel Packages</h2>\n          <p className=\"text-xl text-gray-600\">Complete vacation packages designed for every traveler</p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {travelPackages.map((pkg) => (\n            <div \n              key={pkg.id}\n              className=\"bg-white rounded-2xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300\"\n              data-testid={`card-package-${pkg.id}`}\n            >\n              <img \n                src={pkg.imageUrl} \n                alt={pkg.name} \n                className=\"w-full h-56 object-cover\"\n                data-testid={`img-package-${pkg.id}`}\n              />\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm bg-accent text-white px-3 py-1 rounded-full\" data-testid={`text-package-duration-${pkg.id}`}>{pkg.duration}</span>\n                  <div className=\"flex items-center\">\n                    <Star className=\"w-4 h-4 text-yellow-400 mr-1\" />\n                    <span className=\"text-sm font-medium\" data-testid={`text-package-rating-${pkg.id}`}>{pkg.rating}</span>\n                  </div>\n                </div>\n                <h3 className=\"text-xl font-semibold mb-2\" data-testid={`text-package-name-${pkg.id}`}>{pkg.name}</h3>\n                <p className=\"text-gray-600 mb-4\" data-testid={`text-package-description-${pkg.id}`}>{pkg.description}</p>\n                \n                <div className=\"space-y-2 mb-4\">\n                  {pkg.includes?.map((include, index) => {\n                    const IconComponent = getIncludeIcon(include);\n                    return (\n                      <div key={index} className=\"flex items-center text-sm text-gray-600\" data-testid={`text-package-include-${pkg.id}-${index}`}>\n                        <IconComponent className=\"w-4 h-4 mr-2\" />\n                        <span>{include}</span>\n                      </div>\n                    );\n                  }) || []}\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"text-2xl font-bold text-primary\" data-testid={`text-package-price-${pkg.id}`}>\n                    à§³{pkg.price}\n                    <span className=\"text-sm text-gray-600 font-normal\">/person</span>\n                  </div>\n                  <Button \n                    className=\"bg-accent hover:bg-accent/90 text-white px-4 py-2 rounded-lg transition-colors\"\n                    onClick={handleBooking}\n                    data-testid={`button-book-package-${pkg.id}`}\n                  >\n                    Book Now\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6510},"client/src/components/why-choose-us.tsx":{"content":"import { Shield, Users, FileText, Award } from 'lucide-react';\n\nexport default function WhyChooseUs() {\n  const features = [\n    {\n      title: 'Security Assurance',\n      description: 'Strong authentication system through multiple levels',\n      learnMore: 'Learn More >',\n      iconBg: 'bg-orange-100',\n      iconColor: 'text-orange-600'\n    },\n    {\n      title: 'Customer Support',\n      description: 'Professional customer service 24 hours every day',\n      learnMore: 'Learn More >',\n      iconBg: 'bg-red-100',\n      iconColor: 'text-red-600'\n    },\n    {\n      title: 'Transparent Policies',\n      description: 'Transparent service policies with very secure transaction and excellent',\n      learnMore: 'Learn More >',\n      iconBg: 'bg-yellow-100',\n      iconColor: 'text-yellow-600'\n    },\n    {\n      title: 'Reputable Affiliations',\n      description: 'Partnerships through reputed local suppliers throughout the country',\n      learnMore: 'Learn More >',\n      iconBg: 'bg-blue-100',\n      iconColor: 'text-blue-600'\n    }\n  ];\n\n  return (\n    <section className=\"py-8 sm:py-12 lg:py-16\" style={{ backgroundColor: '#fdf2f8' }}>\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8\">\n        <div className=\"grid lg:grid-cols-2 gap-8 lg:gap-12 items-center\">\n          {/* Left Side - Illustrations */}\n          <div className=\"relative h-96\">\n            {/* Main family/customer circle image */}\n            <div className=\"absolute top-4 left-8\">\n              <div className=\"w-48 h-48 rounded-full overflow-hidden shadow-lg\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1511895426328-dc8714191300?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\" \n                  alt=\"Happy family travelers\"\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n              {/* Customer Service bubble */}\n              <div className=\"absolute -top-2 -right-4 bg-white rounded-2xl px-4 py-2 shadow-lg\">\n                <div className=\"text-xs text-orange-500 font-medium\">Customer Service</div>\n                <div className=\"text-lg font-bold text-gray-900\">+01 235 368</div>\n              </div>\n            </div>\n\n            {/* Customer support circular image */}\n            <div className=\"absolute top-16 right-4\">\n              <div className=\"w-24 h-24 rounded-full overflow-hidden shadow-md bg-teal-100 p-2\">\n                <div className=\"w-full h-full rounded-full overflow-hidden\">\n                  <img \n                    src=\"https://images.unsplash.com/photo-1556157382-97eda2d62296?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=200\" \n                    alt=\"Customer support\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Flight Tickets bubble */}\n            <div className=\"absolute bottom-32 left-4 bg-white rounded-2xl px-4 py-2 shadow-md\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 rounded-full overflow-hidden\">\n                  <img \n                    src=\"https://images.unsplash.com/photo-1436491865332-7a61a109cc05?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\" \n                    alt=\"Flight\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n                <span className=\"text-sm font-medium text-gray-900\">Flight Tickets</span>\n              </div>\n            </div>\n\n            {/* Tour Guide bubble */}\n            <div className=\"absolute bottom-24 right-8 bg-white rounded-2xl px-4 py-2 shadow-md\">\n              <span className=\"text-sm font-medium text-gray-900\">Tour Guide</span>\n            </div>\n\n            {/* Luggage with plant illustration */}\n            <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2\">\n              <div className=\"relative\">\n                {/* Luggage base */}\n                <div className=\"w-28 h-20 bg-gradient-to-br from-orange-400 to-orange-600 rounded-lg shadow-lg relative\">\n                  {/* Luggage handle */}\n                  <div className=\"absolute -top-1 left-1/2 transform -translate-x-1/2 w-8 h-2 bg-gray-600 rounded-full\"></div>\n                  {/* Luggage corners */}\n                  <div className=\"absolute inset-1 border-2 border-orange-700 rounded-md\"></div>\n                </div>\n                \n                {/* Hat on luggage */}\n                <div className=\"absolute -top-3 right-2\">\n                  <div className=\"w-8 h-6 bg-gradient-to-br from-amber-200 to-amber-400 rounded-full shadow-sm\"></div>\n                  <div className=\"absolute top-1 left-1/2 transform -translate-x-1/2 w-6 h-4 bg-amber-300 rounded-full\"></div>\n                </div>\n                \n                {/* Plant decoration */}\n                <div className=\"absolute -top-4 -left-4\">\n                  <div className=\"w-12 h-16 relative\">\n                    {/* Plant pot/leaves */}\n                    <div className=\"absolute bottom-0 w-3 h-8 bg-green-500 rounded-full transform rotate-12\"></div>\n                    <div className=\"absolute bottom-0 left-2 w-3 h-10 bg-green-400 rounded-full transform -rotate-12\"></div>\n                    <div className=\"absolute bottom-0 left-4 w-3 h-6 bg-green-600 rounded-full transform rotate-45\"></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Right Side - Content */}\n          <div>\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              Why choose us\n            </h2>\n            <p className=\"text-gray-600 mb-8\">\n              Because more than 268 other customers trust us\n            </p>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {features.map((feature, index) => {\n                const icons = [Shield, Users, FileText, Award];\n                const IconComponent = icons[index];\n                \n                return (\n                  <div key={index} className=\"space-y-3\">\n                    <div className={`w-12 h-12 ${feature.iconBg} rounded-lg flex items-center justify-center`}>\n                      <IconComponent className={`w-6 h-6 ${feature.iconColor}`} />\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-gray-900\">{feature.title}</h3>\n                    <p className=\"text-sm text-gray-600 leading-relaxed\">{feature.description}</p>\n                    <a href=\"#\" className=\"text-sm text-blue-600 hover:text-blue-800 font-medium\">\n                      {feature.learnMore}\n                    </a>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6888},"client/src/data/travel-data.ts":{"content":"export const destinations = [\n  {\n    id: '1',\n    name: \"Cox's Bazar\",\n    country: 'Bangladesh',\n    district: \"Cox's Bazar\",\n    description: \"World's longest natural sandy sea beach\",\n    imageUrl: '/assets/coxs-bazar-main.jpg?v=2',\n    rating: '4.8',\n    priceFrom: 3500,\n  },\n  {\n    id: '2',\n    name: 'Sundarbans',\n    country: 'Bangladesh',\n    district: 'Khulna',\n    description: 'Largest mangrove forest and Royal Bengal Tiger habitat',\n    imageUrl: 'https://images.unsplash.com/photo-1544551763-46a013bb70d5?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n    rating: '4.9',\n    priceFrom: 4500,\n  },\n  {\n    id: '3',\n    name: 'Sylhet Tea Gardens',\n    country: 'Bangladesh',\n    district: 'Sylhet',\n    description: 'Rolling green hills covered with tea plantations',\n    imageUrl: 'https://images.unsplash.com/photo-1551632811-561732d1e306?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n    rating: '4.7',\n    priceFrom: 2800,\n  },\n  {\n    id: '4',\n    name: 'Saint Martin Island',\n    country: 'Bangladesh',\n    district: \"Cox's Bazar\",\n    description: 'Small coral island with pristine beaches',\n    imageUrl: 'https://images.unsplash.com/photo-1559827260-dc66d52bef19?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n    rating: '4.6',\n    priceFrom: 5200,\n  },\n  {\n    id: '5',\n    name: 'Bandarban Hills',\n    country: 'Bangladesh',\n    district: 'Bandarban',\n    description: 'Mountainous region with tribal culture and waterfalls',\n    imageUrl: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n    rating: '4.8',\n    priceFrom: 3200,\n  },\n  {\n    id: '6',\n    name: 'Paharpur Buddhist Vihara',\n    country: 'Bangladesh',\n    district: 'Naogaon',\n    description: 'UNESCO World Heritage archaeological site',\n    imageUrl: 'https://images.unsplash.com/photo-1587595431973-160d0d94add1?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n    rating: '4.5',\n    priceFrom: 2200,\n  },\n];\n\nexport const hotels = [\n  {\n    id: '1',\n    name: 'Sea Palace Hotel',\n    location: \"Cox's Bazar â¢ Sea View â¢ Premium Resort\",\n    description: 'Luxury beachfront hotel overlooking the Bay of Bengal',\n    imageUrl: 'https://images.unsplash.com/photo-1571896349842-33c89424de2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n    rating: '4.7',\n    pricePerNight: 8500,\n  },\n  {\n    id: '2',\n    name: 'Pan Pacific Sonargaon',\n    location: 'Dhaka â¢ Business District â¢ 5-Star',\n    description: 'Premier luxury hotel in the heart of Dhaka',\n    imageUrl: 'https://images.unsplash.com/photo-1566073771259-6a8506099945?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n    rating: '4.8',\n    pricePerNight: 12500,\n  },\n  {\n    id: '3',\n    name: 'Grand Sylhet Hotel',\n    location: 'Sylhet â¢ Tea Garden View â¢ Heritage',\n    description: 'Colonial-style hotel surrounded by tea gardens',\n    imageUrl: 'https://images.unsplash.com/photo-1520250497591-112f2f40a3f4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n    rating: '4.5',\n    pricePerNight: 6800,\n  },\n  {\n    id: '4',\n    name: 'Chittagong Hill Resort',\n    location: 'Bandarban â¢ Hill Station â¢ Eco-Resort',\n    description: 'Mountain resort with panoramic valley views',\n    imageUrl: 'https://images.unsplash.com/photo-1520250497591-112f2f40a3f4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n    rating: '4.6',\n    pricePerNight: 7200,\n  },\n];\n\nexport const flights = [\n  {\n    id: '1',\n    origin: 'Dhaka',\n    destination: \"Cox's Bazar\",\n    price: 4500,\n    duration: 'Round trip â¢ Direct',\n    dealType: 'Save 20%',\n    departureDate: 'Dec 15 - Dec 22',\n  },\n  {\n    id: '2',\n    origin: 'Dhaka',\n    destination: 'Sylhet',\n    price: 3800,\n    duration: 'Round trip â¢ Direct',\n    dealType: 'Hot Deal',\n    departureDate: 'Jan 10 - Jan 20',\n  },\n  {\n    id: '3',\n    origin: 'Chittagong',\n    destination: 'Dhaka',\n    price: 3200,\n    duration: 'Round trip â¢ Direct',\n    dealType: 'Limited',\n    departureDate: 'Feb 5 - Feb 15',\n  },\n  {\n    id: '4',\n    origin: 'Dhaka',\n    destination: 'Jessore',\n    price: 2800,\n    duration: 'Round trip â¢ Direct',\n    dealType: 'Best Price',\n    departureDate: 'Mar 1 - Mar 10',\n  },\n];\n\nexport const travelPackages = [\n  {\n    id: '1',\n    name: 'Cox\\'s Bazar Beach Getaway',\n    description: 'Relax at the world\\'s longest natural beach with sunset views',\n    imageUrl: 'https://images.unsplash.com/photo-1559827260-dc66d52bef19?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n    duration: '5 Days',\n    rating: '4.8',\n    price: 15500,\n    includes: ['Round-trip flights included', 'Sea-view hotel accommodation', 'Beach activities & water sports'],\n  },\n  {\n    id: '2',\n    name: 'Sundarbans Wildlife Safari',\n    description: 'Explore the mangrove forests and spot Royal Bengal Tigers',\n    imageUrl: 'https://images.unsplash.com/photo-1544551763-46a013bb70d5?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n    duration: '4 Days',\n    rating: '4.9',\n    price: 18500,\n    includes: ['Professional wildlife guide', 'Boat safari through mangroves', 'Eco-lodge accommodation'],\n  },\n  {\n    id: '3',\n    name: 'Sylhet Tea Garden Experience',\n    description: 'Discover the rolling tea hills and visit local tea factories',\n    imageUrl: 'https://images.unsplash.com/photo-1551632811-561732d1e306?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n    duration: '3 Days',\n    rating: '4.7',\n    price: 12800,\n    includes: ['Tea garden tours', 'Local cultural experiences', 'Heritage hotel stay'],\n  },\n  {\n    id: '4',\n    name: 'Chittagong Hill Tracts Adventure',\n    description: 'Experience tribal culture and pristine hill station beauty',\n    imageUrl: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n    duration: '6 Days',\n    rating: '4.6',\n    price: 16200,\n    includes: ['Tribal village visits', 'Waterfall trekking', 'Mountain resort accommodation'],\n  },\n];\n\nexport const testimonials = [\n  {\n    id: '1',\n    name: 'Rashid & Fatima Ahmed',\n    location: 'Cox\\'s Bazar Beach Trip',\n    rating: 5,\n    comment: 'Our Cox\\'s Bazar trip was amazing! The hotel was right on the beach and watching the sunset was unforgettable. TravelHub made everything so easy to book.',\n    avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150',\n  },\n  {\n    id: '2',\n    name: 'Nazneen Khan',\n    location: 'Sundarbans Safari Explorer',\n    rating: 5,\n    comment: 'The Sundarbans wildlife safari was incredible! We spotted Royal Bengal Tigers and the boat ride through the mangroves was breathtaking. Excellent service!',\n    avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150',\n  },\n  {\n    id: '3',\n    name: 'Karim Rahman',\n    location: 'Sylhet Tea Gardens',\n    rating: 5,\n    comment: 'The tea garden tour in Sylhet was peaceful and beautiful. Learning about tea processing and staying in the heritage hotel was a wonderful experience!',\n    avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150',\n  },\n];\n","size_bytes":7195},"client/src/hooks/use-mobile.tsx":{"content":"import { useState, useEffect } from 'react';\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = useState(false);\n\n  useEffect(() => {\n    const checkIfMobile = () => {\n      setIsMobile(window.innerWidth < 768);\n    };\n\n    checkIfMobile();\n    window.addEventListener('resize', checkIfMobile);\n\n    return () => window.removeEventListener('resize', checkIfMobile);\n  }, []);\n\n  return isMobile;\n}","size_bytes":413},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 5000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3892},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    let errorMessage = res.statusText;\n    try {\n      const text = await res.text();\n      errorMessage = text || res.statusText;\n    } catch (error) {\n      // If we can't read the response text, use statusText\n      console.warn('Failed to read error response:', error);\n    }\n    throw new Error(`${res.status}: ${errorMessage}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    try {\n      return await res.json();\n    } catch (error) {\n      console.error('Failed to parse JSON response:', error);\n      throw new Error('Invalid JSON response from server');\n    }\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1796},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import Navigation from '../components/navigation';\nimport Footer from '../components/footer';\nimport { MapPin, Users, Award, Heart, Shield, Compass, Globe, Camera, Star, Plane, Mountain, Waves, TreePine, Sun, Moon, Coffee, Map, Anchor, Binoculars, Fish, Bird, Calendar } from 'lucide-react';\n\nexport default function About() {\n  const stats = [\n    { icon: Users, number: \"50K+\", label: \"Happy Travelers\" },\n    { icon: MapPin, number: \"100+\", label: \"Destinations Covered\" },\n    { icon: Award, number: \"15+\", label: \"Years Experience\" },\n    { icon: Heart, number: \"99%\", label: \"Customer Satisfaction\" },\n  ];\n\n  const values = [\n    {\n      icon: Shield,\n      title: \"Trust & Safety\",\n      description: \"We prioritize your safety with verified accommodations and experienced local guides.\"\n    },\n    {\n      icon: Compass,\n      title: \"Authentic Experiences\",\n      description: \"Discover the real Bangladesh through carefully curated local experiences and hidden gems.\"\n    },\n    {\n      icon: Heart,\n      title: \"Passionate Service\",\n      description: \"Our team of travel enthusiasts is dedicated to making your Bangladesh journey unforgettable.\"\n    },\n  ];\n\n  const team = [\n    {\n      name: \"Rashid Ahmed\",\n      role: \"Founder & CEO\",\n      bio: \"Travel enthusiast with 15+ years exploring Bangladesh's hidden treasures.\",\n      image: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n    },\n    {\n      name: \"Fatima Rahman\",\n      role: \"Head of Operations\",\n      bio: \"Expert in sustainable tourism and local community partnerships.\",\n      image: \"https://images.unsplash.com/photo-1494790108755-2616b612b786?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n    },\n    {\n      name: \"Karim Hassan\",\n      role: \"Lead Tour Guide\",\n      bio: \"Born and raised in Bangladesh, passionate about sharing local culture and stories.\",\n      image: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen section-bg-cool\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"relative py-24 bg-white\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"inline-flex items-center space-x-3 bg-primary/10 px-6 py-3 rounded-full mb-8\">\n              <MapPin className=\"w-5 h-5 text-primary\" />\n              <span className=\"text-primary font-medium\">Discover Bangladesh</span>\n            </div>\n            \n            <h1 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-6\">\n              About <span className=\"text-accent bg-gradient-to-r from-accent to-yellow-400 bg-clip-text text-transparent\">BD Explorer</span>\n            </h1>\n            \n            <p className=\"text-xl md:text-2xl text-gray-600 mb-12 max-w-3xl mx-auto leading-relaxed\">\n              Your trusted partner in discovering the beauty, culture, and heritage of Bangladesh through authentic travel experiences.\n            </p>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mt-16\">\n              <div className=\"elegant-card p-8 text-center hover-lift transition-butter\">\n                <div className=\"w-16 h-16 bg-blue-100 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <Globe className=\"w-8 h-8 text-blue-600\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">Authentic Experiences</h3>\n                <p className=\"text-gray-600\">Discover the real Bangladesh through local insights and hidden gems</p>\n              </div>\n              \n              <div className=\"elegant-card p-8 text-center hover-lift transition-butter\">\n                <div className=\"w-16 h-16 bg-green-100 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <Shield className=\"w-8 h-8 text-green-600\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">Safe & Reliable</h3>\n                <p className=\"text-gray-600\">Travel with confidence knowing you're in experienced hands</p>\n              </div>\n              \n              <div className=\"elegant-card p-8 text-center hover-lift transition-butter\">\n                <div className=\"w-16 h-16 bg-purple-100 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <Heart className=\"w-8 h-8 text-purple-600\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">Passionate Service</h3>\n                <p className=\"text-gray-600\">Dedicated team committed to making your journey unforgettable</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Decorative Divider */}\n      <div className=\"flex justify-center py-8\">\n        <div className=\"flex items-center space-x-4\">\n          <Compass className=\"w-6 h-6 text-primary\" />\n          <div className=\"w-16 h-0.5 bg-gradient-to-r from-primary to-secondary\"></div>\n          <Star className=\"w-6 h-6 text-secondary\" />\n          <div className=\"w-16 h-0.5 bg-gradient-to-r from-secondary to-primary\"></div>\n          <Compass className=\"w-6 h-6 text-primary\" />\n        </div>\n      </div>\n\n      {/* Our Story */}\n      <section className=\"py-16 relative\">\n        {/* Background decorative elements */}\n        <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n          <Map className=\"absolute top-10 right-10 w-32 h-32 text-gray-100\" />\n          <TreePine className=\"absolute bottom-20 left-10 w-24 h-24 text-gray-50\" />\n          <Camera className=\"absolute top-1/3 left-1/4 w-16 h-16 text-gray-100\" />\n        </div>\n        \n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 relative\">\n          <div className=\"text-center mb-12\">\n            <div className=\"flex justify-center mb-6\">\n              <div className=\"icon-bg-blue\">\n                <Map className=\"w-6 h-6\" />\n              </div>\n            </div>\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-800 mb-6\">Our Story</h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-12\">\n              <div className=\"elegant-card p-6 text-center hover-lift transition-butter\">\n                <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Calendar className=\"w-8 h-8 text-blue-600\" />\n                </div>\n                <h3 className=\"font-semibold text-gray-800 mb-2\">Founded 2009</h3>\n                <p className=\"text-sm text-gray-600\">Started as a local tour company</p>\n              </div>\n              \n              <div className=\"elegant-card p-6 text-center hover-lift transition-butter\">\n                <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Users className=\"w-8 h-8 text-green-600\" />\n                </div>\n                <h3 className=\"font-semibold text-gray-800 mb-2\">50K+ Travelers</h3>\n                <p className=\"text-sm text-gray-600\">Served happy customers</p>\n              </div>\n              \n              <div className=\"elegant-card p-6 text-center hover-lift transition-butter\">\n                <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Award className=\"w-8 h-8 text-purple-600\" />\n                </div>\n                <h3 className=\"font-semibold text-gray-800 mb-2\">Leading Platform</h3>\n                <p className=\"text-sm text-gray-600\">Bangladesh's top travel company</p>\n              </div>\n            </div>\n            \n            <div className=\"text-lg text-gray-600 leading-relaxed space-y-6\">\n              <div className=\"elegant-card p-8 text-left\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center flex-shrink-0 mt-1\">\n                    <Globe className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <p>\n                    BD Explorer was founded in 2009 with a simple mission: to showcase the incredible beauty and rich cultural heritage of Bangladesh to the world. What started as a small local tour company has grown into the country's leading travel platform, helping over 50,000 travelers discover Bangladesh's hidden gems.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"elegant-card p-8 text-left\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center flex-shrink-0 mt-1\">\n                    <Mountain className=\"w-6 h-6 text-secondary\" />\n                  </div>\n                  <p>\n                    From the world's longest natural sea beach at Cox's Bazar to the mystical mangrove forests of the Sundarbans, from the rolling tea gardens of Sylhet to the ancient archaeological wonders of Paharpur, we specialize in creating authentic experiences that connect travelers with the heart and soul of Bangladesh.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"elegant-card p-8 text-left\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-12 h-12 bg-green-500/10 rounded-lg flex items-center justify-center flex-shrink-0 mt-1\">\n                    <Heart className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                  <p>\n                    Our commitment goes beyond tourism. We work closely with local communities, support sustainable travel practices, and contribute to the preservation of Bangladesh's natural and cultural heritage for future generations.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-16 section-bg-soft relative overflow-hidden\">\n        {/* Background decorative elements */}\n        <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n          <div className=\"absolute top-0 left-1/4 w-72 h-72 bg-gradient-to-br from-primary/5 to-secondary/5 rounded-full blur-3xl\"></div>\n          <div className=\"absolute bottom-0 right-1/4 w-96 h-96 bg-gradient-to-tl from-green-500/5 to-blue-500/5 rounded-full blur-3xl\"></div>\n        </div>\n        \n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 relative\">\n          <div className=\"text-center mb-16\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"icon-bg-green\">\n                <Award className=\"w-6 h-6\" />\n              </div>\n            </div>\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-800 mb-4\">Our Impact</h2>\n            <p className=\"text-xl text-gray-600\">Making a difference in Bangladesh tourism</p>\n          </div>\n          \n          {/* Simplified stats layout */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {stats.map((stat, index) => {\n              const IconComponent = stat.icon;\n              const colors = [\n                { bg: 'bg-blue-500', light: 'bg-blue-50', text: 'text-blue-600' },\n                { bg: 'bg-green-500', light: 'bg-green-50', text: 'text-green-600' },\n                { bg: 'bg-orange-500', light: 'bg-orange-50', text: 'text-orange-600' },\n                { bg: 'bg-purple-500', light: 'bg-purple-50', text: 'text-purple-600' }\n              ];\n              \n              return (\n                <div key={index} className={`elegant-card p-8 text-center hover-lift transition-all duration-300 transform hover:scale-105 ${colors[index].light} border-2 border-transparent hover:border-gray-200`}>\n                  <div className={`w-20 h-20 ${colors[index].bg} rounded-full flex items-center justify-center mx-auto mb-6 shadow-lg transform hover:rotate-12 transition-transform duration-300`}>\n                    <IconComponent className=\"w-10 h-10 text-white\" />\n                  </div>\n                  <div className={`text-4xl font-bold ${colors[index].text} mb-3`}>{stat.number}</div>\n                  <div className=\"text-gray-600 font-medium text-lg\">{stat.label}</div>\n                  \n                  {/* Decorative elements */}\n                  <div className=\"mt-6 flex justify-center space-x-2\">\n                    <div className={`w-2 h-2 ${colors[index].bg} rounded-full animate-pulse`} style={{ animationDelay: `${index * 0.2}s` }}></div>\n                    <div className={`w-2 h-2 ${colors[index].bg} rounded-full animate-pulse`} style={{ animationDelay: `${index * 0.2 + 0.1}s` }}></div>\n                    <div className={`w-2 h-2 ${colors[index].bg} rounded-full animate-pulse`} style={{ animationDelay: `${index * 0.2 + 0.2}s` }}></div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Values Section */}\n      <section className=\"py-16 section-bg-warm relative overflow-hidden\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"icon-bg-purple\">\n                <Heart className=\"w-6 h-6\" />\n              </div>\n            </div>\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-800 mb-4\">Our Values</h2>\n            <p className=\"text-xl text-gray-600\">What drives us every day</p>\n          </div>\n          \n          {/* Creative zigzag values layout */}\n          <div className=\"space-y-16\">\n            {values.map((value, index) => {\n              const IconComponent = value.icon;\n              const isLeft = index % 2 === 0;\n              const colors = [\n                { primary: 'bg-gradient-to-br from-rose-500 to-pink-600', light: 'bg-rose-50', accent: 'text-rose-600', shadow: 'shadow-rose-200' },\n                { primary: 'bg-gradient-to-br from-emerald-500 to-green-600', light: 'bg-emerald-50', accent: 'text-emerald-600', shadow: 'shadow-emerald-200' },\n                { primary: 'bg-gradient-to-br from-blue-500 to-indigo-600', light: 'bg-blue-50', accent: 'text-blue-600', shadow: 'shadow-blue-200' }\n              ];\n              \n              return (\n                <div key={index} className={`flex flex-col lg:flex-row items-center gap-8 lg:gap-16 ${\n                  !isLeft ? 'lg:flex-row-reverse' : ''\n                }`}>\n                  \n                  {/* Icon Section */}\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"relative\">\n                      {/* Large decorative circle */}\n                      <div className={`w-40 h-40 ${colors[index].primary} rounded-full flex items-center justify-center shadow-2xl ${colors[index].shadow} transform hover:scale-110 transition-all duration-300`}>\n                        <IconComponent className=\"w-20 h-20 text-white\" />\n                      </div>\n                      \n                      {/* Floating elements */}\n                      <div className={`absolute -top-4 -right-4 w-8 h-8 ${colors[index].light} rounded-full border-4 border-white shadow-lg animate-bounce`} style={{ animationDelay: `${index * 0.3}s` }}></div>\n                      <div className={`absolute -bottom-4 -left-4 w-6 h-6 ${colors[index].primary} rounded-full animate-pulse`} style={{ animationDelay: `${index * 0.5}s` }}></div>\n                      \n                      {/* Number indicator */}\n                      <div className=\"absolute -top-2 -left-2 w-12 h-12 bg-white rounded-full border-4 border-gray-100 flex items-center justify-center shadow-lg\">\n                        <span className={`text-2xl font-bold ${colors[index].accent}`}>{index + 1}</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Content Section */}\n                  <div className={`flex-1 text-center lg:text-${isLeft ? 'left' : 'right'}`}>\n                    <div className={`elegant-card p-8 lg:p-10 ${colors[index].light} border-l-4 border-${colors[index].primary.split('-')[2]}-500 hover-lift transition-all duration-300`}>\n                      \n                      {/* Title with decorative elements */}\n                      <div className=\"mb-6\">\n                        <h3 className=\"text-3xl lg:text-4xl font-bold text-gray-800 mb-2\">{value.title}</h3>\n                        <div className={`w-24 h-1 ${colors[index].primary} mx-auto lg:mx-0 ${!isLeft ? 'lg:ml-auto lg:mr-0' : ''} rounded-full`}></div>\n                      </div>\n                      \n                      <p className=\"text-lg text-gray-600 leading-relaxed mb-6\">{value.description}</p>\n                      \n                      {/* Feature highlights */}\n                      <div className={`inline-flex items-center space-x-2 ${colors[index].light} px-4 py-2 rounded-full border border-${colors[index].primary.split('-')[2]}-200`}>\n                        <div className={`w-3 h-3 ${colors[index].primary} rounded-full animate-pulse`}></div>\n                        <span className={`text-sm font-medium ${colors[index].accent}`}>Core Value #{index + 1}</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Connecting arrow for large screens */}\n                  {index < values.length - 1 && (\n                    <div className=\"hidden lg:block absolute left-1/2 transform -translate-x-1/2 mt-32\">\n                      <div className={`w-1 h-16 ${colors[index].primary} opacity-30`}></div>\n                      <div className={`w-0 h-0 border-l-4 border-r-4 border-t-8 border-transparent border-t-${colors[index].primary.split('-')[2]}-400 mx-auto`}></div>\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Team Section */}\n      <section className=\"py-16 section-bg-cool relative overflow-hidden\">\n        {/* Background pattern */}\n        <div className=\"absolute inset-0 opacity-5\">\n          <div className=\"absolute inset-0\" style={{\n            backgroundImage: `url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23000000' fill-opacity='0.1'%3E%3Ccircle cx='30' cy='30' r='4'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")`\n          }}></div>\n        </div>\n        \n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 relative\">\n          <div className=\"text-center mb-16\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"icon-bg-orange\">\n                <Users className=\"w-6 h-6\" />\n              </div>\n            </div>\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-800 mb-4\">Meet Our Team</h2>\n            <p className=\"text-xl text-gray-600\">The passionate people behind BD Explorer</p>\n          </div>\n          \n          {/* Creative polaroid-style team layout */}\n          <div className=\"relative\">\n            <div className=\"flex flex-col lg:flex-row items-center justify-center lg:space-x-8 space-y-12 lg:space-y-0\">\n              {team.map((member, index) => {\n                const rotations = ['lg:rotate-[-8deg]', 'lg:rotate-[4deg]', 'lg:rotate-[-6deg]'];\n                const translations = ['lg:translate-y-8', 'lg:-translate-y-4', 'lg:translate-y-12'];\n                const bgColors = ['bg-gradient-to-br from-blue-50 to-blue-100', 'bg-gradient-to-br from-green-50 to-green-100', 'bg-gradient-to-br from-purple-50 to-purple-100'];\n                \n                return (\n                  <div \n                    key={index} \n                    className={`relative group hover:scale-105 hover:rotate-0 transition-all duration-500 transform ${\n                      rotations[index]\n                    } ${translations[index]}`}\n                  >\n                    {/* Polaroid-style card */}\n                    <div className={`${bgColors[index]} p-6 rounded-2xl shadow-2xl hover:shadow-3xl transition-shadow duration-300 max-w-sm`}>\n                      {/* Photo frame */}\n                      <div className=\"relative mb-6\">\n                        <div className=\"w-full h-48 bg-white rounded-xl p-3 shadow-inner\">\n                          <img \n                            src={member.image} \n                            alt={member.name} \n                            className=\"w-full h-full rounded-lg object-cover\"\n                          />\n                        </div>\n                        \n                        {/* Photo corners */}\n                        <div className=\"absolute -top-1 -left-1 w-4 h-4 bg-white rounded-full shadow-sm\"></div>\n                        <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-white rounded-full shadow-sm\"></div>\n                        <div className=\"absolute -bottom-1 -left-1 w-4 h-4 bg-white rounded-full shadow-sm\"></div>\n                        <div className=\"absolute -bottom-1 -right-1 w-4 h-4 bg-white rounded-full shadow-sm\"></div>\n                      </div>\n                      \n                      {/* Text content */}\n                      <div className=\"text-center space-y-3\">\n                        <h3 className=\"text-2xl font-bold text-gray-800\">{member.name}</h3>\n                        <div className=\"inline-block bg-white px-4 py-2 rounded-full\">\n                          <p className=\"text-primary font-semibold text-sm\">{member.role}</p>\n                        </div>\n                        <p className=\"text-gray-600 text-sm leading-relaxed px-2\">{member.bio}</p>\n                      </div>\n                      \n                      {/* Decorative tape */}\n                      <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 w-16 h-8 bg-yellow-200 rounded-sm opacity-80 rotate-12 shadow-sm\"></div>\n                      <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 w-16 h-8 bg-gradient-to-b from-yellow-300 to-yellow-400 rounded-sm opacity-60 rotate-12\"></div>\n                      \n                      {/* Index number */}\n                      <div className=\"absolute top-4 right-4 w-8 h-8 bg-white rounded-full flex items-center justify-center shadow-md\">\n                        <span className=\"text-sm font-bold text-gray-600\">{index + 1}</span>\n                      </div>\n                    </div>\n                    \n                    {/* Connecting lines */}\n                    {index < team.length - 1 && (\n                      <div className=\"hidden lg:block absolute top-1/2 -right-4 w-8 h-1 bg-gradient-to-r from-gray-300 to-transparent transform -translate-y-1/2 z-10\"></div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n            \n            {/* Team connection visualization */}\n            <div className=\"absolute inset-0 pointer-events-none hidden lg:block\">\n              <svg className=\"w-full h-full\" viewBox=\"0 0 800 400\">\n                <defs>\n                  <linearGradient id=\"teamGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                    <stop offset=\"0%\" stopColor=\"rgb(59, 130, 246)\" stopOpacity=\"0.2\" />\n                    <stop offset=\"50%\" stopColor=\"rgb(16, 185, 129)\" stopOpacity=\"0.2\" />\n                    <stop offset=\"100%\" stopColor=\"rgb(139, 69, 19)\" stopOpacity=\"0.2\" />\n                  </linearGradient>\n                </defs>\n                <path d=\"M200,200 Q400,150 600,200\" stroke=\"url(#teamGradient)\" strokeWidth=\"3\" fill=\"none\" className=\"animate-pulse\" />\n              </svg>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Mission Section */}\n      <section className=\"py-16 bg-gradient-to-r from-primary to-secondary text-white relative overflow-hidden\">\n        {/* Background decorative elements */}\n        <div className=\"absolute inset-0 overflow-hidden\">\n          <Sun className=\"absolute top-10 left-10 w-20 h-20 text-white/10\" />\n          <Moon className=\"absolute top-20 right-20 w-16 h-16 text-white/10\" />\n          <TreePine className=\"absolute bottom-10 left-1/4 w-24 h-24 text-white/10\" />\n          <Waves className=\"absolute bottom-20 right-1/4 w-28 h-28 text-white/10\" />\n          <Bird className=\"absolute top-1/3 right-10 w-12 h-12 text-white/15 animate-pulse\" />\n          <Fish className=\"absolute bottom-1/3 left-10 w-14 h-14 text-white/15\" />\n        </div>\n        \n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center relative\">\n          <div className=\"flex justify-center mb-8\">\n            <div className=\"w-20 h-20 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm\">\n              <Compass className=\"w-10 h-10 text-white\" />\n            </div>\n          </div>\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-8\">Our Mission</h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-12\">\n            <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 hover-lift transition-butter\">\n              <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Globe className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"font-semibold mb-2\">Global Accessibility</h3>\n              <p className=\"text-sm opacity-90\">Making Bangladesh accessible to world travelers</p>\n            </div>\n            \n            <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 hover-lift transition-butter\">\n              <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Users className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"font-semibold mb-2\">Community Support</h3>\n              <p className=\"text-sm opacity-90\">Supporting local communities and culture</p>\n            </div>\n            \n            <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 hover-lift transition-butter\">\n              <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <TreePine className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"font-semibold mb-2\">Sustainability</h3>\n              <p className=\"text-sm opacity-90\">Promoting eco-friendly travel practices</p>\n            </div>\n          </div>\n          \n          <p className=\"text-xl leading-relaxed bg-white/10 backdrop-blur-sm rounded-2xl p-8\">\n            To make Bangladesh's natural beauty and cultural richness accessible to travelers from around the world while supporting local communities and promoting sustainable tourism practices. We believe every journey should be transformative, connecting people with places and creating memories that last a lifetime.\n          </p>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":27514},"client/src/pages/home.tsx":{"content":"import Navigation from '../components/navigation';\nimport HeroSection from '../components/hero-section';\nimport PopularDestinations from '../components/popular-destinations';\nimport RecommendedHotels from '../components/recommended-hotels';\nimport TripPlannerDeals from '../components/trip-planner-deals';\nimport WhyChooseUs from '../components/why-choose-us';\nimport Testimonials from '../components/testimonials';\nimport FAQ from '../components/faq';\nimport Newsletter from '../components/newsletter';\nimport Footer from '../components/footer';\nimport { Link } from 'wouter';\nimport { ArrowRight } from 'lucide-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useState, useEffect } from 'react';\nimport type { Destination } from '@shared/schema';\n\nexport default function Home() {\n  const { data: destinations = [] } = useQuery<Destination[]>({\n    queryKey: ['/api/destinations'],\n  });\n\n  const [selectedDestination, setSelectedDestination] = useState<Destination | null>(null);\n\n  // Set first destination as default when data loads\n  useEffect(() => {\n    if (destinations.length > 0 && !selectedDestination) {\n      setSelectedDestination(destinations[0]);\n    }\n  }, [destinations, selectedDestination]);\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navigation />\n      <HeroSection />\n      <div className=\"py-12 sm:py-16 lg:py-24 section-bg-cool relative\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8 text-center\">\n          <h2 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-900 mb-3 sm:mb-4\">Popular Destinations</h2>\n          <p className=\"text-base sm:text-lg lg:text-xl text-gray-600 mb-6 sm:mb-8\">Explore the world's most breathtaking locations</p>\n          <div className=\"mt-4 sm:mt-6\">\n            <Link href=\"/destinations\">\n              <button className=\"inline-flex items-center px-6 sm:px-8 py-3 sm:py-4 bg-primary text-white rounded-xl sm:rounded-2xl hover:bg-primary/90 transition-butter font-medium shadow-lg hover-lift text-sm sm:text-base\">\n                View All Destinations\n                <ArrowRight className=\"w-3 sm:w-4 h-3 sm:h-4 ml-2\" />\n              </button>\n            </Link>\n          </div>\n        </div>\n      </div>\n      <PopularDestinations selectedDestination={selectedDestination} setSelectedDestination={setSelectedDestination} />\n      <RecommendedHotels />\n      <TripPlannerDeals />\n      <WhyChooseUs />\n      <Testimonials />\n      <FAQ />\n      <Newsletter />\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":2532},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/destinations.tsx":{"content":"import { Star, MapPin, Search, Filter, ArrowRight, Globe, Camera, Heart, Users, ChevronDown } from 'lucide-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useState, useEffect } from 'react';\nimport type { Destination } from '@shared/schema';\nimport Navigation from '../components/navigation';\nimport Footer from '../components/footer';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useLocation } from 'wouter';\nimport sundarbansImage from '@assets/à¦¬à¦¿à¦·à§à¦®à¦¯à¦¼à¦à¦°_à¦¸à§à¦¨à§à¦¦à¦°à¦¬à¦¨_1755535540494.jpg';\nimport valleyImage from '@assets/Tourist-Places-in-Bangladesh_1755535540494.jpg';\nimport boatsImage from '@assets/penedo3_1755535540495.png';\nimport aerialImage from '@assets/2_1755535540495.jpg';\nimport sajekImage from '@assets/Sajek_Valley_1755535989228.jpg';\n\nexport default function Destinations() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedDistrict, setSelectedDistrict] = useState('all');\n  const [activeHeroIndex, setActiveHeroIndex] = useState(0);\n  const [, setLocation] = useLocation();\n  \n  const { data: destinations = [], isLoading, error } = useQuery<Destination[]>({\n    queryKey: ['/api/destinations'],\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    refetchOnWindowFocus: false,\n  });\n\n  const filteredDestinations = destinations.filter(destination => {\n    if (!destination?.name || !destination?.description || !destination?.district) return false;\n    const matchesSearch = destination.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      destination.description.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesDistrict = selectedDistrict === 'all' || destination.district === selectedDistrict;\n    return matchesSearch && matchesDistrict;\n  });\n\n  // Get unique districts for filter dropdown\n  const uniqueDistricts = Array.from(new Set(destinations.filter(d => d?.district).map(d => d.district))).sort();\n\n  // Hero background carousel with authentic Bangladesh images\n  const heroBackgrounds = [\n    sundarbansImage, // Sundarbans wildlife - spotted deer in mangrove forest\n    valleyImage,     // Scenic valley with mountains and lake reflection\n    boatsImage,      // Traditional boats in crystal clear water\n    aerialImage,     // Aerial view of winding rivers through mangroves\n    sajekImage       // Sajek Valley sunset with mountains and grass\n  ];\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setActiveHeroIndex((prev) => (prev + 1) % heroBackgrounds.length);\n    }, 5000);\n    return () => clearInterval(interval);\n  }, [heroBackgrounds.length]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-white\">\n        <Navigation />\n        <div className=\"py-16 section-bg-cool\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center mb-12\">\n              <div className=\"flex justify-center mb-4\">\n                <div className=\"icon-bg-blue\">\n                  <MapPin className=\"w-6 h-6\" />\n                </div>\n              </div>\n              <h1 className=\"text-4xl md:text-5xl font-bold text-gray-800 mb-4\">Explore Bangladesh</h1>\n              <p className=\"text-xl text-gray-600\">Discover amazing destinations across Bangladesh</p>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"elegant-card overflow-hidden animate-pulse\">\n                  <div className=\"w-full h-64 bg-gray-200\"></div>\n                  <div className=\"p-6\">\n                    <div className=\"h-6 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n                    <div className=\"flex justify-between items-center\">\n                      <div className=\"h-4 bg-gray-200 rounded w-16\"></div>\n                      <div className=\"h-4 bg-gray-200 rounded w-20\"></div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-white\">\n        <Navigation />\n        <div className=\"py-16\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center\">\n              <h1 className=\"text-4xl md:text-5xl font-bold text-gray-800 mb-4\">Explore Bangladesh</h1>\n              <p className=\"text-xl text-red-600\">Failed to load destinations. Please try again later.</p>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navigation />\n      {/* Hero Section */}\n      <div className=\"relative min-h-[60vh] md:min-h-[70vh] flex items-center justify-center overflow-hidden\">\n        {/* Background Carousel */}\n        <div className=\"absolute inset-0\">\n          {heroBackgrounds.map((bg, index) => (\n            <div\n              key={`hero-bg-${index}`}\n              className={`absolute inset-0 bg-cover bg-center transition-opacity duration-1000 ${\n                index === activeHeroIndex ? 'opacity-100' : 'opacity-0'\n              }`}\n              style={{ backgroundImage: `url(${bg})` }}\n            />\n          ))}\n          <div className=\"absolute inset-0 bg-black/40\"></div>\n        </div>\n\n        {/* Hero Content */}\n        <div className=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h1 className=\"text-3xl md:text-5xl font-bold text-white mb-4 md:mb-6\">\n            Discover Bangladesh\n          </h1>\n          <p className=\"text-lg md:text-xl text-white/90 mb-6 md:mb-8 max-w-3xl mx-auto\">\n            Find your perfect destination from thousands of places\n          </p>\n\n          {/* Search Section */}\n          <div className=\"max-w-4xl mx-auto mb-6 px-4\">\n            <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-3 md:p-4\">\n              <div className=\"flex flex-col sm:flex-row gap-3\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Where do you want to go?\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"w-full pl-10 pr-3 py-2.5 bg-white border border-gray-200 rounded-md text-gray-900 text-sm placeholder-gray-500 focus:ring-2 focus:ring-primary/50 focus:border-primary\"\n                  />\n                </div>\n                \n                <Select value={selectedDistrict} onValueChange={setSelectedDistrict}>\n                  <SelectTrigger className=\"w-full sm:w-40 bg-white border border-gray-200 text-gray-900 text-sm\">\n                    <SelectValue placeholder=\"All Districts\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Districts</SelectItem>\n                    {uniqueDistricts.map((district) => (\n                      <SelectItem key={district} value={district}>\n                        {district}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n\n          {/* Simple Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 max-w-2xl mx-auto mb-8\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-white\">{destinations.length}</div>\n              <div className=\"text-sm text-white/70\">Destinations</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-white\">50K+</div>\n              <div className=\"text-sm text-white/70\">Travelers</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-white\">500+</div>\n              <div className=\"text-sm text-white/70\">Experiences</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-white\">4.8</div>\n              <div className=\"text-sm text-white/70\">Rating</div>\n            </div>\n          </div>\n\n          {/* Carousel Indicators */}\n          <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 flex items-center space-x-2 bg-black/30 backdrop-blur-sm rounded-full px-3 py-2\">\n            {heroBackgrounds.map((_, index) => (\n              <button\n                key={`hero-indicator-${index}`}\n                className={`transition-all duration-300 ${\n                  index === activeHeroIndex \n                    ? 'w-6 h-2 bg-white rounded-full' \n                    : 'w-2 h-2 bg-white/60 hover:bg-white/80 rounded-full'\n                }`}\n                onClick={() => setActiveHeroIndex(index)}\n                data-testid={`button-hero-indicator-${index}`}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n      {/* Destinations Grid */}\n      <div className=\"py-16 section-bg-warm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Section Header */}\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              {searchQuery ? 'Search Results' : 'All Destinations'}\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              {searchQuery \n                ? `Discover amazing places that match your search`\n                : 'Explore our curated collection of amazing destinations across Bangladesh'\n              }\n            </p>\n          </div>\n          {/* Search Results Info */}\n          {(searchQuery || selectedDistrict !== 'all') && (\n            <div className=\"mb-8\">\n              <p className=\"text-lg text-gray-600 text-center\">\n                Found <span className=\"font-semibold text-primary\">{filteredDestinations.length}</span> destinations\n                {searchQuery && (\n                  <>\n                    {' '}matching \"<span className=\"font-medium\">{searchQuery}</span>\"\n                  </>\n                )}\n                {selectedDistrict !== 'all' && (\n                  <>\n                    {searchQuery ? ' and' : ''} in <span className=\"font-medium\">{selectedDistrict}</span> district\n                  </>\n                )}\n              </p>\n            </div>\n          )}\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 md:gap-6\">\n            {filteredDestinations.map((destination, index) => (\n              <div \n                key={destination.id}\n                className=\"bg-white rounded-lg md:rounded-xl overflow-hidden shadow-sm md:shadow-lg hover:shadow-md transition-all duration-300 cursor-pointer\"\n                style={{ animationDelay: `${index * 0.1}s` }}\n                data-testid={`card-destination-${destination.id}`}\n                onClick={() => setLocation(`/destinations/${destination.id}`)}\n              >\n                <div className=\"relative\">\n                  <img \n                    src={destination.imageUrl} \n                    alt={destination.name} \n                    className=\"w-full h-40 md:h-56 object-cover\"\n                    data-testid={`img-destination-${destination.id}`}\n                  />\n                  <div className=\"absolute top-2 right-2 bg-white rounded-full px-2 py-1 shadow-sm\">\n                    <div className=\"flex items-center\">\n                      <Star className=\"w-3 h-3 text-yellow-500 mr-1\" />\n                      <span className=\"text-xs font-medium text-gray-800\" data-testid={`text-destination-rating-${destination.id}`}>\n                        {destination.rating}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"p-3 md:p-4\">\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <div className=\"flex items-center\">\n                      <MapPin className=\"w-3 h-3 text-gray-400 mr-1\" />\n                      <span className=\"text-xs text-gray-500\">{destination.district}</span>\n                    </div>\n                  </div>\n                  \n                  <h3 className=\"text-sm md:text-lg font-semibold mb-1 md:mb-2 text-gray-900 line-clamp-1\" data-testid={`text-destination-name-${destination.id}`}>\n                    {destination.name}\n                  </h3>\n                  \n                  <p className=\"text-xs md:text-sm text-gray-600 mb-3 line-clamp-2\" data-testid={`text-destination-description-${destination.id}`}>\n                    {destination.description}\n                  </p>\n                  \n                  <div className=\"flex justify-between items-center\">\n                    <div className=\"text-xs text-gray-500\">\n                      Starting from\n                    </div>\n                    <button \n                      className=\"bg-primary text-white px-3 py-1.5 md:px-4 md:py-2 rounded-md text-xs md:text-sm font-medium transition-colors hover:bg-primary/90\"\n                      data-testid={`button-explore-destination-${destination.id}`}\n                    >\n                      View Details\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}","size_bytes":13929},"server/auth.ts":{"content":"import session from \"express-session\";\nimport type { RequestHandler } from \"express\";\nimport type { User } from \"@shared/schema\";\nimport { randomBytes } from \"crypto\";\n\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId?: string;\n    user?: User;\n  }\n}\n\n// Generate a secure random secret if none is provided\nconst generateSecureSecret = () => {\n  return randomBytes(32).toString('hex');\n};\n\nexport function getSession() {\n  const isProduction = process.env.NODE_ENV === 'production';\n  \n  return session({\n    secret: process.env.SESSION_SECRET || generateSecureSecret(),\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: isProduction, // Use secure cookies in production\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n      sameSite: 'strict', // CSRF protection\n    },\n    name: 'sessionId', // Change default session name for security\n  });\n}\n\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  if (req.session && req.session.userId) {\n    return next();\n  }\n  return res.status(401).json({ message: \"Unauthorized\" });\n};","size_bytes":1115},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nlet pool: Pool | null = null;\nlet db: any = null;\n\nif (!process.env.DATABASE_URL) {\n  console.warn(\"DATABASE_URL not set - database operations will be disabled\");\n} else {\n  try {\n    pool = new Pool({ connectionString: process.env.DATABASE_URL });\n    db = drizzle({ client: pool, schema });\n    console.log(\"Database connected successfully\");\n  } catch (error) {\n    console.error(\"Failed to connect to database:\", error);\n    pool = null;\n    db = null;\n  }\n}\n\nexport { pool, db };","size_bytes":703},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest, getQueryFn } from \"@/lib/queryClient\";\nimport type { User, LoginCredentials, InsertUser } from \"@shared/schema\";\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading } = useQuery<User | null>({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n  });\n\n  const signInMutation = useMutation({\n    mutationFn: async (credentials: LoginCredentials) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/signin\", credentials);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  const signUpMutation = useMutation({\n    mutationFn: async (userData: InsertUser) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/signup\", userData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  const signOutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/auth/signout\");\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      queryClient.clear();\n    },\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    signIn: signInMutation.mutateAsync,\n    signUp: signUpMutation.mutateAsync,\n    signOut: signOutMutation.mutateAsync,\n    isSigningIn: signInMutation.isPending,\n    isSigningUp: signUpMutation.isPending,\n    isSigningOut: signOutMutation.isPending,\n  };\n}","size_bytes":1736},"client/src/hooks/useProfile.ts":{"content":"import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { UpdateUser } from \"@shared/schema\";\n\nexport function useProfile() {\n  const queryClient = useQueryClient();\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (profileData: UpdateUser) => {\n      const response = await apiRequest(\"PUT\", \"/api/profile\", profileData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  return {\n    updateProfile: updateProfileMutation.mutateAsync,\n    isUpdating: updateProfileMutation.isPending,\n  };\n}","size_bytes":685},"client/src/pages/profile.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { updateUserSchema, type UpdateUser, type Booking } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useProfile } from \"@/hooks/useProfile\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { User, Save, LogOut, Calendar, MapPin, X, CheckCircle, AlertTriangle, Users, Phone, Clock, Utensils, Download } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport jsPDF from 'jspdf';\n\nexport default function Profile() {\n  const { user, signOut, isSigningOut, isAuthenticated } = useAuth();\n  const { updateProfile, isUpdating } = useProfile();\n  const [success, setSuccess] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [bookingToCancel, setBookingToCancel] = useState<Booking | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch user's bookings\n  const { data: bookings = [], isLoading: bookingsLoading } = useQuery<Booking[]>({\n    queryKey: ['/api/bookings'],\n    enabled: isAuthenticated,\n  });\n\n  // Cancel booking mutation\n  const cancelBookingMutation = useMutation({\n    mutationFn: async (bookingId: string) => {\n      return await apiRequest('PUT', `/api/bookings/${bookingId}/cancel`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      toast({\n        title: \"Booking Cancelled\",\n        description: \"Your booking has been successfully cancelled.\",\n      });\n      setBookingToCancel(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Cancellation Failed\",\n        description: error.message || \"Failed to cancel booking. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCancelBooking = async () => {\n    if (bookingToCancel) {\n      await cancelBookingMutation.mutateAsync(bookingToCancel.id);\n    }\n  };\n\n  const formatDate = (dateStr: string | null) => {\n    if (!dateStr) return '';\n    return new Date(dateStr).toLocaleDateString();\n  };\n\n  const formatTime = (timeStr: string | null) => {\n    if (!timeStr) return '';\n    return new Date(`2000-01-01T${timeStr}`).toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  };\n\n  const form = useForm<UpdateUser>({\n    resolver: zodResolver(updateUserSchema),\n    defaultValues: {\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      username: user?.username || \"\",\n      phone: user?.phone || \"\",\n      dateOfBirth: user?.dateOfBirth || \"\",\n      nationality: user?.nationality || \"\",\n      profileImageUrl: user?.profileImageUrl || \"\",\n    },\n    // Auto-update form when user data loads\n    values: user ? {\n      firstName: user.firstName || \"\",\n      lastName: user.lastName || \"\",\n      username: user.username || \"\",\n      phone: user.phone || \"\",\n      dateOfBirth: user.dateOfBirth || \"\",\n      nationality: user.nationality || \"\",\n      profileImageUrl: user.profileImageUrl || \"\",\n    } : undefined,\n  });\n\n  const onSubmit = async (data: UpdateUser) => {\n    try {\n      setError(\"\");\n      setSuccess(\"\");\n      \n      // Remove empty strings to avoid overwriting with empty values\n      const cleanData = data && typeof data === 'object' \n        ? Object.fromEntries(\n            Object.entries(data).filter(([_, value]) => value !== \"\")\n          )\n        : {};\n\n      await updateProfile(cleanData);\n      setSuccess(\"Profile updated successfully!\");\n      toast({\n        title: \"Success\",\n        description: \"Your profile has been updated successfully.\",\n      });\n    } catch (error: any) {\n      const errorMessage = error && typeof error === 'object' && 'message' in error \n        ? error.message \n        : error?.toString?.() || \"Failed to update profile\";\n      setError(errorMessage);\n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSignOut = async () => {\n    try {\n      await signOut();\n      toast({\n        title: \"Signed out\",\n        description: \"You have been signed out successfully.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to sign out. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const downloadReceipt = (booking: Booking) => {\n    const doc = new jsPDF();\n    const pageWidth = doc.internal.pageSize.getWidth();\n    \n    // Header with background color\n    doc.setFillColor(0, 102, 204);\n    doc.rect(0, 0, pageWidth, 50, 'F');\n    \n    // Company logo (more visible text-based logo)\n    doc.setTextColor(255, 255, 255);\n    doc.setDrawColor(255, 255, 255);\n    doc.setLineWidth(2);\n    doc.rect(15, 8, 50, 20, 'S');\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'bold');\n    doc.text('BANGLADESH', 40, 16, { align: 'center' });\n    doc.setFontSize(10);\n    doc.text('EXPLORER', 40, 24, { align: 'center' });\n    \n    // Company name in header\n    doc.setFont('helvetica', 'bold');\n    doc.setFontSize(24);\n    doc.text('BD Explorer', pageWidth / 2, 22, { align: 'center' });\n    doc.setFont('helvetica', 'normal');\n    doc.setFontSize(11);\n    doc.text('Your Gateway to Beautiful Bangladesh', pageWidth / 2, 32, { align: 'center' });\n    doc.setFontSize(9);\n    doc.text('+880-2-123-4567  |  info@bangladeshexplorer.com  |  www.bangladeshexplorer.com', pageWidth / 2, 42, { align: 'center' });\n    \n    // Receipt title\n    doc.setTextColor(0, 0, 0);\n    doc.setFontSize(20);\n    doc.text('BOOKING RECEIPT', pageWidth / 2, 65, { align: 'center' });\n    \n    // Draw a line under title\n    doc.setDrawColor(200, 200, 200);\n    doc.line(20, 75, pageWidth - 20, 75);\n    \n    let y = 90;\n    \n    // Confirmation details box\n    doc.setFillColor(245, 245, 245);\n    doc.roundedRect(20, y, pageWidth - 40, 25, 3, 3, 'F');\n    doc.setTextColor(0, 102, 204);\n    doc.setFontSize(14);\n    doc.text(`Confirmation: ${booking.confirmationNumber}`, 25, y + 10);\n    doc.text(`Status: ${booking.status.toUpperCase()}`, 25, y + 20);\n    doc.text(`Booking Type: ${booking.bookingType ? booking.bookingType.charAt(0).toUpperCase() + booking.bookingType.slice(1) : 'N/A'}`, pageWidth / 2 + 10, y + 10);\n    doc.text(`Date: ${new Date(booking.createdAt).toLocaleDateString('en-GB')}`, pageWidth / 2 + 10, y + 20);\n    \n    y += 40;\n    \n    // Property Information Section\n    doc.setTextColor(0, 102, 204);\n    doc.setFontSize(16);\n    doc.text('Property Information', 20, y);\n    doc.setDrawColor(0, 102, 204);\n    doc.line(20, y + 3, 120, y + 3);\n    \n    y += 15;\n    doc.setTextColor(0, 0, 0);\n    doc.setFontSize(12);\n    doc.text(`Name: ${booking.propertyName}`, 25, y);\n    y += 10;\n    doc.text(`Location: ${booking.propertyLocation}`, 25, y);\n    y += 10;\n    doc.text(`Phone: ${booking.propertyPhone}`, 25, y);\n    \n    y += 20;\n    \n    // Customer Information Section\n    doc.setTextColor(0, 102, 204);\n    doc.setFontSize(16);\n    doc.text('Customer Information', 20, y);\n    doc.setDrawColor(0, 102, 204);\n    doc.line(20, y + 3, 120, y + 3);\n    \n    y += 15;\n    doc.setTextColor(0, 0, 0);\n    doc.setFontSize(12);\n    doc.text(`Name: ${booking.customerName}`, 25, y);\n    y += 10;\n    doc.text(`Email: ${booking.email}`, 25, y);\n    y += 10;\n    doc.text(`Phone: ${booking.phone}`, 25, y);\n    \n    y += 20;\n    \n    // Booking Details Section\n    doc.setTextColor(0, 102, 204);\n    doc.setFontSize(16);\n    doc.text('Booking Details', 20, y);\n    doc.setDrawColor(0, 102, 204);\n    doc.line(20, y + 3, 110, y + 3);\n    \n    y += 15;\n    doc.setTextColor(0, 0, 0);\n    doc.setFontSize(12);\n    \n    if (booking.bookingType === 'hotel') {\n      doc.text(`Room Type: ${booking.roomType || 'Standard'}`, 25, y);\n      y += 10;\n      doc.text(`Check-in Date: ${booking.checkIn ? new Date(booking.checkIn).toLocaleDateString('en-GB') : 'N/A'}`, 25, y);\n      y += 10;\n      doc.text(`Check-out Date: ${booking.checkOut ? new Date(booking.checkOut).toLocaleDateString('en-GB') : 'N/A'}`, 25, y);\n      y += 10;\n      doc.text(`Number of Nights: ${booking.nights || 1}`, 25, y);\n      y += 10;\n      doc.text(`Number of Guests: ${booking.guests || 1}`, 25, y);\n    } else if (booking.bookingType === 'restaurant') {\n      doc.text(`Reservation Date: ${booking.reservationDate ? new Date(booking.reservationDate).toLocaleDateString('en-GB') : 'N/A'}`, 25, y);\n      y += 10;\n      doc.text(`Reservation Time: ${booking.reservationTime || 'N/A'}`, 25, y);\n      y += 10;\n      doc.text(`Party Size: ${booking.partySize || 1} people`, 25, y);\n      y += 10;\n      doc.text(`Cuisine Type: ${booking.cuisine || 'Mixed'}`, 25, y);\n    } else if (booking.bookingType === 'bus') {\n      doc.text(`Travel Date: ${booking.travelDate ? new Date(booking.travelDate).toLocaleDateString('en-GB') : 'N/A'}`, 25, y);\n      y += 10;\n      doc.text(`Number of Passengers: ${booking.passengers || 1}`, 25, y);\n      y += 10;\n      if (booking.selectedSeats && booking.selectedSeats.length > 0) {\n        doc.text(`Selected Seats: ${booking.selectedSeats.join(', ')}`, 25, y);\n        y += 10;\n      }\n      if (booking.specialRequests) {\n        doc.text(`Special Requests: ${booking.specialRequests}`, 25, y);\n        y += 10;\n      }\n    } else if (booking.bookingType === 'car') {\n      doc.text(`Travel Date: ${booking.travelDate ? new Date(booking.travelDate).toLocaleDateString('en-GB') : 'N/A'}`, 25, y);\n      y += 10;\n      doc.text(`Number of Passengers: ${booking.passengers || 1}`, 25, y);\n      y += 10;\n      doc.text(`Service Type: Private Car Rental`, 25, y);\n      y += 10;\n      if (booking.specialRequests) {\n        doc.text(`Special Requests: ${booking.specialRequests}`, 25, y);\n        y += 10;\n      }\n    } else if (booking.bookingType === 'flight') {\n      doc.text(`Travel Date: ${booking.travelDate ? new Date(booking.travelDate).toLocaleDateString('en-GB') : 'N/A'}`, 25, y);\n      y += 10;\n      doc.text(`Number of Passengers: ${booking.passengers || 1}`, 25, y);\n      y += 10;\n      if (booking.specialRequests) {\n        doc.text(`Special Requests: ${booking.specialRequests}`, 25, y);\n      }\n    }\n    \n    y += 30;\n    \n    // Payment Summary Box - make it more prominent\n    doc.setFillColor(240, 248, 255);\n    doc.roundedRect(20, y, pageWidth - 40, 45, 5, 5, 'F');\n    doc.setDrawColor(0, 102, 204);\n    doc.setLineWidth(2);\n    doc.roundedRect(20, y, pageWidth - 40, 45, 5, 5, 'S');\n    \n    doc.setTextColor(0, 102, 204);\n    doc.setFont('helvetica', 'bold');\n    doc.setFontSize(18);\n    doc.text('TOTAL AMOUNT PAID', pageWidth / 2, y + 18, { align: 'center' });\n    \n    doc.setTextColor(0, 120, 0);\n    doc.setFont('helvetica', 'bold');\n    doc.setFontSize(28);\n    let amount = booking.totalAmount;\n    \n    // Always calculate amount based on booking type since totalAmount might be null\n    if (booking.bookingType === 'hotel' && booking.nights) {\n      amount = 5000 * booking.nights; // Hotel price calculation\n    } else if (booking.bookingType === 'restaurant') {\n      amount = (booking.partySize || 2) * 1500; // Restaurant price per person\n    } else if (booking.bookingType === 'bus') {\n      amount = (booking.passengers || 1) * 800; // Bus price per passenger\n    } else if (booking.bookingType === 'car') {\n      amount = 3000; // Car rental price\n    } else {\n      amount = booking.totalAmount || 2500; // Use saved amount or default\n    }\n    \n    const formattedAmount = `BDT ${amount.toLocaleString('en-US')}`;\n    doc.text(formattedAmount, pageWidth / 2, y + 35, { align: 'center' });\n    \n    y += 65;\n    \n    // Footer section\n    doc.setDrawColor(200, 200, 200);\n    doc.setLineWidth(1);\n    doc.line(20, y, pageWidth - 20, y);\n    \n    y += 15;\n    doc.setTextColor(0, 102, 204);\n    doc.setFontSize(12);\n    doc.text('Thank you for choosing BD Explorer!', pageWidth / 2, y, { align: 'center' });\n    doc.setTextColor(100, 100, 100);\n    doc.setFontSize(10);\n    doc.text('Discover the beauty and culture of Bangladesh with us.', pageWidth / 2, y + 10, { align: 'center' });\n    doc.text('Safe travels and unforgettable memories await you!', pageWidth / 2, y + 20, { align: 'center' });\n    doc.text(`Receipt generated on ${new Date().toLocaleDateString('en-GB')} at ${new Date().toLocaleTimeString('en-US')}`, pageWidth / 2, y + 35, { align: 'center' });\n    \n    // QR Code placeholder (text-based)\n    doc.setTextColor(150, 150, 150);\n    doc.setFontSize(8);\n    doc.text('[QR Code for Mobile Verification]', pageWidth - 50, y + 50, { align: 'center' });\n    \n    // Download the PDF\n    doc.save(`Bangladesh-Explorer-Receipt-${booking.confirmationNumber}.pdf`);\n    \n    toast({\n      title: \"Receipt Downloaded\",\n      description: `Professional receipt for ${booking.propertyName} has been downloaded.`,\n    });\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Access Denied</h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Please sign in to view your profile.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"min-h-screen section-bg-soft\">\n        <Navigation />\n        \n        {/* Hero Section */}\n        <div className=\"relative bg-gradient-to-br from-blue-600 via-blue-700 to-purple-800 text-white py-16\">\n        <div className=\"absolute inset-0 bg-black/20\"></div>\n        <div className=\"relative max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center space-x-6\">\n            <Avatar className=\"w-20 h-20 border-4 border-white/20 shadow-xl\">\n              <AvatarImage src={user.profileImageUrl || \"\"} alt={user.firstName} />\n              <AvatarFallback className=\"text-2xl bg-white/10 text-white\">\n                {user.firstName?.[0]}{user.lastName?.[0]}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <h1 className=\"text-3xl md:text-4xl font-bold mb-2\" data-testid=\"text-user-name\">\n                Welcome back, <span className=\"text-accent bg-gradient-to-r from-accent to-yellow-400 bg-clip-text text-transparent\">{user.firstName}</span>!\n              </h1>\n              <p className=\"text-blue-100 text-lg\" data-testid=\"text-user-email\">\n                {user.email}\n              </p>\n              <div className=\"flex items-center mt-2 text-blue-100\">\n                <Calendar className=\"w-4 h-4 mr-2\" />\n                <span>Member since {new Date(user.createdAt).toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          \n          {/* Profile Stats & Quick Actions */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            {/* Profile Stats */}\n            <Card className=\"elegant-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Users className=\"w-5 h-5 mr-2 text-blue-600\" />\n                  Profile Stats\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-blue-600\">{bookings.length}</div>\n                    <div className=\"text-sm text-gray-600\">Total Bookings</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-green-600\">\n                      {bookings.filter(b => b.status === 'confirmed').length}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Confirmed</div>\n                  </div>\n                </div>\n                \n                <Separator />\n                \n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Username</span>\n                    <Badge variant=\"outline\" data-testid=\"text-username\">{user.username}</Badge>\n                  </div>\n                  {user.phone && (\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-600\">Phone</span>\n                      <span className=\"font-medium\" data-testid=\"text-phone\">{user.phone}</span>\n                    </div>\n                  )}\n                  {user.nationality && (\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-600\">Nationality</span>\n                      <span className=\"font-medium\" data-testid=\"text-nationality\">{user.nationality}</span>\n                    </div>\n                  )}\n                  {user.dateOfBirth && (\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-600\">Date of Birth</span>\n                      <span className=\"font-medium\">{formatDate(user.dateOfBirth)}</span>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card className=\"elegant-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Save className=\"w-5 h-5 mr-2 text-orange-600\" />\n                  Quick Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full justify-start\"\n                  onClick={handleSignOut}\n                  disabled={isSigningOut}\n                  data-testid=\"button-signout\"\n                >\n                  <LogOut className=\"w-4 h-4 mr-3\" />\n                  {isSigningOut ? \"Signing out...\" : \"Sign Out\"}\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Edit Profile Form */}\n          <Card className=\"lg:col-span-2 elegant-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-xl\">\n                <User className=\"w-6 h-6 mr-3 text-blue-600\" />\n                Personal Information\n              </CardTitle>\n              <CardDescription className=\"text-base\">\n                Update your personal details and travel preferences. Your email is automatically synced from your account.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {success && (\n                  <Alert className=\"border-green-200 bg-green-50\">\n                    <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                    <AlertDescription className=\"text-green-800\">{success}</AlertDescription>\n                  </Alert>\n                )}\n                \n                {error && (\n                  <Alert variant=\"destructive\">\n                    <AlertTriangle className=\"w-4 h-4\" />\n                    <AlertDescription>{error}</AlertDescription>\n                  </Alert>\n                  )}\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"firstName\">First Name</Label>\n                      <Input\n                        id=\"firstName\"\n                        placeholder=\"First name\"\n                        data-testid=\"input-firstname\"\n                        {...form.register(\"firstName\")}\n                      />\n                      {form.formState.errors.firstName && (\n                        <p className=\"text-sm text-red-600 dark:text-red-400\">\n                          {form.formState.errors.firstName.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"lastName\">Last Name</Label>\n                      <Input\n                        id=\"lastName\"\n                        placeholder=\"Last name\"\n                        data-testid=\"input-lastname\"\n                        {...form.register(\"lastName\")}\n                      />\n                      {form.formState.errors.lastName && (\n                        <p className=\"text-sm text-red-600 dark:text-red-400\">\n                          {form.formState.errors.lastName.message}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"username\">Username</Label>\n                    <Input\n                      id=\"username\"\n                      placeholder=\"Your username\"\n                      data-testid=\"input-username\"\n                      {...form.register(\"username\")}\n                    />\n                    {form.formState.errors.username && (\n                      <p className=\"text-sm text-red-600 dark:text-red-400\">\n                        {form.formState.errors.username.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"phone\">Phone Number</Label>\n                      <Input\n                        id=\"phone\"\n                        placeholder=\"Your phone number\"\n                        data-testid=\"input-phone\"\n                        {...form.register(\"phone\")}\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"dateOfBirth\">Date of Birth</Label>\n                      <Input\n                        id=\"dateOfBirth\"\n                        type=\"date\"\n                        data-testid=\"input-dob\"\n                        {...form.register(\"dateOfBirth\")}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"nationality\">Nationality</Label>\n                    <Input\n                      id=\"nationality\"\n                      placeholder=\"Your nationality\"\n                      data-testid=\"input-nationality\"\n                      {...form.register(\"nationality\")}\n                    />\n                  </div>\n\n                  {/* Email Display (Read-only) */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <div className=\"flex\">\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={user.email}\n                        disabled\n                        className=\"bg-gray-50 border-gray-200 text-gray-500\"\n                        data-testid=\"display-email\"\n                      />\n                      <div className=\"ml-3 flex items-center\">\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          Auto-synced\n                        </Badge>\n                      </div>\n                    </div>\n                    <p className=\"text-xs text-gray-500\">\n                      Your email is automatically managed by your account and cannot be changed here.\n                    </p>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"profileImageUrl\">Profile Image URL</Label>\n                    <Input\n                      id=\"profileImageUrl\"\n                      type=\"url\"\n                      placeholder=\"https://example.com/your-image.jpg (or leave empty for auto-generated avatar)\"\n                      data-testid=\"input-profile-image\"\n                      {...form.register(\"profileImageUrl\")}\n                    />\n                    <p className=\"text-xs text-gray-500\">\n                      Leave empty to use an automatically generated avatar based on your initials.\n                    </p>\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={isUpdating}\n                    data-testid=\"button-save-profile\"\n                  >\n                    {isUpdating ? (\n                      \"Saving...\"\n                    ) : (\n                      <>\n                        <Save className=\"w-4 h-4 mr-2\" />\n                        Save Changes\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* My Bookings Section */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Calendar className=\"w-5 h-5 mr-2\" />\n                My Bookings\n              </CardTitle>\n              <CardDescription>\n                Manage your hotel and restaurant reservations\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {bookingsLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n                  <p className=\"mt-2 text-gray-600 dark:text-gray-400\">Loading your bookings...</p>\n                </div>\n              ) : bookings.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Calendar className=\"w-12 h-12 text-gray-400 dark:text-gray-600 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200 mb-2\">No Bookings Found</h3>\n                  <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                    You haven't made any bookings yet. Start exploring our hotels and restaurants!\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {bookings.slice(0, 3).map((booking) => (\n                    <div key={booking.id} className=\"border rounded-lg p-4 space-y-3\" data-testid={`profile-booking-${booking.id}`}>\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <img\n                            src={booking.propertyImageUrl || ''}\n                            alt={booking.propertyName || ''}\n                            className=\"w-12 h-12 rounded-lg object-cover\"\n                          />\n                          <div>\n                            <h4 className=\"font-medium text-gray-900 dark:text-white\" data-testid={`profile-booking-name-${booking.id}`}>\n                              {booking.propertyName}\n                            </h4>\n                            <div className=\"flex items-center text-gray-600 dark:text-gray-400 text-sm\">\n                              <MapPin className=\"w-4 h-4 mr-1\" />\n                              <span>{booking.propertyLocation}</span>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge \n                            variant={booking.status === 'confirmed' ? 'default' : 'destructive'}\n                            data-testid={`profile-booking-status-${booking.id}`}\n                          >\n                            {booking.status === 'confirmed' ? (\n                              <CheckCircle className=\"w-3 h-3 mr-1\" />\n                            ) : (\n                              <X className=\"w-3 h-3 mr-1\" />\n                            )}\n                            {booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}\n                          </Badge>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => downloadReceipt(booking)}\n                            data-testid={`profile-download-${booking.id}`}\n                          >\n                            <Download className=\"w-3 h-3 mr-1\" />\n                            Receipt\n                          </Button>\n                          {booking.status === 'confirmed' && (\n                            <Button\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              onClick={() => setBookingToCancel(booking)}\n                              data-testid={`profile-cancel-${booking.id}`}\n                            >\n                              <X className=\"w-4 h-4 mr-1\" />\n                              Cancel\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600 dark:text-gray-400\">Confirmation:</span>\n                          <span data-testid={`profile-booking-confirmation-${booking.id}`}>{booking.confirmationNumber}</span>\n                        </div>\n                        \n                        {booking.bookingType === 'hotel' && booking.checkIn && (\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600 dark:text-gray-400\">Check-in:</span>\n                            <span data-testid={`profile-booking-checkin-${booking.id}`}>{formatDate(booking.checkIn)}</span>\n                          </div>\n                        )}\n                        \n                        {booking.bookingType === 'restaurant' && booking.reservationDate && (\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600 dark:text-gray-400\">Date:</span>\n                            <span data-testid={`profile-booking-date-${booking.id}`}>{formatDate(booking.reservationDate)}</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                  \n                  {bookings.length > 3 && (\n                    <div className=\"text-center pt-4\">\n                      <a href=\"/my-bookings\" className=\"text-blue-600 dark:text-blue-400 hover:underline\">\n                        View all {bookings.length} bookings â\n                      </a>\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n        \n        <Footer />\n      </div>\n\n      {/* Cancel Booking Confirmation Dialog */}\n      <Dialog open={!!bookingToCancel} onOpenChange={() => setBookingToCancel(null)}>\n        <DialogContent data-testid=\"profile-cancel-dialog\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center text-red-600\">\n              <AlertTriangle className=\"w-5 h-5 mr-2\" />\n              Cancel Booking\n            </DialogTitle>\n            <DialogDescription>\n              Are you sure you want to cancel your booking at {bookingToCancel?.propertyName}? \n              This action cannot be undone.\n            </DialogDescription>\n          </DialogHeader>\n          \n          {bookingToCancel && (\n            <div className=\"space-y-4\">\n              <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4\">\n                <p className=\"font-medium text-red-800 dark:text-red-200\">\n                  Confirmation: {bookingToCancel.confirmationNumber}\n                </p>\n                <p className=\"text-sm text-red-600 dark:text-red-400 mt-1\">\n                  {bookingToCancel.bookingType === 'hotel' ? 'Hotel Reservation' : 'Restaurant Reservation'}\n                </p>\n              </div>\n\n              <div className=\"flex space-x-3\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setBookingToCancel(null)}\n                  className=\"flex-1\"\n                  data-testid=\"profile-cancel-dialog-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  onClick={handleCancelBooking}\n                  disabled={cancelBookingMutation.isPending}\n                  className=\"flex-1\"\n                  data-testid=\"profile-cancel-dialog-confirm\"\n                >\n                  {cancelBookingMutation.isPending ? \"Cancelling...\" : \"Confirm Cancel\"}\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":34274},"client/src/pages/sign-in.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { loginSchema, type LoginCredentials } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Eye, EyeOff, LogIn } from \"lucide-react\";\n\nexport default function SignIn() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState(\"\");\n  const { signIn, isSigningIn } = useAuth();\n\n  const form = useForm<LoginCredentials>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginCredentials) => {\n    try {\n      setError(\"\");\n      await signIn(data);\n      setLocation(\"/\");\n    } catch (error: any) {\n      const errorMessage = error && typeof error === 'object' && 'message' in error \n        ? error.message \n        : error?.toString?.() || \"Sign in failed\";\n      setError(errorMessage);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center section-bg-soft py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md elegant-card\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">Sign In</CardTitle>\n          <CardDescription className=\"text-center\">\n            Welcome back! Please sign in to your account\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                data-testid=\"input-email\"\n                {...form.register(\"email\")}\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-sm text-red-600 dark:text-red-400\">\n                  {form.formState.errors.email.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Enter your password\"\n                  data-testid=\"input-password\"\n                  {...form.register(\"password\")}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  data-testid=\"button-toggle-password\"\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              {form.formState.errors.password && (\n                <p className=\"text-sm text-red-600 dark:text-red-400\">\n                  {form.formState.errors.password.message}\n                </p>\n              )}\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isSigningIn}\n              data-testid=\"button-signin\"\n            >\n              {isSigningIn ? (\n                \"Signing in...\"\n              ) : (\n                <>\n                  <LogIn className=\"w-4 h-4 mr-2\" />\n                  Sign In\n                </>\n              )}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Don't have an account?{\" \"}\n              <Link\n                href=\"/sign-up\"\n                className=\"font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400\"\n                data-testid=\"link-signup\"\n              >\n                Sign up\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4830},"client/src/pages/sign-up.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserSchema, type InsertUser } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Eye, EyeOff, UserPlus } from \"lucide-react\";\n\nexport default function SignUp() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState(\"\");\n  const { signUp, isSigningUp } = useAuth();\n\n  const form = useForm<InsertUser>({\n    resolver: zodResolver(insertUserSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      username: \"\",\n      phone: \"\",\n      dateOfBirth: \"\",\n      nationality: \"\",\n    },\n  });\n\n  const onSubmit = async (data: InsertUser) => {\n    try {\n      setError(\"\");\n      await signUp(data);\n      setLocation(\"/\");\n    } catch (error: any) {\n      const errorMessage = error && typeof error === 'object' && 'message' in error \n        ? error.message \n        : error?.toString?.() || \"Sign up failed\";\n      setError(errorMessage);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center section-bg-soft py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-2xl elegant-card\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">Create Account</CardTitle>\n          <CardDescription className=\"text-center\">\n            Join BD Explorer and start your journey\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\">First Name</Label>\n                <Input\n                  id=\"firstName\"\n                  placeholder=\"First name\"\n                  data-testid=\"input-firstname\"\n                  {...form.register(\"firstName\")}\n                />\n                {form.formState.errors.firstName && (\n                  <p className=\"text-sm text-red-600 dark:text-red-400\">\n                    {form.formState.errors.firstName.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lastName\">Last Name</Label>\n                <Input\n                  id=\"lastName\"\n                  placeholder=\"Last name\"\n                  data-testid=\"input-lastname\"\n                  {...form.register(\"lastName\")}\n                />\n                {form.formState.errors.lastName && (\n                  <p className=\"text-sm text-red-600 dark:text-red-400\">\n                    {form.formState.errors.lastName.message}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                data-testid=\"input-email\"\n                {...form.register(\"email\")}\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-sm text-red-600 dark:text-red-400\">\n                  {form.formState.errors.email.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                placeholder=\"Choose a username\"\n                data-testid=\"input-username\"\n                {...form.register(\"username\")}\n              />\n              {form.formState.errors.username && (\n                <p className=\"text-sm text-red-600 dark:text-red-400\">\n                  {form.formState.errors.username.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Create a password\"\n                  data-testid=\"input-password\"\n                  {...form.register(\"password\")}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  data-testid=\"button-toggle-password\"\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              {form.formState.errors.password && (\n                <p className=\"text-sm text-red-600 dark:text-red-400\">\n                  {form.formState.errors.password.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Phone (Optional)</Label>\n                <Input\n                  id=\"phone\"\n                  placeholder=\"Your phone number\"\n                  data-testid=\"input-phone\"\n                  {...form.register(\"phone\")}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"dateOfBirth\">Date of Birth (Optional)</Label>\n                <Input\n                  id=\"dateOfBirth\"\n                  type=\"date\"\n                  data-testid=\"input-dob\"\n                  {...form.register(\"dateOfBirth\")}\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"nationality\">Nationality (Optional)</Label>\n              <Input\n                id=\"nationality\"\n                placeholder=\"Your nationality\"\n                data-testid=\"input-nationality\"\n                {...form.register(\"nationality\")}\n              />\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isSigningUp}\n              data-testid=\"button-signup\"\n            >\n              {isSigningUp ? (\n                \"Creating account...\"\n              ) : (\n                <>\n                  <UserPlus className=\"w-4 h-4 mr-2\" />\n                  Create Account\n                </>\n              )}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Already have an account?{\" \"}\n              <Link\n                href=\"/sign-in\"\n                className=\"font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400\"\n                data-testid=\"link-signin\"\n              >\n                Sign in\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7856},"client/src/components/destination-cards.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport type { Destination } from '@shared/schema';\n\ninterface DestinationCardsProps {\n  selectedDestination: Destination | null;\n  setSelectedDestination: (destination: Destination) => void;\n}\n\nexport default function DestinationCards({ selectedDestination, setSelectedDestination }: DestinationCardsProps) {\n  const { data: destinations = [], isLoading } = useQuery<Destination[]>({\n    queryKey: ['/api/destinations'],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 md:gap-6\">\n            {[...Array(4)].map((_, index) => (\n              <div key={index} className=\"relative rounded-2xl overflow-hidden shadow-lg animate-pulse\">\n                <div className=\"w-full h-32 md:h-48 bg-gray-300\"></div>\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent flex items-end\">\n                  <div className=\"p-3 md:p-4 w-full\">\n                    <div className=\"h-4 bg-gray-400 rounded w-2/3 mx-auto\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  if (destinations.length === 0) {\n    return (\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <p className=\"text-xl text-gray-600\">No destinations available at the moment.</p>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-16 section-bg-cool\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 md:gap-6\">\n          {destinations.slice(0, 4).map((destination) => (\n            <div \n              key={destination.id}\n              className={`relative rounded-2xl overflow-hidden shadow-lg cursor-pointer transition-all duration-500 transform hover:scale-105 ${\n                selectedDestination?.id === destination.id \n                  ? 'ring-4 ring-primary/50 scale-105' \n                  : 'hover:shadow-2xl'\n              }`}\n              onClick={() => setSelectedDestination(destination)}\n              data-testid={`card-destination-${destination.id}`}\n            >\n              <img \n                src={destination.imageUrl} \n                alt={destination.name} \n                className=\"w-full h-32 md:h-48 object-cover transition-transform duration-500\"\n                data-testid={`img-destination-${destination.id}`}\n              />\n              {/* Overlay with destination name */}\n              <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent flex items-end\">\n                <div className=\"p-3 md:p-4 w-full\">\n                  <h3 className=\"text-white font-semibold text-sm md:text-lg text-center\" data-testid={`text-destination-name-${destination.id}`}>\n                    {destination.name}\n                  </h3>\n                </div>\n              </div>\n              {/* Selected indicator */}\n              {selectedDestination?.id === destination.id && (\n                <div className=\"absolute top-2 right-2 w-3 h-3 bg-primary rounded-full shadow-lg\"></div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":3522},"client/src/pages/destination-detail.tsx":{"content":"import { Star, MapPin, ArrowLeft, Users, Calendar, DollarSign, Utensils, Building2, MessageCircle, Camera, Clock, Map, Info, ShoppingBag, UtensilsCrossed, Landmark, Camera as CameraIcon, Heart, Music } from 'lucide-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useRoute, useLocation, Link } from 'wouter';\nimport type { Destination, Hotel, Restaurant } from '@shared/schema';\nimport Navigation from '../components/navigation';\nimport Footer from '../components/footer';\nimport { Button } from '@/components/ui/button';\n\nexport default function DestinationDetail() {\n  const [, params] = useRoute('/destinations/:id');\n  const id = params?.id;\n  const [, setLocation] = useLocation();\n\n  const { data: destination, isLoading: destinationLoading, error: destinationError } = useQuery<Destination>({\n    queryKey: ['/api/destinations', id],\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const { data: hotels = [], isLoading: hotelsLoading } = useQuery<Hotel[]>({\n    queryKey: ['/api/hotels'],\n    staleTime: 10 * 60 * 1000, // 10 minutes\n    enabled: !!destination, // Only fetch when destination is loaded\n  });\n\n  const { data: restaurants = [], isLoading: restaurantsLoading } = useQuery<Restaurant[]>({\n    queryKey: ['/api/restaurants'],\n    staleTime: 10 * 60 * 1000, // 10 minutes\n    enabled: !!destination, // Only fetch when destination is loaded\n  });\n\n  if (destinationLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navigation />\n        <div className=\"pt-24 pb-16\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"animate-pulse space-y-4\">\n              <div className=\"h-48 bg-gray-200 rounded-xl\"></div>\n              <div className=\"h-8 bg-gray-200 rounded w-1/2\"></div>\n              <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (destinationError || !destination) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navigation />\n        <div className=\"pt-24 pb-16\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h1 className=\"text-3xl font-bold text-gray-800 mb-4\">Destination not found</h1>\n            <p className=\"text-gray-600 mb-8\">The destination you're looking for doesn't exist.</p>\n            <Link href=\"/destinations\">\n              <Button>Back to Destinations</Button>\n            </Link>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  // Filter hotels and restaurants relevant to this destination\n  const relevantHotels = hotels.filter(hotel => {\n    if (!hotel?.location || !destination?.district || !destination?.name) return false;\n    \n    const hotelLocation = hotel.location.toLowerCase();\n    const destinationDistrict = destination.district.toLowerCase();\n    const destinationName = destination.name.toLowerCase();\n    const hotelLocationParts = hotelLocation.split(' â¢');\n    const hotelMainLocation = hotelLocationParts[0]?.toLowerCase() || '';\n    \n    return hotelLocation.includes(destinationDistrict) ||\n           hotelLocation.includes(destinationName) ||\n           destinationDistrict.includes(hotelMainLocation) ||\n           destinationName.includes(hotelMainLocation);\n  }).slice(0, 6);\n\n  const relevantRestaurants = restaurants.filter(restaurant => {\n    if (!restaurant?.location || !destination?.district || !destination?.name) return false;\n    \n    const restaurantLocation = restaurant.location.toLowerCase();\n    const destinationDistrict = destination.district.toLowerCase();\n    const destinationName = destination.name.toLowerCase();\n    const restaurantLocationParts = restaurantLocation.split(' â¢');\n    const restaurantMainLocation = restaurantLocationParts[0]?.toLowerCase() || '';\n    \n    return restaurantLocation.includes(destinationDistrict) ||\n           restaurantLocation.includes(destinationName) ||\n           destinationDistrict.includes(restaurantMainLocation) ||\n           destinationName.includes(restaurantMainLocation);\n  }).slice(0, 6);\n\n  // Generate additional images for gallery based on destination type\n  const getDestinationImages = (destination: Destination) => {\n    const fallbackImage = 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600';\n    \n    // Special case for Cox's Bazar - use authentic images\n    if (destination.name === \"Cox's Bazar\") {\n      return [\n        '/assets/coxs-bazar-main.jpg?v=2',\n        '/assets/coxs-bazar-sunset.jpg',\n        '/assets/coxs-bazar-aerial.jpg',\n        '/assets/coxs-bazar-coastline.webp',\n        '/assets/coxs-bazar-crabs.jpg'\n      ];\n    }\n    \n    // Special case for Lalbagh Fort - use authentic images\n    if (destination.name === 'Lalbagh Fort') {\n      return [\n        destination.imageUrl || fallbackImage,\n        '/assets/lalbagh-fort-sunset.webp',\n        '/assets/lalbagh-fort-archway.webp',\n        '/assets/lalbagh-fort-aerial.jpg'\n      ];\n    }\n    \n    // Special case for Sundarbans - use authentic images\n    if (destination.name === 'Sundarbans') {\n      return [\n        destination.imageUrl || fallbackImage, // Main image with deer\n        '/attached_assets/photo-1549300461-11c5b94e8855_1755679381010.jpg', // Peaceful water reflection\n        '/attached_assets/5f0ef1e0eb333-Sundarbans_Travel_1755679381011.jpg', // Mangrove waterway\n        '/attached_assets/tiger-sundarbans_1755679417997.jpg' // Royal Bengal Tiger\n      ];\n    }\n    \n    // Special case for Sylhet Tea Gardens - use authentic images\n    if (destination.name === 'Sylhet Tea Gardens') {\n      return [\n        destination.imageUrl || fallbackImage, // Main image with tea workers\n        '/attached_assets/maxresdefault_1755680607560.jpg', // Close-up tea plants with trees\n        '/attached_assets/283-2834105_sylhet-tea-garden-bangladesh_1755680607560.jpg', // Aerial view with small house\n        '/attached_assets/sylhet-a-tranquil-oasis-of-tea-gardens-waterfalls-and-spiritual-serenity-in-northeast-bangladesh_1755680607561.jpg' // Path through tea garden\n      ];\n    }\n    \n    // Special case for Saint Martin Island - use authentic images\n    if (destination.name === 'Saint Martin Island') {\n      return [\n        destination.imageUrl || fallbackImage, // Main image with palm tree and boats\n        '/attached_assets/Saint-Martin-Island-Bangladesh-5_1755681418236.jpg', // Single boat on beach\n        '/attached_assets/Saint_Martins_Island_with_boats_in_foreground_1755681418237.jpg', // Multiple boats with beach\n        '/attached_assets/sunset-naf-river-2048x1152_1755681418238.jpg', // Golden sunset over water\n        '/attached_assets/boat-saint-martins-island-1920x1080_1755681560767.jpg' // Traditional boat in crystal blue water\n      ];\n    }\n    \n    // Special case for Chittagong Hill Tracts - use authentic images\n    if (destination.name === 'Chittagong Hill Tracts') {\n      return [\n        destination.imageUrl || fallbackImage, // Main image with misty hills and banana trees\n        '/attached_assets/png_16x9_1755682005506.jpg', // Golden mountain landscape with mist\n        '/attached_assets/R_1755682005507.jpg', // Green hills with lush vegetation\n        '/attached_assets/Rt_1755682005507.jpg', // Lake view surrounded by hills\n        '/attached_assets/24497019445_a47d640307_b_1755682005508.jpg' // Golden sunrise over hills with trees\n      ];\n    }\n    \n    const baseImages = [\n      destination.imageUrl || fallbackImage,\n      'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      'https://images.unsplash.com/photo-1559827260-dc66d52bef19?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600',\n      'https://images.unsplash.com/photo-1441974231531-c6227db76b6e?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600'\n    ];\n    return baseImages;\n  };\n\n  // Get detailed information based on destination\n  const getDestinationDetails = (destination: Destination) => {\n    const details = {\n      history: `${destination.name} has a rich history spanning centuries. This magnificent destination showcases the cultural heritage and natural beauty that Bangladesh is renowned for. From ancient architectural marvels to pristine natural landscapes, this location offers visitors a glimpse into the country's diverse cultural tapestry.`,\n      \n      bestTime: destination.name.toLowerCase().includes('beach') || destination.name.toLowerCase().includes('sea') \n        ? \"October to March is the ideal time to visit, with pleasant weather and calm seas perfect for beach activities.\"\n        : destination.name.toLowerCase().includes('hill') || destination.name.toLowerCase().includes('valley')\n        ? \"November to February offers the best weather with clear skies and comfortable temperatures for trekking.\"\n        : \"October to April provides the most comfortable weather conditions for sightseeing and outdoor activities.\",\n      \n      thingsToDo: [\n        { activity: 'Explore local markets and traditional crafts', icon: ShoppingBag, color: 'bg-purple-100 text-purple-600' },\n        { activity: 'Experience authentic Bengali cuisine', icon: UtensilsCrossed, color: 'bg-orange-100 text-orange-600' },\n        { activity: 'Visit historical landmarks and monuments', icon: Landmark, color: 'bg-blue-100 text-blue-600' },\n        { activity: 'Take scenic photographs of the landscape', icon: CameraIcon, color: 'bg-green-100 text-green-600' },\n        { activity: 'Interact with friendly local communities', icon: Heart, color: 'bg-red-100 text-red-600' },\n        { activity: 'Enjoy cultural performances and festivals', icon: Music, color: 'bg-yellow-100 text-yellow-600' }\n      ],\n      \n      travelTips: [\n        'Carry local currency (Bangladeshi Taka) for small purchases',\n        'Respect local customs and dress modestly',\n        'Try local street food from reputable vendors',\n        'Learn basic Bengali phrases for better interaction',\n        'Book accommodations in advance during peak season',\n        'Keep emergency contacts and travel documents handy'\n      ],\n      \n      quickFacts: {\n        district: destination.district,\n        country: destination.country,\n        rating: destination.rating,\n        priceFrom: destination.priceFrom,\n        bestMonths: destination.name.toLowerCase().includes('beach') ? 'Nov-Mar' : 'Oct-Apr',\n        duration: '2-3 days recommended'\n      }\n    };\n    return details;\n  };\n\n  const destinationImages = getDestinationImages(destination);\n  const destinationDetails = getDestinationDetails(destination);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <div className=\"relative h-96 pt-16\">\n        <div \n          className=\"absolute inset-0 bg-cover bg-center\"\n          style={{ \n            backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), url(${destinationImages[0] || 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080'})` \n          }}\n        >\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"text-center text-white max-w-4xl px-4\">\n              <div className=\"flex items-center justify-center mb-4\">\n              </div>\n              <h1 className=\"text-4xl md:text-5xl font-bold mb-4\" data-testid=\"text-destination-title\">{destination.name}</h1>\n              <div className=\"flex items-center justify-center mb-4\">\n                <MapPin className=\"w-5 h-5 mr-2\" />\n                <span className=\"text-xl\">{destination.district}, {destination.country}</span>\n              </div>\n              <div className=\"flex items-center justify-center space-x-6\">\n                <div className=\"flex items-center\">\n                  <Star className=\"w-5 h-5 text-yellow-400 mr-1\" />\n                  <span className=\"text-lg\">{destination.rating}</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <DollarSign className=\"w-5 h-5 mr-1\" />\n                  <span className=\"text-lg\">From à§³{destination.priceFrom}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        {/* Image Gallery */}\n        <div className=\"bg-white rounded-2xl shadow-lg p-8 mb-12\">\n          <div className=\"flex items-center mb-6\">\n            <Camera className=\"w-8 h-8 text-primary mr-3\" />\n            <h2 className=\"text-3xl font-bold text-gray-800\">Photo Gallery</h2>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {destinationImages.map((image, index) => (\n              <div \n                key={index} \n                className=\"relative overflow-hidden rounded-xl aspect-video group cursor-pointer\"\n                data-testid={`img-gallery-${index}`}\n              >\n                <img \n                  src={image} \n                  alt={`${destination.name} view ${index + 1}`}\n                  className=\"w-full h-full object-cover transition-transform duration-300 group-hover:scale-110\"\n                  onError={(e) => {\n                    const target = e.target as HTMLImageElement;\n                    target.src = 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080';\n                  }}\n                />\n                <div className=\"absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center\">\n                  <Camera className=\"w-8 h-8 text-white\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Description & Details */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-12\">\n          {/* Main Description */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"bg-white rounded-2xl shadow-lg p-8 mb-8\">\n              <h2 className=\"text-3xl font-bold text-gray-800 mb-6\">About {destination.name}</h2>\n              <p className=\"text-lg text-gray-600 leading-relaxed mb-6\" data-testid=\"text-destination-description\">\n                {destination.description}\n              </p>\n              <p className=\"text-gray-600 leading-relaxed\">\n                {destinationDetails.history}\n              </p>\n            </div>\n\n            {/* Things to Do */}\n            <div className=\"bg-white rounded-2xl shadow-lg p-8 mb-8\">\n              <div className=\"flex items-center mb-6\">\n                <Map className=\"w-6 h-6 text-primary mr-3\" />\n                <h3 className=\"text-2xl font-bold text-gray-800\">Things to Do</h3>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {destinationDetails.thingsToDo.map((item, index) => {\n                  const IconComponent = item.icon;\n                  return (\n                    <div key={index} className=\"flex items-center p-4 bg-gradient-to-r from-white to-gray-50 rounded-xl shadow-sm hover:shadow-md transition-all duration-300 transform hover:scale-105 border border-gray-100\">\n                      <div className={`w-12 h-12 ${item.color} rounded-xl flex items-center justify-center mr-4 shadow-sm`}>\n                        <IconComponent className=\"w-6 h-6\" />\n                      </div>\n                      <span className=\"text-gray-700 font-medium leading-relaxed\">{item.activity}</span>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Travel Tips */}\n            <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n              <div className=\"flex items-center mb-6\">\n                <Info className=\"w-6 h-6 text-primary mr-3\" />\n                <h3 className=\"text-2xl font-bold text-gray-800\">Travel Tips</h3>\n              </div>\n              <div className=\"space-y-3\">\n                {destinationDetails.travelTips.map((tip, index) => (\n                  <div key={index} className=\"flex items-start\">\n                    <div className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-semibold mr-3 mt-0.5\">\n                      {index + 1}\n                    </div>\n                    <span className=\"text-gray-700\">{tip}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Sidebar Info */}\n          <div className=\"space-y-8\">\n            {/* Quick Facts */}\n            <div className=\"bg-white rounded-2xl shadow-lg p-6\">\n              <h3 className=\"text-xl font-bold text-gray-800 mb-4\">Quick Facts</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-gray-600\">Location</span>\n                  <span className=\"font-semibold\">{destinationDetails.quickFacts.district}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-gray-600\">Rating</span>\n                  <div className=\"flex items-center\">\n                    <Star className=\"w-4 h-4 text-yellow-400 mr-1\" />\n                    <span className=\"font-semibold\">{destinationDetails.quickFacts.rating}</span>\n                  </div>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-gray-600\">Starting Price</span>\n                  <span className=\"font-semibold text-primary\">à§³{destinationDetails.quickFacts.priceFrom}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-gray-600\">Best Time</span>\n                  <span className=\"font-semibold\">{destinationDetails.quickFacts.bestMonths}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-gray-600\">Duration</span>\n                  <span className=\"font-semibold\">{destinationDetails.quickFacts.duration}</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Best Time to Visit */}\n            <div className=\"bg-white rounded-2xl shadow-lg p-6\">\n              <div className=\"flex items-center mb-4\">\n                <Clock className=\"w-5 h-5 text-primary mr-2\" />\n                <h3 className=\"text-xl font-bold text-gray-800\">Best Time to Visit</h3>\n              </div>\n              <p className=\"text-gray-600 leading-relaxed\">{destinationDetails.bestTime}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Hotels Section - Only show if there are relevant hotels */}\n        {(hotelsLoading || relevantHotels.length > 0) && (\n          <section className=\"mb-16\">\n            <div className=\"flex items-center mb-8\">\n              <Building2 className=\"w-8 h-8 text-primary mr-3\" />\n              <h2 className=\"text-3xl font-bold text-gray-800\">Hotels & Accommodations in {destination.district}</h2>\n            </div>\n            \n            {hotelsLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {[...Array(2)].map((_, i) => (\n                  <div key={i} className=\"bg-white rounded-xl overflow-hidden shadow-sm animate-pulse\">\n                    <div className=\"w-full h-32 bg-gray-200\"></div>\n                    <div className=\"p-4\">\n                      <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-3/4\"></div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {relevantHotels.map((hotel) => (\n                  <div \n                    key={hotel.id} \n                    className=\"bg-white rounded-2xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105\"\n                    data-testid={`card-hotel-${hotel.id}`}\n                  >\n                    <div className=\"relative\">\n                      <img \n                        src={hotel.imageUrl} \n                        alt={hotel.name} \n                        className=\"w-full h-56 object-cover\"\n                      />\n                      <div className=\"absolute top-4 right-4 bg-white/90 rounded-full px-3 py-1\">\n                        <div className=\"flex items-center\">\n                          <Star className=\"w-4 h-4 text-yellow-400 mr-1\" />\n                          <span className=\"text-sm font-semibold\">{hotel.rating}</span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"p-6\">\n                      <h3 className=\"text-xl font-bold mb-2 text-gray-800\" data-testid={`text-hotel-name-${hotel.id}`}>\n                        {hotel.name}\n                      </h3>\n                      \n                      <div className=\"flex items-center mb-3\">\n                        <MapPin className=\"w-4 h-4 text-gray-400 mr-1\" />\n                        <span className=\"text-sm text-gray-500\">{hotel.location}</span>\n                      </div>\n                      \n                      <p className=\"text-gray-600 mb-4 line-clamp-2\" data-testid={`text-hotel-description-${hotel.id}`}>\n                        {hotel.description}\n                      </p>\n                      \n                      <div className=\"flex flex-wrap gap-2 mb-4\">\n                        {hotel.amenities.slice(0, 3).map((amenity, index) => (\n                          <span \n                            key={index} \n                            className=\"bg-blue-100 text-blue-700 px-2 py-1 rounded-full text-xs\"\n                          >\n                            {amenity}\n                          </span>\n                        ))}\n                      </div>\n                      \n                      <div className=\"flex justify-between items-center pt-4 border-t border-gray-100\">\n                        <div>\n                          <p className=\"text-sm text-gray-500\">Per night</p>\n                          <p className=\"text-2xl font-bold text-primary\" data-testid={`text-hotel-price-${hotel.id}`}>\n                            à§³{hotel.pricePerNight}\n                          </p>\n                        </div>\n                        <Button \n                          className=\"bg-primary hover:bg-primary/90\"\n                          data-testid={`button-book-hotel-${hotel.id}`}\n                        >\n                          Book Now\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </section>\n        )}\n\n        {/* Restaurants Section */}\n        <section>\n          <div className=\"flex items-center mb-8\">\n            <Utensils className=\"w-8 h-8 text-primary mr-3\" />\n            <h2 className=\"text-3xl font-bold text-gray-800\">Restaurants & Dining in {destination.district}</h2>\n          </div>\n          \n          {restaurantsLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(2)].map((_, i) => (\n                <div key={i} className=\"bg-white rounded-xl overflow-hidden shadow-sm animate-pulse\">\n                  <div className=\"w-full h-32 bg-gray-200\"></div>\n                  <div className=\"p-4\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : relevantRestaurants.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {relevantRestaurants.map((restaurant) => (\n                <div \n                  key={restaurant.id} \n                  className=\"bg-white rounded-2xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105\"\n                  data-testid={`card-restaurant-${restaurant.id}`}\n                >\n                  <div className=\"relative\">\n                    <img \n                      src={restaurant.imageUrl} \n                      alt={restaurant.name} \n                      className=\"w-full h-56 object-cover\"\n                    />\n                    <div className=\"absolute top-4 right-4 bg-white/90 rounded-full px-3 py-1\">\n                      <div className=\"flex items-center\">\n                        <Star className=\"w-4 h-4 text-yellow-400 mr-1\" />\n                        <span className=\"text-sm font-semibold\">{restaurant.rating}</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"p-6\">\n                    <h3 className=\"text-xl font-bold mb-2 text-gray-800\" data-testid={`text-restaurant-name-${restaurant.id}`}>\n                      {restaurant.name}\n                    </h3>\n                    \n                    <div className=\"flex items-center mb-3\">\n                      <MapPin className=\"w-4 h-4 text-gray-400 mr-1\" />\n                      <span className=\"text-sm text-gray-500\">{restaurant.location}</span>\n                    </div>\n                    \n                    <p className=\"text-gray-600 mb-4 line-clamp-2\" data-testid={`text-restaurant-description-${restaurant.id}`}>\n                      {restaurant.description}\n                    </p>\n                    \n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div>\n                        <span className=\"text-sm text-gray-500 block\">Cuisine</span>\n                        <span className=\"font-semibold text-primary\">{restaurant.cuisine}</span>\n                      </div>\n                      <div>\n                        <span className=\"text-sm text-gray-500 block\">Price Range</span>\n                        <span className=\"font-semibold text-green-600\">{restaurant.priceRange}</span>\n                      </div>\n                    </div>\n                    \n                    {/* Reviews */}\n                    {restaurant.reviews.length > 0 && (\n                      <div className=\"border-t border-gray-100 pt-4\">\n                        <div className=\"flex items-center mb-3\">\n                          <MessageCircle className=\"w-4 h-4 text-gray-400 mr-2\" />\n                          <span className=\"text-sm font-semibold text-gray-700\">Reviews</span>\n                        </div>\n                        <div className=\"space-y-2 max-h-24 overflow-y-auto\">\n                          {restaurant.reviews.slice(0, 2).map((review, index) => (\n                            <p \n                              key={index} \n                              className=\"text-sm text-gray-600 italic\"\n                              data-testid={`text-restaurant-review-${restaurant.id}-${index}`}\n                            >\n                              \"{review}\"\n                            </p>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <Utensils className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n              <p className=\"text-lg text-gray-500\">No restaurants available for this destination</p>\n            </div>\n          )}\n        </section>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":28180},"client/src/pages/booking.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLocation, useRoute, Link } from 'wouter';\nimport { Calendar, Clock, Users, MapPin, Star, CreditCard, ArrowLeft, Check, Phone, Download, X } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { apiRequest } from '@/lib/queryClient';\nimport Navigation from '@/components/navigation';\nimport Footer from '@/components/footer';\nimport type { Hotel, Restaurant } from '@shared/schema';\n\nexport default function Booking() {\n  const [, params] = useRoute('/booking/:type/:id');\n  const { toast } = useToast();\n  const { user, isAuthenticated } = useAuth();\n  \n  // Booking form state\n  const [selectedRoom, setSelectedRoom] = useState<string>('');\n  const [checkIn, setCheckIn] = useState('');\n  const [checkOut, setCheckOut] = useState('');\n  const [guests, setGuests] = useState('2');\n  const [bookingDate, setBookingDate] = useState('');\n  const [bookingTime, setBookingTime] = useState('');\n  const [partySize, setPartySize] = useState('2');\n  const [customerName, setCustomerName] = useState('');\n  const [customerEmail, setCustomerEmail] = useState('');\n  const [customerPhone, setCustomerPhone] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showSuccessDialog, setShowSuccessDialog] = useState(false);\n  const [bookingDetails, setBookingDetails] = useState<any>(null);\n\n  const bookingType = params?.type; // 'hotel' or 'restaurant'\n  const itemId = params?.id;\n\n  // Fetch hotel data if booking type is hotel\n  const { data: hotels = [] } = useQuery<Hotel[]>({\n    queryKey: ['/api/hotels'],\n    enabled: bookingType === 'hotel',\n  });\n\n  // Fetch restaurant data if booking type is restaurant\n  const { data: restaurants = [] } = useQuery<Restaurant[]>({\n    queryKey: ['/api/restaurants'],\n    enabled: bookingType === 'restaurant',\n  });\n\n  const selectedHotel = bookingType === 'hotel' ? hotels.find(h => h.id === itemId) : null;\n  const selectedRestaurant = bookingType === 'restaurant' ? restaurants.find(r => r.id === itemId) : null;\n\n  // Generate room types for hotels\n  const getRoomTypes = (hotel: Hotel) => {\n    const basePrice = hotel.pricePerNight;\n    return [\n      {\n        id: 'standard',\n        type: 'Standard Room',\n        price: basePrice,\n        features: ['Free WiFi', 'Air Conditioning', 'Private Bathroom', 'TV'],\n        available: Math.floor(Math.random() * 5) + 3,\n      },\n      {\n        id: 'deluxe',\n        type: 'Deluxe Room', \n        price: Math.floor(basePrice * 1.3),\n        features: ['Free WiFi', 'Air Conditioning', 'Private Bathroom', 'TV', 'Mini Bar', 'City View'],\n        available: Math.floor(Math.random() * 4) + 2,\n      },\n      {\n        id: 'suite',\n        type: 'Suite',\n        price: Math.floor(basePrice * 1.8),\n        features: ['Free WiFi', 'Air Conditioning', 'Private Bathroom', 'TV', 'Mini Bar', 'Ocean View', 'Living Area', 'Balcony'],\n        available: Math.floor(Math.random() * 3) + 1,\n      },\n    ];\n  };\n\n  // Generate time slots for restaurants\n  const getTimeSlots = () => {\n    const slots = [];\n    for (let hour = 11; hour <= 22; hour++) {\n      for (let minute = 0; minute < 60; minute += 30) {\n        const timeString = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n        const displayTime = new Date(`2000-01-01T${timeString}`).toLocaleTimeString('en-US', {\n          hour: 'numeric',\n          minute: '2-digit',\n          hour12: true\n        });\n        slots.push({ value: timeString, label: displayTime });\n      }\n    }\n    return slots;\n  };\n\n  // Set default dates and user data\n  useEffect(() => {\n    const today = new Date();\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    \n    const todayStr = today.toISOString().split('T')[0];\n    const tomorrowStr = tomorrow.toISOString().split('T')[0];\n\n    if (bookingType === 'hotel') {\n      setCheckIn(tomorrowStr);\n      const dayAfterTomorrow = new Date(tomorrow);\n      dayAfterTomorrow.setDate(dayAfterTomorrow.getDate() + 1);\n      setCheckOut(dayAfterTomorrow.toISOString().split('T')[0]);\n    } else {\n      setBookingDate(todayStr);\n    }\n\n    // Pre-fill form if user is authenticated\n    if (user && isAuthenticated) {\n      setCustomerName(`${user.firstName} ${user.lastName}`);\n      setCustomerEmail(user.email);\n      setCustomerPhone(user.phone || '');\n    }\n  }, [bookingType, user, isAuthenticated]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      if (!currentItem) {\n        throw new Error('Property information not found');\n      }\n      \n      const confirmationNumber = `BDE${Math.random().toString(36).substr(2, 8).toUpperCase()}`;\n      \n      // Prepare booking data for both API and local display\n      const bookingRequestData = {\n        // Required fields\n        itemId: currentItem.id,\n        itemType: bookingType,\n        customerName,\n        email: customerEmail,\n        phone: customerPhone,\n        status: 'confirmed',\n        // Property information\n        propertyName: currentItem.name,\n        propertyLocation: currentItem.location,\n        propertyImageUrl: currentItem.imageUrl,\n        propertyPhone: currentItem.phone,\n        confirmationNumber,\n        bookingType,\n        ...(bookingType === 'hotel' && selectedHotel && {\n          roomType: getRoomTypes(selectedHotel).find(r => r.id === selectedRoom)?.type,\n          checkIn: checkIn,\n          checkOut: checkOut,\n          nights: getNights(),\n          guests: parseInt(guests),\n          totalAmount: calculateTotal(),\n        }),\n        ...(bookingType === 'restaurant' && selectedRestaurant && {\n          reservationDate: bookingDate,\n          reservationTime: bookingTime,\n          partySize: parseInt(partySize),\n          cuisine: selectedRestaurant.cuisine,\n          priceRange: selectedRestaurant.priceRange,\n        })\n      };\n\n      // Save booking to database if user is authenticated\n      if (isAuthenticated) {\n        await apiRequest('POST', '/api/bookings', bookingRequestData);\n      }\n\n      // Create display data for dialog\n      const bookingData = {\n        confirmationNumber,\n        bookingType,\n        property: currentItem,\n        customer: {\n          name: customerName,\n          email: customerEmail,\n          phone: customerPhone,\n        },\n        bookingDate: new Date().toLocaleDateString(),\n        bookingTime: new Date().toLocaleTimeString(),\n        ...(bookingType === 'hotel' && selectedHotel && {\n          hotel: {\n            roomType: getRoomTypes(selectedHotel).find(r => r.id === selectedRoom)?.type,\n            checkIn: checkIn,\n            checkOut: checkOut,\n            nights: getNights(),\n            guests: parseInt(guests),\n            total: calculateTotal(),\n          }\n        }),\n        ...(bookingType === 'restaurant' && selectedRestaurant && {\n          restaurant: {\n            date: bookingDate,\n            time: bookingTime,\n            partySize: parseInt(partySize),\n            cuisine: selectedRestaurant.cuisine,\n            priceRange: selectedRestaurant.priceRange,\n          }\n        })\n      };\n\n      setBookingDetails(bookingData);\n      setShowSuccessDialog(true);\n      \n    } catch (error: any) {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"There was an error processing your booking. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Calculate total for hotel bookings\n  const calculateTotal = () => {\n    if (bookingType === 'hotel' && selectedHotel && selectedRoom && checkIn && checkOut) {\n      const roomTypes = getRoomTypes(selectedHotel);\n      const room = roomTypes.find(r => r.id === selectedRoom);\n      if (room) {\n        const checkInDate = new Date(checkIn);\n        const checkOutDate = new Date(checkOut);\n        const nights = Math.max(Math.ceil((checkOutDate.getTime() - checkInDate.getTime()) / (1000 * 60 * 60 * 24)), 1);\n        return room.price * nights;\n      }\n    }\n    return 0;\n  };\n\n  const getNights = () => {\n    if (checkIn && checkOut) {\n      const checkInDate = new Date(checkIn);\n      const checkOutDate = new Date(checkOut);\n      const nights = Math.ceil((checkOutDate.getTime() - checkInDate.getTime()) / (1000 * 60 * 60 * 24));\n      return Math.max(nights, 1); // Ensure at least 1 night\n    }\n    return 1;\n  };\n\n  const downloadReceipt = () => {\n    if (!bookingDetails) return;\n\n    const receiptContent = `\nBD Explorer - Booking Receipt\n=====================================\n\nConfirmation Number: ${bookingDetails.confirmationNumber}\nBooking Date: ${bookingDetails.bookingDate} at ${bookingDetails.bookingTime}\n\nProperty Details:\n- Name: ${bookingDetails.property.name}\n- Location: ${bookingDetails.property.location}\n- Rating: ${bookingDetails.property.rating}/5\n- Phone: ${bookingDetails.property.phone}\n\nCustomer Information:\n- Name: ${bookingDetails.customer.name}\n- Email: ${bookingDetails.customer.email}\n- Phone: ${bookingDetails.customer.phone}\n\n${bookingDetails.bookingType === 'hotel' ? `\nHotel Booking Details:\n- Room Type: ${bookingDetails.hotel?.roomType}\n- Check-in: ${new Date(bookingDetails.hotel?.checkIn || '').toLocaleDateString()}\n- Check-out: ${new Date(bookingDetails.hotel?.checkOut || '').toLocaleDateString()}\n- Number of Nights: ${bookingDetails.hotel?.nights}\n- Number of Guests: ${bookingDetails.hotel?.guests}\n- Total Amount: à§³${bookingDetails.hotel?.total?.toLocaleString()}\n` : `\nRestaurant Reservation Details:\n- Date: ${new Date(bookingDetails.restaurant?.date || '').toLocaleDateString()}\n- Time: ${bookingDetails.restaurant?.time ? new Date(`2000-01-01T${bookingDetails.restaurant.time}`).toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true }) : ''}\n- Party Size: ${bookingDetails.restaurant?.partySize} people\n- Cuisine: ${bookingDetails.restaurant?.cuisine}\n- Price Range: ${bookingDetails.restaurant?.priceRange}\n`}\n\nThank you for choosing BD Explorer!\nFor support, contact us at support@bangladeshexplorer.com\n\n=====================================\n    `;\n\n    const blob = new Blob([receiptContent], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `Bangladesh-Explorer-Receipt-${bookingDetails.confirmationNumber}.txt`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const handleDialogClose = () => {\n    setShowSuccessDialog(false);\n    setBookingDetails(null);\n    // Reset form after successful booking\n    setCustomerName('');\n    setCustomerEmail('');\n    setCustomerPhone('');\n    if (bookingType === 'hotel') {\n      setSelectedRoom('');\n    } else {\n      setBookingTime('');\n    }\n  };\n\n  if (!bookingType || !itemId) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navigation />\n        <div className=\"pt-24 pb-16\">\n          <div className=\"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h1 className=\"text-3xl font-bold text-gray-800 mb-4\">Invalid Booking Request</h1>\n            <p className=\"text-gray-600 mb-8\">The booking information is missing or invalid.</p>\n            <Link href=\"/hotels\">\n              <Button>Return to Hotels</Button>\n            </Link>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (bookingType === 'hotel' && !selectedHotel) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navigation />\n        <div className=\"pt-24 pb-16\">\n          <div className=\"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h1 className=\"text-3xl font-bold text-gray-800 mb-4\">Hotel Not Found</h1>\n            <p className=\"text-gray-600 mb-8\">The hotel you're trying to book doesn't exist.</p>\n            <Link href=\"/hotels\">\n              <Button>Return to Hotels</Button>\n            </Link>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (bookingType === 'restaurant' && !selectedRestaurant) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navigation />\n        <div className=\"pt-24 pb-16\">\n          <div className=\"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h1 className=\"text-3xl font-bold text-gray-800 mb-4\">Restaurant Not Found</h1>\n            <p className=\"text-gray-600 mb-8\">The restaurant you're trying to book doesn't exist.</p>\n            <Link href=\"/hotels\">\n              <Button>Return to Hotels</Button>\n            </Link>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  const currentItem = selectedHotel || selectedRestaurant;\n  if (!currentItem) return null;\n\n  return (\n    <div className=\"min-h-screen section-bg-soft\">\n      <Navigation />\n      \n      <div className=\"pt-24 pb-16\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <Link href=\"/hotels\" className=\"inline-flex items-center text-blue-600 hover:text-blue-700 mb-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to {bookingType === 'hotel' ? 'Hotels' : 'Restaurants'}\n            </Link>\n            \n            <div className=\"flex items-start justify-between\">\n              <div>\n                <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-2\">\n                  {bookingType === 'hotel' ? 'Book Your Stay' : 'Reserve Your Table'}\n                </h1>\n                <p className=\"text-xl text-gray-600\">\n                  Complete your booking at {currentItem.name}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Booking Form */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Calendar className=\"w-5 h-5 mr-2\" />\n                    Booking Details\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <form onSubmit={handleSubmit}>\n                    {bookingType === 'hotel' && selectedHotel && (\n                      <>\n                        {/* Room Selection */}\n                        <div>\n                          <Label className=\"text-base font-medium mb-3 block\">Select Room Type</Label>\n                          <div className=\"space-y-3\">\n                            {getRoomTypes(selectedHotel).map((room) => (\n                              <div\n                                key={room.id}\n                                className={`border rounded-lg p-4 cursor-pointer transition-all ${\n                                  selectedRoom === room.id\n                                    ? 'border-blue-500 bg-blue-50'\n                                    : 'border-gray-200 hover:border-gray-300'\n                                }`}\n                                onClick={() => setSelectedRoom(room.id)}\n                                data-testid={`room-option-${room.id}`}\n                              >\n                                <div className=\"flex justify-between items-start mb-2\">\n                                  <h3 className=\"font-semibold text-gray-900\">{room.type}</h3>\n                                  <div className=\"text-right\">\n                                    <div className=\"text-lg font-bold text-gray-900\">à§³{room.price.toLocaleString()}</div>\n                                    <div className=\"text-sm text-gray-500\">/night</div>\n                                  </div>\n                                </div>\n                                <div className=\"flex flex-wrap gap-2 mb-2\">\n                                  {room.features.map((feature, index) => (\n                                    <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                      {feature}\n                                    </Badge>\n                                  ))}\n                                </div>\n                                <p className=\"text-sm text-green-600\">{room.available} rooms available</p>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n\n                        {/* Dates */}\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <div>\n                            <Label htmlFor=\"checkin\">Check-in Date</Label>\n                            <Input\n                              id=\"checkin\"\n                              type=\"date\"\n                              value={checkIn}\n                              onChange={(e) => setCheckIn(e.target.value)}\n                              min={new Date().toISOString().split('T')[0]}\n                              required\n                              data-testid=\"input-checkin\"\n                            />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"checkout\">Check-out Date</Label>\n                            <Input\n                              id=\"checkout\"\n                              type=\"date\"\n                              value={checkOut}\n                              onChange={(e) => setCheckOut(e.target.value)}\n                              min={checkIn}\n                              required\n                              data-testid=\"input-checkout\"\n                            />\n                          </div>\n                        </div>\n\n                        {/* Guests */}\n                        <div>\n                          <Label htmlFor=\"guests\">Number of Guests</Label>\n                          <Select value={guests} onValueChange={setGuests}>\n                            <SelectTrigger data-testid=\"select-guests\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {[1, 2, 3, 4, 5, 6, 7, 8].map((num) => (\n                                <SelectItem key={num} value={num.toString()}>\n                                  {num} {num === 1 ? 'Guest' : 'Guests'}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </>\n                    )}\n\n                    {bookingType === 'restaurant' && selectedRestaurant && (\n                      <>\n                        {/* Date and Time */}\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <div>\n                            <Label htmlFor=\"booking-date\">Reservation Date</Label>\n                            <Input\n                              id=\"booking-date\"\n                              type=\"date\"\n                              value={bookingDate}\n                              onChange={(e) => setBookingDate(e.target.value)}\n                              min={new Date().toISOString().split('T')[0]}\n                              required\n                              data-testid=\"input-booking-date\"\n                            />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"booking-time\">Reservation Time</Label>\n                            <Select value={bookingTime} onValueChange={setBookingTime}>\n                              <SelectTrigger data-testid=\"select-booking-time\">\n                                <SelectValue placeholder=\"Select time\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {getTimeSlots().map((slot) => (\n                                  <SelectItem key={slot.value} value={slot.value}>\n                                    {slot.label}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </div>\n\n                        {/* Party Size */}\n                        <div>\n                          <Label htmlFor=\"party-size\">Party Size</Label>\n                          <Select value={partySize} onValueChange={setPartySize}>\n                            <SelectTrigger data-testid=\"select-party-size\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((num) => (\n                                <SelectItem key={num} value={num.toString()}>\n                                  {num} {num === 1 ? 'Person' : 'People'}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </>\n                    )}\n\n                    <Separator />\n\n                    {/* Customer Information */}\n                    <div className=\"space-y-4\">\n                      <h3 className=\"text-lg font-semibold text-gray-900\">Contact Information</h3>\n                      \n                      <div>\n                        <Label htmlFor=\"customer-name\">Full Name</Label>\n                        <Input\n                          id=\"customer-name\"\n                          type=\"text\"\n                          value={customerName}\n                          onChange={(e) => setCustomerName(e.target.value)}\n                          placeholder=\"Enter your full name\"\n                          required\n                          data-testid=\"input-customer-name\"\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"customer-email\">Email Address</Label>\n                        <Input\n                          id=\"customer-email\"\n                          type=\"email\"\n                          value={customerEmail}\n                          onChange={(e) => setCustomerEmail(e.target.value)}\n                          placeholder=\"Enter your email address\"\n                          required\n                          data-testid=\"input-customer-email\"\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"customer-phone\">Phone Number</Label>\n                        <Input\n                          id=\"customer-phone\"\n                          type=\"tel\"\n                          value={customerPhone}\n                          onChange={(e) => setCustomerPhone(e.target.value)}\n                          placeholder=\"Enter your phone number\"\n                          required\n                          data-testid=\"input-customer-phone\"\n                        />\n                      </div>\n                    </div>\n\n                    {/* Submit Button */}\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={isSubmitting || (bookingType === 'hotel' && !selectedRoom) || (bookingType === 'restaurant' && !bookingTime)}\n                      data-testid=\"button-submit-booking\"\n                    >\n                      {isSubmitting ? (\n                        <>\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                          Processing...\n                        </>\n                      ) : (\n                        <>\n                          <Check className=\"w-4 h-4 mr-2\" />\n                          {bookingType === 'hotel' ? 'Book Hotel' : 'Reserve Table'}\n                        </>\n                      )}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Booking Summary */}\n            <div className=\"lg:col-span-1\">\n              <Card className=\"sticky top-8\">\n                <CardHeader>\n                  <CardTitle>Booking Summary</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {/* Property/Restaurant Info */}\n                  <div className=\"flex space-x-3\">\n                    <img\n                      src={currentItem.imageUrl}\n                      alt={currentItem.name}\n                      className=\"w-16 h-16 rounded-lg object-cover\"\n                      data-testid=\"summary-image\"\n                    />\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-gray-900\" data-testid=\"summary-name\">\n                        {currentItem.name}\n                      </h3>\n                      <div className=\"flex items-center text-gray-600 text-sm mt-1\">\n                        <MapPin className=\"w-4 h-4 mr-1\" />\n                        <span data-testid=\"summary-location\">{currentItem.location}</span>\n                      </div>\n                      <div className=\"flex items-center text-yellow-600 text-sm mt-1\">\n                        <Star className=\"w-4 h-4 mr-1 fill-current\" />\n                        <span data-testid=\"summary-rating\">{currentItem.rating}</span>\n                      </div>\n                      <div className=\"flex items-center text-gray-600 text-sm mt-1\">\n                        <Phone className=\"w-4 h-4 mr-1\" />\n                        <span data-testid=\"summary-phone\">{currentItem.phone}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  {/* Booking Details */}\n                  <div className=\"space-y-3\">\n                    {bookingType === 'hotel' && selectedHotel && selectedRoom && (\n                      <>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">Room Type:</span>\n                          <span className=\"font-medium\" data-testid=\"summary-room-type\">\n                            {getRoomTypes(selectedHotel).find(r => r.id === selectedRoom)?.type}\n                          </span>\n                        </div>\n                        {checkIn && (\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-600\">Check-in:</span>\n                            <span className=\"font-medium\" data-testid=\"summary-checkin\">\n                              {new Date(checkIn).toLocaleDateString()}\n                            </span>\n                          </div>\n                        )}\n                        {checkOut && (\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-600\">Check-out:</span>\n                            <span className=\"font-medium\" data-testid=\"summary-checkout\">\n                              {new Date(checkOut).toLocaleDateString()}\n                            </span>\n                          </div>\n                        )}\n                        {getNights() > 0 && (\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-600\">Nights:</span>\n                            <span className=\"font-medium\" data-testid=\"summary-nights\">\n                              {getNights()}\n                            </span>\n                          </div>\n                        )}\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">Guests:</span>\n                          <span className=\"font-medium\" data-testid=\"summary-guests\">{guests}</span>\n                        </div>\n                      </>\n                    )}\n\n                    {bookingType === 'restaurant' && (\n                      <>\n                        {bookingDate && (\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-600\">Date:</span>\n                            <span className=\"font-medium\" data-testid=\"summary-booking-date\">\n                              {new Date(bookingDate).toLocaleDateString()}\n                            </span>\n                          </div>\n                        )}\n                        {bookingTime && (\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-600\">Time:</span>\n                            <span className=\"font-medium\" data-testid=\"summary-booking-time\">\n                              {new Date(`2000-01-01T${bookingTime}`).toLocaleTimeString('en-US', {\n                                hour: 'numeric',\n                                minute: '2-digit',\n                                hour12: true\n                              })}\n                            </span>\n                          </div>\n                        )}\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">Party Size:</span>\n                          <span className=\"font-medium\" data-testid=\"summary-party-size\">{partySize}</span>\n                        </div>\n                        {selectedRestaurant && (\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-600\">Cuisine:</span>\n                            <span className=\"font-medium\" data-testid=\"summary-cuisine\">{selectedRestaurant.cuisine}</span>\n                          </div>\n                        )}\n                      </>\n                    )}\n                  </div>\n\n                  {bookingType === 'hotel' && calculateTotal() > 0 && (\n                    <>\n                      <Separator />\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-lg font-semibold\">\n                          <span>Total:</span>\n                          <span data-testid=\"summary-total\">à§³{calculateTotal().toLocaleString()}</span>\n                        </div>\n                        <p className=\"text-xs text-gray-500\">Includes all taxes and fees</p>\n                      </div>\n                    </>\n                  )}\n\n                  {bookingType === 'restaurant' && selectedRestaurant && (\n                    <>\n                      <Separator />\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-lg font-semibold\">\n                          <span>Price Range:</span>\n                          <span data-testid=\"summary-price-range\">{selectedRestaurant.priceRange}</span>\n                        </div>\n                        <p className=\"text-xs text-gray-500\">Per person estimate</p>\n                      </div>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Success Dialog */}\n      <Dialog open={showSuccessDialog} onOpenChange={handleDialogClose}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\" data-testid=\"success-dialog\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center text-green-600 text-2xl\">\n              <Check className=\"w-6 h-6 mr-2\" />\n              Booking Confirmed!\n            </DialogTitle>\n          </DialogHeader>\n          \n          {bookingDetails && (\n            <div className=\"space-y-6\">\n              {/* Confirmation Number */}\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-lg font-semibold text-gray-900 mb-2\">Your confirmation number is:</p>\n                  <p className=\"text-3xl font-bold text-green-600\" data-testid=\"confirmation-number\">\n                    {bookingDetails.confirmationNumber}\n                  </p>\n                </div>\n              </div>\n\n              {/* Property Details */}\n              <div className=\"flex space-x-3\">\n                <img\n                  src={bookingDetails.property.imageUrl}\n                  alt={bookingDetails.property.name}\n                  className=\"w-20 h-20 rounded-lg object-cover\"\n                />\n                <div className=\"flex-1\">\n                  <h3 className=\"text-xl font-semibold text-gray-900\" data-testid=\"dialog-property-name\">\n                    {bookingDetails.property.name}\n                  </h3>\n                  <div className=\"flex items-center text-gray-600 text-sm mt-1\">\n                    <MapPin className=\"w-4 h-4 mr-1\" />\n                    <span>{bookingDetails.property.location}</span>\n                  </div>\n                  <div className=\"flex items-center text-yellow-600 text-sm mt-1\">\n                    <Star className=\"w-4 h-4 mr-1 fill-current\" />\n                    <span>{bookingDetails.property.rating}</span>\n                  </div>\n                  <div className=\"flex items-center text-gray-600 text-sm mt-1\">\n                    <Phone className=\"w-4 h-4 mr-1\" />\n                    <span>{bookingDetails.property.phone}</span>\n                  </div>\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Customer Information */}\n              <div>\n                <h4 className=\"text-lg font-semibold text-gray-900 mb-3\">Customer Information</h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"font-medium text-gray-700\">Name:</span>\n                    <p className=\"text-gray-600\" data-testid=\"dialog-customer-name\">{bookingDetails.customer.name}</p>\n                  </div>\n                  <div>\n                    <span className=\"font-medium text-gray-700\">Email:</span>\n                    <p className=\"text-gray-600\" data-testid=\"dialog-customer-email\">{bookingDetails.customer.email}</p>\n                  </div>\n                  <div>\n                    <span className=\"font-medium text-gray-700\">Phone:</span>\n                    <p className=\"text-gray-600\" data-testid=\"dialog-customer-phone\">{bookingDetails.customer.phone}</p>\n                  </div>\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Booking Details */}\n              <div>\n                <h4 className=\"text-lg font-semibold text-gray-900 mb-3\">\n                  {bookingDetails.bookingType === 'hotel' ? 'Hotel Booking Details' : 'Restaurant Reservation Details'}\n                </h4>\n                \n                {bookingDetails.bookingType === 'hotel' && bookingDetails.hotel && (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Room Type:</span>\n                      <p className=\"text-gray-600\" data-testid=\"dialog-room-type\">{bookingDetails.hotel.roomType}</p>\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Check-in:</span>\n                      <p className=\"text-gray-600\" data-testid=\"dialog-checkin\">\n                        {new Date(bookingDetails.hotel.checkIn).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Check-out:</span>\n                      <p className=\"text-gray-600\" data-testid=\"dialog-checkout\">\n                        {new Date(bookingDetails.hotel.checkOut).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Number of Nights:</span>\n                      <p className=\"text-gray-600\" data-testid=\"dialog-nights\">{bookingDetails.hotel.nights}</p>\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Number of Guests:</span>\n                      <p className=\"text-gray-600\" data-testid=\"dialog-guests\">{bookingDetails.hotel.guests}</p>\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Total Amount:</span>\n                      <p className=\"text-xl font-bold text-green-600\" data-testid=\"dialog-total\">\n                        à§³{bookingDetails.hotel.total.toLocaleString()}\n                      </p>\n                    </div>\n                  </div>\n                )}\n\n                {bookingDetails.bookingType === 'restaurant' && bookingDetails.restaurant && (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Date:</span>\n                      <p className=\"text-gray-600\" data-testid=\"dialog-booking-date\">\n                        {new Date(bookingDetails.restaurant.date).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Time:</span>\n                      <p className=\"text-gray-600\" data-testid=\"dialog-booking-time\">\n                        {new Date(`2000-01-01T${bookingDetails.restaurant.time}`).toLocaleTimeString('en-US', {\n                          hour: 'numeric',\n                          minute: '2-digit',\n                          hour12: true\n                        })}\n                      </p>\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Party Size:</span>\n                      <p className=\"text-gray-600\" data-testid=\"dialog-party-size\">{bookingDetails.restaurant.partySize} people</p>\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Cuisine:</span>\n                      <p className=\"text-gray-600\" data-testid=\"dialog-cuisine\">{bookingDetails.restaurant.cuisine}</p>\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Price Range:</span>\n                      <p className=\"text-gray-600\" data-testid=\"dialog-price-range\">{bookingDetails.restaurant.priceRange}</p>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <Separator />\n\n              {/* Action Buttons */}\n              <div className=\"flex flex-col sm:flex-row gap-3 pt-4\">\n                <Button \n                  onClick={downloadReceipt}\n                  className=\"flex items-center justify-center\"\n                  data-testid=\"button-download-receipt\"\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Download Receipt\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={handleDialogClose}\n                  className=\"flex items-center justify-center\"\n                  data-testid=\"button-close-dialog\"\n                >\n                  <X className=\"w-4 h-4 mr-2\" />\n                  Close\n                </Button>\n              </div>\n\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 text-center\">\n                <p className=\"text-sm text-blue-800\">\n                  A confirmation email has been sent to <strong>{bookingDetails.customer.email}</strong>\n                </p>\n                <p className=\"text-xs text-blue-600 mt-1\">\n                  For any queries, please contact us at support@bangladeshexplorer.com\n                </p>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":41134},"client/src/pages/hotels.tsx":{"content":"import { useState, useMemo } from 'react';\nimport { useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { Search, MapPin, Star, Wifi, Car, Coffee, Users, X, Calendar, CreditCard, Utensils, Building2, Phone } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport Navigation from '@/components/navigation';\nimport Footer from '@/components/footer';\n\nimport { useAuth } from '@/hooks/useAuth';\nimport { useToast } from '@/hooks/use-toast';\nimport type { Hotel, Restaurant } from '@shared/schema';\n\nexport default function Hotels() {\n  const [, navigate] = useLocation();\n  const { isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [sortBy, setSortBy] = useState('rating');\n  const [priceRange, setPriceRange] = useState('all');\n  const [showRestaurants, setShowRestaurants] = useState(false);\n  const [selectedHotel, setSelectedHotel] = useState<Hotel | null>(null);\n  const [selectedRestaurant, setSelectedRestaurant] = useState<Restaurant | null>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n\n\n  const { data: hotels = [], isLoading: hotelsLoading, error: hotelsError } = useQuery<Hotel[]>({\n    queryKey: ['/api/hotels'],\n  });\n\n  const { data: restaurants = [], isLoading: restaurantsLoading, error: restaurantsError } = useQuery<Restaurant[]>({\n    queryKey: ['/api/restaurants'],\n    enabled: showRestaurants,\n  });\n\n  const isLoading = showRestaurants ? restaurantsLoading : hotelsLoading;\n  const error = showRestaurants ? restaurantsError : hotelsError;\n\n  // Filter and sort hotels based on search criteria\n  const filteredAndSortedHotels = useMemo(() => {\n    let filtered = hotels.filter(hotel => {\n      if (!hotel?.name || !hotel?.location || !hotel?.description) return false;\n      \n      const matchesSearch = \n        hotel.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        hotel.location.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        hotel.description.toLowerCase().includes(searchQuery.toLowerCase());\n      \n      let matchesPrice = true;\n      if (priceRange !== 'all') {\n        const price = hotel.pricePerNight;\n        switch (priceRange) {\n          case 'budget':\n            matchesPrice = price < 3000;\n            break;\n          case 'mid':\n            matchesPrice = price >= 3000 && price <= 6000;\n            break;\n          case 'luxury':\n            matchesPrice = price > 6000;\n            break;\n        }\n      }\n      \n      return matchesSearch && matchesPrice;\n    });\n\n    // Sort hotels\n    filtered.sort((a, b) => {\n      switch (sortBy) {\n        case 'rating':\n          return parseFloat(b.rating) - parseFloat(a.rating);\n        case 'price-low':\n          return a.pricePerNight - b.pricePerNight;\n        case 'price-high':\n          return b.pricePerNight - a.pricePerNight;\n        case 'name':\n          return a.name.localeCompare(b.name);\n        default:\n          return 0;\n      }\n    });\n\n    return filtered;\n  }, [hotels, searchQuery, sortBy, priceRange]);\n\n  // Filter and sort restaurants based on search criteria\n  const filteredAndSortedRestaurants = useMemo(() => {\n    let filtered = restaurants.filter(restaurant => {\n      if (!restaurant?.name || !restaurant?.location || !restaurant?.description || !restaurant?.cuisine) return false;\n      \n      const matchesSearch = \n        restaurant.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        restaurant.location.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        restaurant.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        restaurant.cuisine.toLowerCase().includes(searchQuery.toLowerCase());\n      \n      let matchesPrice = true;\n      if (priceRange !== 'all') {\n        const price = restaurant.priceRange.toLowerCase();\n        switch (priceRange) {\n          case 'budget':\n            matchesPrice = price.includes('à§³') && !price.includes('à§³à§³');\n            break;\n          case 'mid':\n            matchesPrice = price.includes('à§³à§³') && !price.includes('à§³à§³à§³');\n            break;\n          case 'luxury':\n            matchesPrice = price.includes('à§³à§³à§³');\n            break;\n        }\n      }\n      \n      return matchesSearch && matchesPrice;\n    });\n\n    // Sort restaurants\n    filtered.sort((a, b) => {\n      switch (sortBy) {\n        case 'rating':\n          return parseFloat(b.rating) - parseFloat(a.rating);\n        case 'name':\n          return a.name.localeCompare(b.name);\n        case 'price-low':\n        case 'price-high':\n          // For restaurants, sort by price range string\n          const getPriceLevel = (priceRange: string) => {\n            if (priceRange.includes('à§³à§³à§³')) return 3;\n            if (priceRange.includes('à§³à§³')) return 2;\n            return 1;\n          };\n          const aLevel = getPriceLevel(a.priceRange);\n          const bLevel = getPriceLevel(b.priceRange);\n          return sortBy === 'price-low' ? aLevel - bLevel : bLevel - aLevel;\n        default:\n          return 0;\n      }\n    });\n\n    return filtered;\n  }, [restaurants, searchQuery, sortBy, priceRange]);\n\n  const handleBooking = (itemId: string, type: 'hotel' | 'restaurant') => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Sign In Required\",\n        description: \"Please sign in to make a booking. You'll be redirected to the login page.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        navigate('/sign-in');\n      }, 1000);\n      return;\n    }\n\n    // Navigate to booking page instead of opening dialog\n    if (type === 'hotel') {\n      navigate(`/hotel-booking/${itemId}`);\n    } else {\n      navigate(`/restaurant-booking/${itemId}`);\n    }\n  };\n\n  const handleHotelClick = (hotel: Hotel) => {\n    setSelectedHotel(hotel);\n    setSelectedRestaurant(null);\n    setIsDialogOpen(true);\n  };\n\n  const handleRestaurantClick = (restaurant: Restaurant) => {\n    setSelectedRestaurant(restaurant);\n    setSelectedHotel(null);\n    setIsDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setIsDialogOpen(false);\n    setSelectedHotel(null);\n    setSelectedRestaurant(null);\n  };\n\n  // Generate room types for the selected hotel\n  const getRoomTypes = (hotel: Hotel) => {\n    const basePrice = hotel.pricePerNight;\n    return [\n      {\n        type: 'Standard Room',\n        price: basePrice,\n        features: ['Free WiFi', 'Air Conditioning', 'Private Bathroom', 'TV'],\n        available: Math.floor(Math.random() * 5) + 3,\n      },\n      {\n        type: 'Deluxe Room', \n        price: Math.floor(basePrice * 1.3),\n        features: ['Free WiFi', 'Air Conditioning', 'Private Bathroom', 'TV', 'Mini Bar', 'City View'],\n        available: Math.floor(Math.random() * 4) + 2,\n      },\n      {\n        type: 'Suite',\n        price: Math.floor(basePrice * 1.8),\n        features: ['Free WiFi', 'Air Conditioning', 'Private Bathroom', 'TV', 'Mini Bar', 'Ocean View', 'Living Area', 'Balcony'],\n        available: Math.floor(Math.random() * 3) + 1,\n      },\n    ];\n  };\n\n  // Generate special offers\n  const getSpecialOffers = () => {\n    const offers = [\n      { title: 'Early Bird Special', discount: '15% off', description: 'Book 30 days in advance' },\n      { title: 'Weekend Getaway', discount: '20% off', description: 'Stay 2 nights, get 3rd night free' },\n      { title: 'Extended Stay', discount: '25% off', description: 'Stay 7+ nights' },\n      { title: 'Family Package', discount: '10% off', description: 'Book for 4+ guests' },\n    ];\n    // Return 2-3 random offers\n    return offers.sort(() => 0.5 - Math.random()).slice(0, Math.floor(Math.random() * 2) + 2);\n  };\n\n  // Get amenity icon\n  const getAmenityIcon = (amenity: string) => {\n    const amenityLower = amenity.toLowerCase();\n    if (amenityLower.includes('wifi') || amenityLower.includes('internet')) {\n      return <Wifi className=\"w-4 h-4\" />;\n    } else if (amenityLower.includes('parking')) {\n      return <Car className=\"w-4 h-4\" />;\n    } else if (amenityLower.includes('restaurant') || amenityLower.includes('dining')) {\n      return <Coffee className=\"w-4 h-4\" />;\n    } else {\n      return <Users className=\"w-4 h-4\" />;\n    }\n  };\n\n  // Generate additional hotel images including the original hotel image\n  const getHotelGalleryImages = (hotel: Hotel) => {\n    // Use simpler, more reliable URLs\n    const baseImages = [\n      \"https://images.unsplash.com/photo-1566073771259-6a8506099945?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80\",\n      \"https://images.unsplash.com/photo-1564501049412-61c2a3083791?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80\", \n      \"https://images.unsplash.com/photo-1571003123894-1f0594d2b5d9?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80\"\n    ];\n    \n    // Use hotel ID to get consistent images (deterministic selection)\n    const seed = hotel.id.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    const selectedIndex = seed % baseImages.length;\n    \n    // Include the original hotel image first, then additional gallery images\n    const result = [\n      hotel.imageUrl, // Original hotel image as first option\n      baseImages[selectedIndex],\n      baseImages[(selectedIndex + 1) % baseImages.length], \n      baseImages[(selectedIndex + 2) % baseImages.length]\n    ];\n    \n\n    return result;\n  };\n\n  // Generate restaurant gallery images\n  const getRestaurantGalleryImages = (restaurant: Restaurant) => {\n    // Restaurant-specific images\n    const baseImages = [\n      \"https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80\",\n      \"https://images.unsplash.com/photo-1559339352-11d035aa65de?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80\",\n      \"https://images.unsplash.com/photo-1552566618-dcd3ec399fb5?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80\"\n    ];\n    \n    // Use restaurant ID to get consistent images\n    const seed = restaurant.id.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    const selectedIndex = seed % baseImages.length;\n    \n    // Include the original restaurant image first, then additional gallery images\n    const result = [\n      restaurant.imageUrl, // Original restaurant image as first option\n      baseImages[selectedIndex],\n      baseImages[(selectedIndex + 1) % baseImages.length], \n      baseImages[(selectedIndex + 2) % baseImages.length]\n    ];\n    \n\n    return result;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navigation />\n        <div className=\"pt-24 pb-16\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"animate-pulse space-y-8\">\n              <div className=\"h-12 bg-gray-200 rounded-lg w-1/3\"></div>\n              <div className=\"space-y-4\">\n                {[...Array(6)].map((_, i) => (\n                  <div key={i} className=\"bg-white rounded-lg shadow-sm border p-6 animate-pulse\">\n                    <div className=\"flex space-x-4\">\n                      <div className=\"w-48 h-36 md:w-56 md:h-40 bg-gray-200 rounded-lg flex-shrink-0\"></div>\n                      <div className=\"flex-1 space-y-3\">\n                        <div className=\"h-6 bg-gray-200 rounded w-3/4\"></div>\n                        <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                        <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                        <div className=\"flex justify-between items-center pt-2\">\n                          <div className=\"h-8 bg-gray-200 rounded w-24\"></div>\n                          <div className=\"h-10 bg-gray-200 rounded w-20\"></div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navigation />\n        <div className=\"pt-24 pb-16\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h1 className=\"text-3xl font-bold text-gray-800 mb-4\">\n              {showRestaurants ? 'Error Loading Restaurants' : 'Error Loading Hotels'}\n            </h1>\n            <p className=\"text-gray-600 mb-8\">Failed to load data. Please try again later.</p>\n            <Button onClick={() => window.location.reload()}>Try Again</Button>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen section-bg-soft\">\n      <Navigation />\n      \n      {/* Hero Section with Dynamic Background */}\n      <div \n        className=\"relative pt-24 pb-8 bg-cover bg-center bg-no-repeat transition-all duration-500\"\n        style={{\n          backgroundImage: showRestaurants \n            ? `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('/assets/restaurant-hero.jpg')`\n            : `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('/assets/hotel-hero.jpg')`\n        }}\n      >\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-8\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"icon-bg-blue\">\n                {showRestaurants ? <Utensils className=\"w-6 h-6\" /> : <Building2 className=\"w-6 h-6\" />}\n              </div>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-white mb-4\">\n              {showRestaurants ? 'Find Amazing Restaurants' : 'Find Your Perfect Stay'}\n            </h1>\n            <p className=\"text-xl text-gray-200\">\n              {showRestaurants \n                ? 'Discover delicious dining experiences and local cuisine'\n                : 'Discover amazing hotels and accommodations for your next trip'\n              }\n            </p>\n            \n            {/* Toggle between Hotels and Restaurants */}\n            <div className=\"flex items-center justify-center space-x-4 mt-6\">\n              <Label className=\"flex items-center space-x-2 cursor-pointer\">\n                <Building2 className=\"w-5 h-5 text-blue-400\" />\n                <span className={`font-medium ${!showRestaurants ? 'text-blue-400' : 'text-gray-300'}`}>Hotels</span>\n              </Label>\n              <Switch \n                checked={showRestaurants}\n                onCheckedChange={setShowRestaurants}\n                data-testid=\"toggle-restaurants\"\n                className=\"data-[state=checked]:bg-orange-400/70 data-[state=unchecked]:bg-blue-400/50 border border-white/30\"\n              />\n              <Label className=\"flex items-center space-x-2 cursor-pointer\">\n                <Utensils className=\"w-5 h-5 text-orange-400\" />\n                <span className={`font-medium ${showRestaurants ? 'text-orange-400' : 'text-gray-300'}`}>Restaurants</span>\n              </Label>\n            </div>\n          </div>\n\n          {/* Search and Filter Section */}\n          <div className=\"backdrop-blur-sm bg-white/30 border border-white/40 rounded-lg shadow-lg p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 items-end\">\n              {/* Search Input */}\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-sm font-medium text-white mb-2\">\n                  {showRestaurants ? 'Search Restaurants' : 'Search Hotels'}\n                </label>\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                  <Input\n                    type=\"text\"\n                    placeholder={showRestaurants \n                      ? \"Search by name, location, cuisine, or description...\"\n                      : \"Search by name, location, or description...\"\n                    }\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid={showRestaurants ? \"input-restaurant-search\" : \"input-hotel-search\"}\n                  />\n                </div>\n              </div>\n\n              {/* Sort By */}\n              <div>\n                <label className=\"block text-sm font-medium text-white mb-2\">\n                  Sort By\n                </label>\n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger data-testid=\"select-sort-by\">\n                    <SelectValue placeholder=\"Sort by\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"rating\">Highest Rating</SelectItem>\n                    <SelectItem value=\"price-low\">Price: Low to High</SelectItem>\n                    <SelectItem value=\"price-high\">Price: High to Low</SelectItem>\n                    <SelectItem value=\"name\">Name A-Z</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Price Range */}\n              <div>\n                <label className=\"block text-sm font-medium text-white mb-2\">\n                  Price Range\n                </label>\n                <Select value={priceRange} onValueChange={setPriceRange}>\n                  <SelectTrigger data-testid=\"select-price-range\">\n                    <SelectValue placeholder=\"All prices\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Prices</SelectItem>\n                    {showRestaurants ? (\n                      <>\n                        <SelectItem value=\"budget\">Budget (à§³)</SelectItem>\n                        <SelectItem value=\"mid\">Mid-range (à§³à§³)</SelectItem>\n                        <SelectItem value=\"luxury\">Fine Dining (à§³à§³à§³)</SelectItem>\n                      </>\n                    ) : (\n                      <>\n                        <SelectItem value=\"budget\">Budget (Under à§³3,000)</SelectItem>\n                        <SelectItem value=\"mid\">Mid-range (à§³3,000-6,000)</SelectItem>\n                        <SelectItem value=\"luxury\">Luxury (Above à§³6,000)</SelectItem>\n                      </>\n                    )}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Results Section */}\n      <div className=\"pt-12 pb-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          \n\n          {/* Hotels/Restaurants List */}\n          {(showRestaurants ? filteredAndSortedRestaurants.length > 0 : filteredAndSortedHotels.length > 0) ? (\n            <div className=\"space-y-4\">\n              {showRestaurants ? (\n                filteredAndSortedRestaurants.map((restaurant) => (\n                  <div\n                    key={restaurant.id}\n                    className=\"elegant-card p-6 cursor-pointer\"\n                    onClick={() => handleRestaurantClick(restaurant)}\n                    data-testid={`card-restaurant-${restaurant.id}`}\n                  >\n                    <div className=\"flex space-x-4\">\n                      <div className=\"flex-shrink-0\">\n                        <img\n                          src={restaurant.imageUrl}\n                          alt={restaurant.name}\n                          className=\"w-48 h-36 md:w-56 md:h-40 object-cover rounded-lg\"\n                          data-testid={`img-restaurant-${restaurant.id}`}\n                        />\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\" data-testid={`text-restaurant-name-${restaurant.id}`}>\n                              {restaurant.name}\n                            </h3>\n                            \n                            <div className=\"flex flex-wrap items-center gap-4 text-sm text-gray-600 mb-2\">\n                              <div className=\"flex items-center\">\n                                <MapPin className=\"w-4 h-4 mr-1\" />\n                                <span data-testid={`text-restaurant-location-${restaurant.id}`}>{restaurant.location}</span>\n                              </div>\n                              <div className=\"flex items-center\">\n                                <Utensils className=\"w-4 h-4 mr-1\" />\n                                <span data-testid={`text-restaurant-cuisine-${restaurant.id}`}>{restaurant.cuisine}</span>\n                              </div>\n                              <div className=\"flex items-center\">\n                                <Phone className=\"w-4 h-4 mr-1\" />\n                                <span data-testid={`text-restaurant-phone-${restaurant.id}`}>{restaurant.phone}</span>\n                              </div>\n                              <div className=\"flex items-center\">\n                                <Star className=\"w-4 h-4 mr-1 text-yellow-400 fill-current\" />\n                                <span data-testid={`text-rating-${restaurant.id}`}>{restaurant.rating}</span>\n                              </div>\n                            </div>\n                            \n                            <p className=\"text-gray-700 text-sm mb-3 line-clamp-2\" data-testid={`text-restaurant-description-${restaurant.id}`}>\n                              {restaurant.description}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between pt-3 border-t border-gray-100\">\n                          <div>\n                            <span className=\"text-lg font-bold text-gray-900\" data-testid={`text-price-${restaurant.id}`}>\n                              {restaurant.priceRange}\n                            </span>\n                            <span className=\"text-gray-600 text-sm ml-1\">per person</span>\n                          </div>\n                          <Button\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleBooking(restaurant.id, 'restaurant');\n                            }}\n                            className=\"bg-primary hover:bg-primary/90 text-white px-6 py-2\"\n                            data-testid={`button-book-${restaurant.id}`}\n                          >\n                            Book Table\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                filteredAndSortedHotels.map((hotel) => (\n                  <div\n                    key={hotel.id}\n                    className=\"elegant-card p-6 cursor-pointer\"\n                    onClick={() => handleHotelClick(hotel)}\n                    data-testid={`card-hotel-${hotel.id}`}\n                  >\n                    <div className=\"flex space-x-4\">\n                      <div className=\"flex-shrink-0\">\n                        <img\n                          src={hotel.imageUrl}\n                          alt={hotel.name}\n                          className=\"w-48 h-36 md:w-56 md:h-40 object-cover rounded-lg\"\n                          data-testid={`img-hotel-${hotel.id}`}\n                        />\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\" data-testid={`text-hotel-name-${hotel.id}`}>\n                              {hotel.name}\n                            </h3>\n                            \n                            <div className=\"flex flex-wrap items-center gap-4 text-sm text-gray-600 mb-2\">\n                              <div className=\"flex items-center\">\n                                <MapPin className=\"w-4 h-4 mr-1\" />\n                                <span data-testid={`text-hotel-location-${hotel.id}`}>{hotel.location}</span>\n                              </div>\n                              <div className=\"flex items-center\">\n                                <Phone className=\"w-4 h-4 mr-1\" />\n                                <span data-testid={`text-hotel-phone-${hotel.id}`}>{hotel.phone}</span>\n                              </div>\n                              <div className=\"flex items-center\">\n                                <Star className=\"w-4 h-4 mr-1 text-yellow-400 fill-current\" />\n                                <span data-testid={`text-rating-${hotel.id}`}>{hotel.rating}</span>\n                              </div>\n                            </div>\n                            \n                            <p className=\"text-gray-700 text-sm mb-3 line-clamp-2\" data-testid={`text-hotel-description-${hotel.id}`}>\n                              {hotel.description}\n                            </p>\n                            \n                            {/* Amenities */}\n                            {hotel.amenities && hotel.amenities.length > 0 && (\n                              <div className=\"mb-3\">\n                                <div className=\"flex flex-wrap gap-2\">\n                                  {hotel.amenities.slice(0, 4).map((amenity, index) => (\n                                    <Badge \n                                      key={index} \n                                      variant=\"secondary\" \n                                      className=\"flex items-center space-x-1 text-xs\"\n                                      data-testid={`badge-amenity-${hotel.id}-${index}`}\n                                    >\n                                      {getAmenityIcon(amenity)}\n                                      <span>{amenity}</span>\n                                    </Badge>\n                                  ))}\n                                  {hotel.amenities.length > 4 && (\n                                    <Badge variant=\"outline\" className=\"text-xs\">\n                                      +{hotel.amenities.length - 4} more\n                                    </Badge>\n                                  )}\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between pt-3 border-t border-gray-100\">\n                          <div>\n                            <span className=\"text-2xl font-bold text-gray-900\" data-testid={`text-price-${hotel.id}`}>\n                              à§³{hotel.pricePerNight.toLocaleString()}\n                            </span>\n                            <span className=\"text-gray-600 text-sm\">/night</span>\n                          </div>\n                          <Button\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleBooking(hotel.id, 'hotel');\n                            }}\n                            className=\"bg-primary hover:bg-primary/90 text-white px-6 py-2\"\n                            data-testid={`button-book-${hotel.id}`}\n                          >\n                            Book Now\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <div className=\"w-24 h-24 mx-auto mb-6 bg-gray-100 rounded-full flex items-center justify-center\">\n                {showRestaurants ? (\n                  <Utensils className=\"w-8 h-8 text-gray-400\" />\n                ) : (\n                  <Search className=\"w-8 h-8 text-gray-400\" />\n                )}\n              </div>\n              <h3 className=\"text-xl font-medium text-gray-700 mb-2\">\n                {showRestaurants ? 'No Restaurants Found' : 'No Hotels Found'}\n              </h3>\n              <p className=\"text-gray-500\">\n                {showRestaurants \n                  ? 'Try adjusting your search criteria or filters to find more restaurants.'\n                  : 'Try adjusting your search criteria or filters to find more hotels.'\n                }\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Hotel/Restaurant Details Dialog */}\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          {selectedHotel && (\n            <>\n\n              <DialogHeader>\n                <DialogTitle className=\"text-2xl font-bold flex items-start justify-between\">\n                  <div>\n                    <h2 className=\"text-2xl font-bold text-gray-900 mb-1\">{selectedHotel.name}</h2>\n                    <div className=\"flex items-center text-gray-600 text-sm\">\n                      <MapPin className=\"w-4 h-4 mr-1\" />\n                      <span>{selectedHotel.location}</span>\n                    </div>\n                  </div>\n                  <div className=\"bg-yellow-50 rounded-lg px-3 py-1 flex items-center space-x-1\">\n                    <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                    <span className=\"text-sm font-medium text-gray-700\">{selectedHotel.rating}</span>\n                  </div>\n                </DialogTitle>\n                <DialogDescription>\n                  View detailed information about {selectedHotel.name}, including room types, amenities, and special offers.\n                </DialogDescription>\n              </DialogHeader>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mt-4\">\n                {/* Hotel Image and Info */}\n                <div className=\"space-y-4\">\n                  <img\n                    src={selectedHotel.imageUrl}\n                    alt={selectedHotel.name}\n                    className=\"w-full h-64 object-cover rounded-lg\"\n                    data-testid={`dialog-img-${selectedHotel.id}`}\n                  />\n\n                  {/* Hotel Gallery */}\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Photo Gallery</h3>\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      {getHotelGalleryImages(selectedHotel).map((imageUrl, index) => (\n                        <img\n                          key={`${selectedHotel.id}-gallery-${index}`}\n                          src={imageUrl}\n                          alt={`${selectedHotel.name} - Interior view ${index + 1}`}\n                          className=\"w-full h-32 object-cover rounded-lg border border-gray-200\"\n                          data-testid={`dialog-gallery-${selectedHotel.id}-${index}`}\n                          onError={(e) => {\n                            e.currentTarget.src = selectedHotel.imageUrl;\n                          }}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">About This Hotel</h3>\n                    <p className=\"text-gray-700 mb-4\" data-testid={`dialog-description-${selectedHotel.id}`}>\n                      {selectedHotel.description}\n                    </p>\n                    <div className=\"flex items-center text-gray-600 text-sm\">\n                      <Phone className=\"w-4 h-4 mr-2\" />\n                      <span className=\"font-medium mr-2\">Phone:</span>\n                      <span data-testid={`dialog-phone-${selectedHotel.id}`}>{selectedHotel.phone}</span>\n                    </div>\n                  </div>\n\n                  {/* Amenities */}\n                  {selectedHotel.amenities && selectedHotel.amenities.length > 0 && (\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Amenities</h3>\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        {selectedHotel.amenities.map((amenity, index) => (\n                          <div \n                            key={index} \n                            className=\"flex items-center space-x-2 text-sm text-gray-600\"\n                            data-testid={`dialog-amenity-${selectedHotel.id}-${index}`}\n                          >\n                            {getAmenityIcon(amenity)}\n                            <span>{amenity}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {/* Room Types and Offers */}\n                <div className=\"space-y-6\">\n                  {/* Room Types */}\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Available Rooms</h3>\n                    <div className=\"space-y-4\">\n                      {getRoomTypes(selectedHotel).map((room, index) => (\n                        <div \n                          key={index} \n                          className=\"border rounded-lg p-4 hover:bg-gray-50 transition-colors\"\n                          data-testid={`dialog-room-${selectedHotel.id}-${index}`}\n                        >\n                          <div className=\"flex justify-between items-start mb-2\">\n                            <h4 className=\"font-semibold text-gray-900\">{room.type}</h4>\n                            <div className=\"text-right\">\n                              <div className=\"text-lg font-bold text-gray-900\">à§³{room.price.toLocaleString()}</div>\n                              <div className=\"text-sm text-gray-500\">/night</div>\n                            </div>\n                          </div>\n                          <div className=\"flex flex-wrap gap-2 mb-3\">\n                            {room.features.map((feature, featureIndex) => (\n                              <Badge key={featureIndex} variant=\"outline\" className=\"text-xs\">\n                                {feature}\n                              </Badge>\n                            ))}\n                          </div>\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"text-sm text-green-600\">\n                              {room.available} rooms available\n                            </span>\n                            <Button \n                              size=\"sm\" \n                              onClick={(e) => {\n                                e.stopPropagation();\n                                handleBooking(selectedHotel.id, 'hotel');\n                              }}\n                              data-testid={`dialog-book-room-${selectedHotel.id}-${index}`}\n                            >\n                              Select Room\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  {/* Special Offers */}\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n                      <CreditCard className=\"w-5 h-5 mr-2 text-green-600\" />\n                      Special Offers\n                    </h3>\n                    <div className=\"space-y-3\">\n                      {getSpecialOffers().map((offer, index) => (\n                        <div \n                          key={index} \n                          className=\"bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-4\"\n                          data-testid={`dialog-offer-${selectedHotel.id}-${index}`}\n                        >\n                          <div className=\"flex justify-between items-start mb-2\">\n                            <h4 className=\"font-semibold text-gray-900\">{offer.title}</h4>\n                            <Badge className=\"bg-green-100 text-green-800 hover:bg-green-100\">\n                              {offer.discount}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-gray-600\">{offer.description}</p>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Booking Actions */}\n                  <div className=\"pt-4 border-t\">\n                    <div className=\"flex space-x-3\">\n                      <Button \n                        className=\"flex-1\" \n                        onClick={() => handleBooking(selectedHotel.id, 'hotel')}\n                        data-testid={`dialog-book-now-${selectedHotel.id}`}\n                      >\n                        <Calendar className=\"w-4 h-4 mr-2\" />\n                        Book Now\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        onClick={handleCloseDialog}\n                        data-testid={`dialog-close-${selectedHotel.id}`}\n                      >\n                        Close\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </>\n          )}\n          \n          {selectedRestaurant && (\n            <>\n              <DialogHeader>\n                <DialogTitle className=\"text-2xl font-bold flex items-start justify-between\">\n                  <div>\n                    <h2 className=\"text-2xl font-bold text-gray-900 mb-1\">{selectedRestaurant.name}</h2>\n                    <div className=\"flex items-center text-gray-600 text-sm mb-1\">\n                      <MapPin className=\"w-4 h-4 mr-1\" />\n                      <span>{selectedRestaurant.location}</span>\n                    </div>\n                    <div className=\"flex items-center text-gray-600 text-sm\">\n                      <Utensils className=\"w-4 h-4 mr-1\" />\n                      <span>{selectedRestaurant.cuisine}</span>\n                    </div>\n                  </div>\n                  <div className=\"bg-yellow-50 rounded-lg px-3 py-1 flex items-center space-x-1\">\n                    <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                    <span className=\"text-sm font-medium text-gray-700\">{selectedRestaurant.rating}</span>\n                  </div>\n                </DialogTitle>\n                <DialogDescription>\n                  View detailed information about {selectedRestaurant.name}, including cuisine type, reviews, and booking options.\n                </DialogDescription>\n              </DialogHeader>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mt-4\">\n                {/* Restaurant Image and Info */}\n                <div className=\"space-y-4\">\n                  <img\n                    src={selectedRestaurant.imageUrl}\n                    alt={selectedRestaurant.name}\n                    className=\"w-full h-64 object-cover rounded-lg\"\n                    data-testid={`dialog-img-${selectedRestaurant.id}`}\n                  />\n\n                  {/* Restaurant Gallery */}\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Photo Gallery</h3>\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      {getRestaurantGalleryImages(selectedRestaurant).map((imageUrl, index) => (\n                        <img\n                          key={`${selectedRestaurant.id}-gallery-${index}`}\n                          src={imageUrl}\n                          alt={`${selectedRestaurant.name} - Interior view ${index + 1}`}\n                          className=\"w-full h-32 object-cover rounded-lg border border-gray-200\"\n                          data-testid={`dialog-gallery-${selectedRestaurant.id}-${index}`}\n                          onError={(e) => {\n                            e.currentTarget.src = selectedRestaurant.imageUrl;\n                          }}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">About This Restaurant</h3>\n                    <p className=\"text-gray-700 mb-4\" data-testid={`dialog-description-${selectedRestaurant.id}`}>\n                      {selectedRestaurant.description}\n                    </p>\n                    \n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <span className=\"font-medium text-gray-700\">Cuisine:</span>\n                        <p className=\"text-gray-600\">{selectedRestaurant.cuisine}</p>\n                      </div>\n                      <div>\n                        <span className=\"font-medium text-gray-700\">Price Range:</span>\n                        <p className=\"text-gray-600\">{selectedRestaurant.priceRange}</p>\n                      </div>\n                      <div>\n                        <span className=\"font-medium text-gray-700\">Phone:</span>\n                        <p className=\"text-gray-600\" data-testid={`dialog-phone-${selectedRestaurant.id}`}>{selectedRestaurant.phone}</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Menu and Features */}\n                <div className=\"space-y-6\">\n                  {/* Menu Section */}\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n                      <Utensils className=\"w-5 h-5 mr-2 text-orange-600\" />\n                      Menu & Prices\n                    </h3>\n                    <div className=\"bg-gradient-to-r from-orange-50 to-yellow-50 border border-orange-200 rounded-lg p-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        {/* Popular Dishes */}\n                        <div>\n                          <h4 className=\"font-semibold text-gray-900 mb-3 flex items-center\">\n                            <Star className=\"w-4 h-4 mr-1 text-yellow-500\" />\n                            Popular Dishes\n                          </h4>\n                          <div className=\"space-y-2 text-sm\">\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Hilsha Fish Curry</span>\n                              <span className=\"font-medium text-gray-900\">à§³450</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Beef Bhuna</span>\n                              <span className=\"font-medium text-gray-900\">à§³380</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Chicken Biryani</span>\n                              <span className=\"font-medium text-gray-900\">à§³320</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Prawn Malaikari</span>\n                              <span className=\"font-medium text-gray-900\">à§³520</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Mutton Rezala</span>\n                              <span className=\"font-medium text-gray-900\">à§³420</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Fish Fry (Rui)</span>\n                              <span className=\"font-medium text-gray-900\">à§³280</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Chicken Roast</span>\n                              <span className=\"font-medium text-gray-900\">à§³350</span>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Traditional Items */}\n                        <div>\n                          <h4 className=\"font-semibold text-gray-900 mb-3 flex items-center\">\n                            <Coffee className=\"w-4 h-4 mr-1 text-orange-500\" />\n                            Traditional Items\n                          </h4>\n                          <div className=\"space-y-2 text-sm\">\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Dal with Rice</span>\n                              <span className=\"font-medium text-gray-900\">à§³180</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Shutki Bhorta</span>\n                              <span className=\"font-medium text-gray-900\">à§³220</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Panta Ilish</span>\n                              <span className=\"font-medium text-gray-900\">à§³580</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Mixed Vegetable</span>\n                              <span className=\"font-medium text-gray-900\">à§³150</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Begun Bhaja</span>\n                              <span className=\"font-medium text-gray-900\">à§³120</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Aloo Posto</span>\n                              <span className=\"font-medium text-gray-900\">à§³140</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Shorshe Maach</span>\n                              <span className=\"font-medium text-gray-900\">à§³390</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Additional Categories */}\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-6 pt-4 border-t border-orange-200\">\n                        {/* Rice & Bread */}\n                        <div>\n                          <h4 className=\"font-semibold text-gray-900 mb-3 flex items-center\">\n                            <Coffee className=\"w-4 h-4 mr-1 text-green-500\" />\n                            Rice & Bread\n                          </h4>\n                          <div className=\"space-y-2 text-sm\">\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Kacchi Biryani</span>\n                              <span className=\"font-medium text-gray-900\">à§³450</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Polao with Chicken</span>\n                              <span className=\"font-medium text-gray-900\">à§³280</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Plain Rice</span>\n                              <span className=\"font-medium text-gray-900\">à§³60</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Naan</span>\n                              <span className=\"font-medium text-gray-900\">à§³45</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Paratha</span>\n                              <span className=\"font-medium text-gray-900\">à§³35</span>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Desserts & Drinks */}\n                        <div>\n                          <h4 className=\"font-semibold text-gray-900 mb-3 flex items-center\">\n                            <Star className=\"w-4 h-4 mr-1 text-pink-500\" />\n                            Desserts & Drinks\n                          </h4>\n                          <div className=\"space-y-2 text-sm\">\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Mishti Doi</span>\n                              <span className=\"font-medium text-gray-900\">à§³80</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Rasgulla</span>\n                              <span className=\"font-medium text-gray-900\">à§³90</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Kheer</span>\n                              <span className=\"font-medium text-gray-900\">à§³70</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Cha (Tea)</span>\n                              <span className=\"font-medium text-gray-900\">à§³25</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-700\">Lassi</span>\n                              <span className=\"font-medium text-gray-900\">à§³65</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  {/* Special Features */}\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n                      <Coffee className=\"w-5 h-5 mr-2 text-orange-600\" />\n                      Restaurant Features\n                    </h3>\n                    <div className=\"space-y-3\">\n                      <div className=\"bg-gradient-to-r from-orange-50 to-yellow-50 border border-orange-200 rounded-lg p-4\">\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <h4 className=\"font-semibold text-gray-900\">Authentic Local Cuisine</h4>\n                          <Badge className=\"bg-orange-100 text-orange-800 hover:bg-orange-100\">\n                            Featured\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-600\">Experience traditional flavors prepared by expert chefs</p>\n                      </div>\n                      \n                      <div className=\"bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-4\">\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <h4 className=\"font-semibold text-gray-900\">Fresh Ingredients</h4>\n                          <Badge className=\"bg-green-100 text-green-800 hover:bg-green-100\">\n                            Quality\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-600\">Daily sourced local ingredients for maximum freshness</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  {/* Reviews */}\n                  {selectedRestaurant.reviews && selectedRestaurant.reviews.length > 0 && (\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Customer Reviews</h3>\n                      <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n                        {selectedRestaurant.reviews.map((review, index) => (\n                          <div \n                            key={index} \n                            className=\"bg-gray-50 rounded-lg p-3\"\n                            data-testid={`dialog-review-${selectedRestaurant.id}-${index}`}\n                          >\n                            <p className=\"text-sm text-gray-700 italic\">\"{review}\"</p>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Booking Actions */}\n                  <div className=\"pt-4 border-t\">\n                    <div className=\"flex space-x-3\">\n                      <Button \n                        className=\"flex-1\" \n                        onClick={() => handleBooking(selectedRestaurant.id, 'restaurant')}\n                        data-testid={`dialog-book-now-${selectedRestaurant.id}`}\n                      >\n                        <Calendar className=\"w-4 h-4 mr-2\" />\n                        Book Table\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        onClick={handleCloseDialog}\n                        data-testid={`dialog-close-${selectedRestaurant.id}`}\n                      >\n                        Close\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":55713},"client/src/pages/my-bookings.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Link } from 'wouter';\nimport { Calendar, MapPin, Star, Phone, Users, Clock, Utensils, AlertTriangle, CheckCircle, X, Download } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { apiRequest } from '@/lib/queryClient';\nimport Navigation from '@/components/navigation';\nimport Footer from '@/components/footer';\nimport type { Booking } from '@shared/schema';\nimport jsPDF from 'jspdf';\n\nexport default function MyBookings() {\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [bookingToCancel, setBookingToCancel] = useState<Booking | null>(null);\n\n  const { data: bookings = [], isLoading, error } = useQuery<Booking[]>({\n    queryKey: ['/api/bookings'],\n    enabled: isAuthenticated,\n  });\n\n  const cancelBookingMutation = useMutation({\n    mutationFn: async (bookingId: string) => {\n      return await apiRequest('PUT', `/api/bookings/${bookingId}/cancel`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      toast({\n        title: \"Booking Cancelled\",\n        description: \"Your booking has been successfully cancelled.\",\n      });\n      setBookingToCancel(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Cancellation Failed\",\n        description: error.message || \"Failed to cancel booking. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const downloadReceipt = (booking: Booking) => {\n    const doc = new jsPDF();\n    const pageWidth = doc.internal.pageSize.getWidth();\n    \n    // Header with background color\n    doc.setFillColor(0, 102, 204);\n    doc.rect(0, 0, pageWidth, 50, 'F');\n    \n    // Company logo (simplified text-based logo)\n    doc.setTextColor(255, 255, 255);\n    doc.setFontSize(8);\n    doc.text('ð§ð©', 25, 15);\n    \n    // Company name in header\n    doc.setFontSize(26);\n    doc.text('BD Explorer', pageWidth / 2, 22, { align: 'center' });\n    doc.setFontSize(12);\n    doc.text('Your Gateway to Beautiful Bangladesh', pageWidth / 2, 35, { align: 'center' });\n    doc.setFontSize(10);\n    doc.text('ð +880-2-123-4567  |  âï¸ info@bangladeshexplorer.com  |  ð www.bangladeshexplorer.com', pageWidth / 2, 45, { align: 'center' });\n    \n    // Receipt title\n    doc.setTextColor(0, 0, 0);\n    doc.setFontSize(20);\n    doc.text('BOOKING RECEIPT', pageWidth / 2, 65, { align: 'center' });\n    \n    // Draw a line under title\n    doc.setDrawColor(200, 200, 200);\n    doc.line(20, 75, pageWidth - 20, 75);\n    \n    let y = 90;\n    \n    // Confirmation details box\n    doc.setFillColor(245, 245, 245);\n    doc.roundedRect(20, y, pageWidth - 40, 25, 3, 3, 'F');\n    doc.setTextColor(0, 102, 204);\n    doc.setFontSize(14);\n    doc.text(`Confirmation: ${booking.confirmationNumber}`, 25, y + 10);\n    doc.text(`Status: ${booking.status.toUpperCase()}`, 25, y + 20);\n    doc.text(`Booking Type: ${booking.bookingType ? booking.bookingType.charAt(0).toUpperCase() + booking.bookingType.slice(1) : 'N/A'}`, pageWidth / 2 + 10, y + 10);\n    doc.text(`Date: ${booking.createdAt ? new Date(booking.createdAt).toLocaleDateString('en-GB') : 'N/A'}`, pageWidth / 2 + 10, y + 20);\n    \n    y += 40;\n    \n    // Property Information Section\n    doc.setTextColor(0, 102, 204);\n    doc.setFontSize(16);\n    doc.text('Property Information', 20, y);\n    doc.setDrawColor(0, 102, 204);\n    doc.line(20, y + 3, 120, y + 3);\n    \n    y += 15;\n    doc.setTextColor(0, 0, 0);\n    doc.setFontSize(12);\n    doc.text(`Name: ${booking.propertyName}`, 25, y);\n    y += 10;\n    doc.text(`Location: ${booking.propertyLocation}`, 25, y);\n    y += 10;\n    doc.text(`Phone: ${booking.propertyPhone}`, 25, y);\n    \n    y += 20;\n    \n    // Customer Information Section\n    doc.setTextColor(0, 102, 204);\n    doc.setFontSize(16);\n    doc.text('Customer Information', 20, y);\n    doc.setDrawColor(0, 102, 204);\n    doc.line(20, y + 3, 120, y + 3);\n    \n    y += 15;\n    doc.setTextColor(0, 0, 0);\n    doc.setFontSize(12);\n    doc.text(`Name: ${booking.customerName}`, 25, y);\n    y += 10;\n    doc.text(`Email: ${booking.email}`, 25, y);\n    y += 10;\n    doc.text(`Phone: ${booking.phone}`, 25, y);\n    \n    y += 20;\n    \n    // Booking Details Section\n    doc.setTextColor(0, 102, 204);\n    doc.setFontSize(16);\n    doc.text('Booking Details', 20, y);\n    doc.setDrawColor(0, 102, 204);\n    doc.line(20, y + 3, 110, y + 3);\n    \n    y += 15;\n    doc.setTextColor(0, 0, 0);\n    doc.setFontSize(12);\n    \n    if (booking.bookingType === 'hotel') {\n      doc.text(`Room Type: ${booking.roomType || 'Standard'}`, 25, y);\n      y += 10;\n      doc.text(`Check-in Date: ${booking.checkIn ? new Date(booking.checkIn).toLocaleDateString('en-GB') : 'N/A'}`, 25, y);\n      y += 10;\n      doc.text(`Check-out Date: ${booking.checkOut ? new Date(booking.checkOut).toLocaleDateString('en-GB') : 'N/A'}`, 25, y);\n      y += 10;\n      doc.text(`Number of Nights: ${booking.nights || 1}`, 25, y);\n      y += 10;\n      doc.text(`Number of Guests: ${booking.guests || 1}`, 25, y);\n    } else if (booking.bookingType === 'restaurant') {\n      doc.text(`Reservation Date: ${booking.reservationDate ? new Date(booking.reservationDate).toLocaleDateString('en-GB') : 'N/A'}`, 25, y);\n      y += 10;\n      doc.text(`Reservation Time: ${booking.reservationTime || 'N/A'}`, 25, y);\n      y += 10;\n      doc.text(`Party Size: ${booking.partySize || 1} people`, 25, y);\n      y += 10;\n      doc.text(`Cuisine Type: ${booking.cuisine || 'Mixed'}`, 25, y);\n    } else if (booking.bookingType === 'car' || booking.bookingType === 'bus') {\n      doc.text(`Travel Date: ${booking.travelDate ? new Date(booking.travelDate).toLocaleDateString('en-GB') : 'N/A'}`, 25, y);\n      y += 10;\n      doc.text(`Number of Passengers: ${booking.passengers || 1}`, 25, y);\n      if (booking.specialRequests) {\n        y += 10;\n        doc.text(`Special Requests: ${booking.specialRequests}`, 25, y);\n      }\n    }\n    \n    y += 25;\n    \n    // Payment Summary Box\n    doc.setFillColor(240, 248, 255);\n    doc.roundedRect(20, y, pageWidth - 40, 35, 3, 3, 'F');\n    doc.setDrawColor(0, 102, 204);\n    doc.roundedRect(20, y, pageWidth - 40, 35, 3, 3, 'S');\n    \n    doc.setTextColor(0, 102, 204);\n    doc.setFontSize(16);\n    doc.text('ð° TOTAL AMOUNT PAID', pageWidth / 2, y + 15, { align: 'center' });\n    \n    doc.setTextColor(0, 120, 0);\n    doc.setFontSize(24);\n    const formattedAmount = `à§³ ${(booking.totalAmount || 0).toLocaleString('en-BD')}`;\n    doc.text(formattedAmount, pageWidth / 2, y + 30, { align: 'center' });\n    \n    y += 55;\n    \n    // Footer section\n    doc.setDrawColor(200, 200, 200);\n    doc.line(20, y, pageWidth - 20, y);\n    \n    y += 15;\n    doc.setTextColor(0, 102, 204);\n    doc.setFontSize(12);\n    doc.text('ð Thank you for choosing BD Explorer!', pageWidth / 2, y, { align: 'center' });\n    doc.setTextColor(100, 100, 100);\n    doc.setFontSize(10);\n    doc.text('Discover the beauty and culture of Bangladesh with us.', pageWidth / 2, y + 10, { align: 'center' });\n    doc.text('Safe travels and unforgettable memories await you!', pageWidth / 2, y + 20, { align: 'center' });\n    doc.text(`Receipt generated on ${new Date().toLocaleDateString('en-GB')} at ${new Date().toLocaleTimeString('en-US')}`, pageWidth / 2, y + 35, { align: 'center' });\n    \n    // QR Code placeholder (text-based)\n    doc.setTextColor(150, 150, 150);\n    doc.setFontSize(8);\n    doc.text('[QR Code for Mobile Verification]', pageWidth - 50, y + 50, { align: 'center' });\n    \n    // Download the PDF\n    doc.save(`Bangladesh-Explorer-Receipt-${booking.confirmationNumber}.pdf`);\n    \n    toast({\n      title: \"Receipt Downloaded\",\n      description: `Professional receipt for ${booking.propertyName} has been downloaded.`,\n    });\n  };\n\n  const handleCancelBooking = async () => {\n    if (bookingToCancel) {\n      await cancelBookingMutation.mutateAsync(bookingToCancel.id);\n    }\n  };\n\n  const formatDate = (dateStr: string | null) => {\n    if (!dateStr) return '';\n    return new Date(dateStr).toLocaleDateString();\n  };\n\n  const formatTime = (timeStr: string | null) => {\n    if (!timeStr) return '';\n    return new Date(`2000-01-01T${timeStr}`).toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navigation />\n        <div className=\"pt-24 pb-16\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n              <p className=\"mt-2 text-gray-600\">Loading...</p>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navigation />\n        <div className=\"pt-24 pb-16\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <AlertTriangle className=\"w-16 h-16 text-yellow-500 mx-auto mb-4\" />\n            <h1 className=\"text-3xl font-bold text-gray-800 mb-4\">Sign In Required</h1>\n            <p className=\"text-gray-600 mb-8\">\n              You need to be signed in to view your bookings.\n            </p>\n            <Link href=\"/sign-in\">\n              <Button size=\"lg\" data-testid=\"button-sign-in\">\n                Sign In\n              </Button>\n            </Link>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navigation />\n      \n      <div className=\"pt-24 pb-16\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-2\">\n              My Bookings\n            </h1>\n            <p className=\"text-xl text-gray-600\">\n              Manage your hotel and restaurant reservations\n            </p>\n          </div>\n\n          {error && (\n            <Alert variant=\"destructive\" className=\"mb-6\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>\n                Failed to load your bookings. Please refresh the page.\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {isLoading ? (\n            <div className=\"text-center py-12\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n              <p className=\"mt-2 text-gray-600\">Loading your bookings...</p>\n            </div>\n          ) : bookings.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Calendar className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-gray-800 mb-2\">No Bookings Found</h3>\n              <p className=\"text-gray-600 mb-8\">\n                You haven't made any bookings yet. Start exploring our hotels and restaurants!\n              </p>\n              <Link href=\"/hotels\">\n                <Button size=\"lg\" data-testid=\"button-browse-hotels\">\n                  Browse Hotels & Restaurants\n                </Button>\n              </Link>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {bookings.map((booking) => (\n                <Card key={booking.id} className=\"overflow-hidden\" data-testid={`booking-card-${booking.id}`}>\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <img\n                          src={booking.propertyImageUrl || ''}\n                          alt={booking.propertyName || ''}\n                          className=\"w-12 h-12 rounded-lg object-cover\"\n                        />\n                        <div>\n                          <CardTitle className=\"text-lg\" data-testid={`booking-name-${booking.id}`}>\n                            {booking.propertyName}\n                          </CardTitle>\n                          <div className=\"flex items-center text-gray-600 text-sm\">\n                            <MapPin className=\"w-4 h-4 mr-1\" />\n                            <span>{booking.propertyLocation}</span>\n                          </div>\n                        </div>\n                      </div>\n                      <Badge \n                        variant={booking.status === 'confirmed' ? 'default' : 'destructive'}\n                        data-testid={`booking-status-${booking.id}`}\n                      >\n                        {booking.status === 'confirmed' ? (\n                          <CheckCircle className=\"w-3 h-3 mr-1\" />\n                        ) : (\n                          <X className=\"w-3 h-3 mr-1\" />\n                        )}\n                        {booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className=\"space-y-4\">\n                    {/* Confirmation Number */}\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n                      <p className=\"text-sm font-medium text-blue-800\">\n                        Confirmation: <span data-testid={`booking-confirmation-${booking.id}`}>{booking.confirmationNumber}</span>\n                      </p>\n                    </div>\n\n                    {/* Booking Details */}\n                    <div className=\"space-y-3\">\n                      {booking.bookingType === 'hotel' && (\n                        <>\n                          {booking.roomType && (\n                            <div className=\"flex justify-between text-sm\">\n                              <span className=\"text-gray-600\">Room Type:</span>\n                              <span className=\"font-medium\" data-testid={`booking-room-type-${booking.id}`}>\n                                {booking.roomType}\n                              </span>\n                            </div>\n                          )}\n                          {booking.checkIn && (\n                            <div className=\"flex justify-between text-sm\">\n                              <span className=\"text-gray-600\">Check-in:</span>\n                              <span className=\"font-medium\" data-testid={`booking-checkin-${booking.id}`}>\n                                {formatDate(booking.checkIn)}\n                              </span>\n                            </div>\n                          )}\n                          {booking.checkOut && (\n                            <div className=\"flex justify-between text-sm\">\n                              <span className=\"text-gray-600\">Check-out:</span>\n                              <span className=\"font-medium\" data-testid={`booking-checkout-${booking.id}`}>\n                                {formatDate(booking.checkOut)}\n                              </span>\n                            </div>\n                          )}\n                          {booking.guests && (\n                            <div className=\"flex justify-between text-sm\">\n                              <span className=\"text-gray-600\">Guests:</span>\n                              <span className=\"font-medium flex items-center\" data-testid={`booking-guests-${booking.id}`}>\n                                <Users className=\"w-4 h-4 mr-1\" />\n                                {booking.guests}\n                              </span>\n                            </div>\n                          )}\n                          {booking.totalAmount && (\n                            <div className=\"flex justify-between text-lg font-semibold text-green-600\">\n                              <span>Total:</span>\n                              <span data-testid={`booking-total-${booking.id}`}>à§³{booking.totalAmount.toLocaleString()}</span>\n                            </div>\n                          )}\n                        </>\n                      )}\n\n                      {booking.bookingType === 'restaurant' && (\n                        <>\n                          {booking.reservationDate && (\n                            <div className=\"flex justify-between text-sm\">\n                              <span className=\"text-gray-600\">Date:</span>\n                              <span className=\"font-medium flex items-center\" data-testid={`booking-date-${booking.id}`}>\n                                <Calendar className=\"w-4 h-4 mr-1\" />\n                                {formatDate(booking.reservationDate)}\n                              </span>\n                            </div>\n                          )}\n                          {booking.reservationTime && (\n                            <div className=\"flex justify-between text-sm\">\n                              <span className=\"text-gray-600\">Time:</span>\n                              <span className=\"font-medium flex items-center\" data-testid={`booking-time-${booking.id}`}>\n                                <Clock className=\"w-4 h-4 mr-1\" />\n                                {formatTime(booking.reservationTime)}\n                              </span>\n                            </div>\n                          )}\n                          {booking.partySize && (\n                            <div className=\"flex justify-between text-sm\">\n                              <span className=\"text-gray-600\">Party Size:</span>\n                              <span className=\"font-medium flex items-center\" data-testid={`booking-party-size-${booking.id}`}>\n                                <Users className=\"w-4 h-4 mr-1\" />\n                                {booking.partySize} people\n                              </span>\n                            </div>\n                          )}\n                          {booking.cuisine && (\n                            <div className=\"flex justify-between text-sm\">\n                              <span className=\"text-gray-600\">Cuisine:</span>\n                              <span className=\"font-medium flex items-center\" data-testid={`booking-cuisine-${booking.id}`}>\n                                <Utensils className=\"w-4 h-4 mr-1\" />\n                                {booking.cuisine}\n                              </span>\n                            </div>\n                          )}\n                        </>\n                      )}\n\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-600\">Phone:</span>\n                        <span className=\"font-medium flex items-center\" data-testid={`booking-phone-${booking.id}`}>\n                          <Phone className=\"w-4 h-4 mr-1\" />\n                          {booking.propertyPhone}\n                        </span>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    {/* Actions */}\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => downloadReceipt(booking)}\n                        data-testid={`button-download-${booking.id}`}\n                        className=\"flex-1\"\n                      >\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Download Receipt\n                      </Button>\n                      {booking.status === 'confirmed' && (\n                        <Button\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          onClick={() => setBookingToCancel(booking)}\n                          data-testid={`button-cancel-${booking.id}`}\n                          className=\"flex-1\"\n                        >\n                          <X className=\"w-4 h-4 mr-2\" />\n                          Cancel Booking\n                        </Button>\n                      )}\n                    </div>\n\n                    {booking.status === 'cancelled' && (\n                      <p className=\"text-sm text-gray-500 text-center py-2\">\n                        This booking has been cancelled\n                      </p>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Cancel Confirmation Dialog */}\n      <Dialog open={!!bookingToCancel} onOpenChange={() => setBookingToCancel(null)}>\n        <DialogContent data-testid=\"cancel-dialog\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center text-red-600\">\n              <AlertTriangle className=\"w-5 h-5 mr-2\" />\n              Cancel Booking\n            </DialogTitle>\n            <DialogDescription>\n              Are you sure you want to cancel your booking at {bookingToCancel?.propertyName}? \n              This action cannot be undone.\n            </DialogDescription>\n          </DialogHeader>\n          \n          {bookingToCancel && (\n            <div className=\"space-y-4\">\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                <p className=\"font-medium text-red-800\">\n                  Confirmation: {bookingToCancel.confirmationNumber}\n                </p>\n                <p className=\"text-sm text-red-600 mt-1\">\n                  {bookingToCancel.bookingType === 'hotel' ? 'Hotel Reservation' : 'Restaurant Reservation'}\n                </p>\n              </div>\n\n              <div className=\"flex space-x-3\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setBookingToCancel(null)}\n                  className=\"flex-1\"\n                  data-testid=\"button-cancel-dialog-no\"\n                >\n                  Keep Booking\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  onClick={handleCancelBooking}\n                  disabled={cancelBookingMutation.isPending}\n                  className=\"flex-1\"\n                  data-testid=\"button-cancel-dialog-yes\"\n                >\n                  {cancelBookingMutation.isPending ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Cancelling...\n                    </>\n                  ) : (\n                    <>\n                      <X className=\"w-4 h-4 mr-2\" />\n                      Cancel Booking\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":23546},"client/src/components/trip-planner-deals.tsx":{"content":"import { Heart, ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useQuery } from '@tanstack/react-query';\nimport type { TripPlanner } from '@shared/schema';\n\nexport default function TripPlannerDeals() {\n  const { data: tripPlanners = [], isLoading, error } = useQuery<TripPlanner[]>({\n    queryKey: ['/api/trip-planners'],\n  });\n\n  const handleBookNow = () => {\n    // Navigate to trip planner page for booking\n    window.location.href = '/trip-planner';\n  };\n\n  // Map trip planners to destination images\n  const getDestinationImage = (destination: string) => {\n    const imageMap: { [key: string]: string } = {\n      \"Cox's Bazar\": \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n      \"Sylhet\": \"https://images.unsplash.com/photo-1544551763-46a013bb70d5?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n      \"Chittagong\": \"https://images.unsplash.com/photo-1571896349842-33c89424de2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n      \"Jessore\": \"https://images.unsplash.com/photo-1566073771259-6a8506099945?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\"\n    };\n    return imageMap[destination] || \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\";\n  };\n\n  if (isLoading) {\n    return (\n      <section id=\"trip-planners\" className=\"py-16 bg-white\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">Trip Planner Deals</h2>\n            <p className=\"text-gray-600\">Plan your perfect journey with our curated travel packages.</p>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"bg-white rounded-xl shadow-md animate-pulse\">\n                <div className=\"w-full h-48 bg-gray-200 rounded-t-xl\"></div>\n                <div className=\"p-4\">\n                  <div className=\"h-6 bg-gray-200 rounded mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"flex justify-between items-center\">\n                    <div className=\"h-8 bg-gray-200 rounded w-24\"></div>\n                    <div className=\"h-10 bg-gray-200 rounded w-20\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  if (error) {\n    return (\n      <section id=\"trip-planners\" className=\"py-16 bg-white\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">Trip Planner Deals</h2>\n            <p className=\"text-red-600\">Failed to load trip planner deals. Please try again later.</p>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"trip-planners\" className=\"py-8 sm:py-12 lg:py-16 section-bg-warm\">\n      <div className=\"max-w-6xl mx-auto px-3 sm:px-4 lg:px-8\">\n        <div className=\"text-center mb-8 sm:mb-10 lg:mb-12\">\n          <div className=\"flex justify-center mb-3 sm:mb-4\">\n            <div className=\"icon-bg-orange\">\n              <svg className=\"w-5 sm:w-6 h-5 sm:h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7\" />\n              </svg>\n            </div>\n          </div>\n          <h2 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-900 mb-3 sm:mb-4\">Trip Planner Deals</h2>\n          <p className=\"text-base sm:text-lg text-gray-600\">Plan your perfect journey with our curated travel packages.</p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 md:gap-6 max-w-4xl mx-auto mb-6 md:mb-8\">\n          {tripPlanners.slice(0, 4).map((tripPlanner, index) => (\n            <div \n              key={tripPlanner.id}\n              className=\"bg-white rounded-lg md:rounded-xl overflow-hidden shadow-sm md:shadow-lg transition-shadow duration-300 hover:shadow-md\"\n              style={{ animationDelay: `${index * 0.1}s` }}\n              data-testid={`card-trip-planner-${tripPlanner.id}`}\n            >\n              {/* Image Section */}\n              <div className=\"relative\">\n                <img \n                  src={getDestinationImage(tripPlanner.destination)} \n                  alt={tripPlanner.destination}\n                  className=\"w-full h-32 md:h-40 object-cover\"\n                />\n              </div>\n              \n              {/* Content Section */}\n              <div className=\"p-3 md:p-4\">\n                {/* Route with arrow */}\n                <div className=\"mb-3\">\n                  <h3 className=\"text-sm md:text-lg font-semibold text-gray-900\">{tripPlanner.origin} â {tripPlanner.destination}</h3>\n                  <p className=\"text-gray-600 text-xs md:text-sm\">{tripPlanner.duration || '2h 30m'}</p>\n                </div>\n                \n                {/* Flight Details */}\n                <div className=\"space-y-2 mb-3\">\n                  <div className=\"flex items-center justify-between text-xs md:text-sm\">\n                    <span className=\"text-gray-500\">Departure</span>\n                    <span className=\"font-medium\">{tripPlanner.departureDate}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-xs md:text-sm\">\n                    <span className=\"text-gray-500\">Flight</span>\n                    <span className=\"text-blue-600 font-medium\">{tripPlanner.stops || 'Non-stop'}</span>\n                  </div>\n                </div>\n                \n                {/* Pricing and Button */}\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"text-lg md:text-xl font-bold text-primary\">à§³{tripPlanner.price}</div>\n                    <div className=\"text-xs text-gray-500\">per person</div>\n                  </div>\n                  <Button \n                    onClick={handleBookNow}\n                    className=\"bg-primary text-white px-3 py-1.5 md:px-4 md:py-2 rounded-md text-xs md:text-sm font-medium transition-colors hover:bg-primary/90\"\n                    data-testid={`button-book-trip-planner-${tripPlanner.id}`}\n                  >\n                    Select Flight\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n        \n        {/* Navigation Arrows */}\n        <div className=\"flex justify-center space-x-4\">\n          <button className=\"p-2 rounded-full border border-gray-300 hover:bg-gray-50 transition-colors\">\n            <ChevronLeft className=\"w-5 h-5 text-gray-600\" />\n          </button>\n          <button className=\"p-2 rounded-full border border-gray-300 hover:bg-gray-50 transition-colors\">\n            <ChevronRight className=\"w-5 h-5 text-gray-600\" />\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7417},"client/src/pages/trip-planner.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Plane, Bus, Car, Clock, MapPin, Star, DollarSign, Users, Calendar, ArrowRight } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Label } from '@/components/ui/label';\nimport Navigation from '@/components/navigation';\nimport Footer from '@/components/footer';\n\nimport { useAuth } from '@/hooks/useAuth';\nimport { useToast } from '@/hooks/use-toast';\nimport { useLocation } from 'wouter';\nimport type { TripPlanner, Bus as BusType, PrivateCar } from '@shared/schema';\n\nexport default function TripPlannerPage() {\n  const { isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n  const [origin, setOrigin] = useState('');\n  const [destination, setDestination] = useState('');\n  const [departureDate, setDepartureDate] = useState('');\n  const [passengers, setPassengers] = useState('');\n  \n  // Flight-specific state\n  const [tripType, setTripType] = useState('');\n  const [flightFrom, setFlightFrom] = useState('');\n  const [flightTo, setFlightTo] = useState('');\n  const [flightDepartureDate, setFlightDepartureDate] = useState('');\n  const [flightReturnDate, setFlightReturnDate] = useState('');\n  const [flightTravelers, setFlightTravelers] = useState('');\n  const [flightClass, setFlightClass] = useState('');\n\n  // Bus-specific state\n  const [busTripType, setBusTripType] = useState('');\n  const [busFrom, setBusFrom] = useState('');\n  const [busTo, setBusTo] = useState('');\n  const [busTravelDate, setBusTravelDate] = useState('');\n  const [busReturnDate, setBusReturnDate] = useState('');\n  const [busPassengers, setBusPassengers] = useState('');\n  const [busType, setBusType] = useState('');\n  const [busDepartureTime, setBusDepartureTime] = useState('');\n\n  // Car-specific state\n  const [carPickup, setCarPickup] = useState('');\n  const [carDropoff, setCarDropoff] = useState('');\n  const [carDate, setCarDate] = useState('');\n  const [carTime, setCarTime] = useState('');\n  const [carPassengers, setCarPassengers] = useState('');\n  const [carType, setCarType] = useState('');\n  const [carTripType, setCarTripType] = useState('');\n  \n\n\n  const { data: tripPlanners = [], isLoading } = useQuery<TripPlanner[]>({\n    queryKey: ['/api/trip-planners'],\n  });\n\n  const { data: buses = [] } = useQuery<BusType[]>({\n    queryKey: ['/api/buses'],\n  });\n\n  const { data: privateCars = [] } = useQuery<PrivateCar[]>({\n    queryKey: ['/api/private-cars'],\n  });\n\n  // Filter transportation options based on selected routes\n  const filteredFlights = tripPlanners.filter(flight => \n    (!flightFrom || flight.origin === flightFrom) && \n    (!flightTo || flight.destination === flightTo)\n  );\n\n  const filteredBuses = buses.filter(bus => \n    (!busFrom || bus.origin === busFrom) && \n    (!busTo || bus.destination === busTo)\n  );\n\n  const filteredCars = privateCars.filter(car => \n    (!carPickup || car.origin === carPickup) && \n    (!carDropoff || car.destination === carDropoff)\n  );\n\n  const handleSearch = () => {\n\n  };\n\n  const openBookingDialog = (item: TripPlanner | BusType | PrivateCar, type: 'flight' | 'bus' | 'car') => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Sign In Required\",\n        description: \"Please sign in to make a booking. You'll be redirected to the login page.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        navigate('/sign-in');\n      }, 1000);\n      return;\n    }\n\n    // Navigate to transport booking page\n    navigate(`/transport-booking/${type}/${item.id}`);\n  };\n\n  return (\n    <div className=\"min-h-screen section-bg-soft\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <div \n        className=\"relative text-white py-16 bg-cover bg-center bg-no-repeat\"\n        style={{\n          backgroundImage: `url('/attached_assets/penedo3_1755684327033.png')`\n        }}\n      >\n        {/* Overlay for better text readability */}\n        <div className=\"absolute inset-0 bg-black/40\"></div>\n        \n        <div className=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"bg-white/20 backdrop-blur-sm rounded-xl w-12 h-12 flex items-center justify-center\">\n                <Plane className=\"w-6 h-6 text-white\" />\n              </div>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-4 drop-shadow-lg\">\n              <span className=\"text-accent bg-gradient-to-r from-accent to-yellow-400 bg-clip-text text-transparent\">Trip Planner</span>\n            </h1>\n            <p className=\"text-xl opacity-90 drop-shadow-lg\">Compare and choose the best transportation option for your journey</p>\n          </div>\n\n        </div>\n      </div>\n\n      {/* Transportation Options */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <Tabs defaultValue=\"flights\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3 mb-8\">\n            <TabsTrigger value=\"flights\" className=\"flex items-center space-x-2\">\n              <Plane className=\"w-4 h-4\" />\n              <span>Flights</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"buses\" className=\"flex items-center space-x-2\">\n              <Bus className=\"w-4 h-4\" />\n              <span>Buses</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"cars\" className=\"flex items-center space-x-2\">\n              <Car className=\"w-4 h-4\" />\n              <span>Private Cars</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Flights Tab */}\n          <TabsContent value=\"flights\">\n            {/* Flight Search Form */}\n            <div className=\"bg-white rounded-lg shadow-lg p-6 mb-8\">\n              <div className=\"mb-6\">\n                <RadioGroup value={tripType} onValueChange={setTripType} className=\"flex space-x-6\">\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"oneWay\" id=\"oneWay\" />\n                    <Label htmlFor=\"oneWay\" className=\"font-medium\">One Way</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"roundTrip\" id=\"roundTrip\" />\n                    <Label htmlFor=\"roundTrip\" className=\"font-medium\">Round Trip</Label>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              <div className={`grid grid-cols-1 md:grid-cols-2 gap-4 mb-4 ${tripType === 'roundTrip' ? 'lg:grid-cols-4' : 'lg:grid-cols-3'}`}>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">FROM</Label>\n                  <Select value={flightFrom} onValueChange={setFlightFrom}>\n                    <SelectTrigger className=\"h-12\">\n                      <SelectValue placeholder=\"Select departure city\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Dhaka\">Dhaka - DAC, Hazrat Shahjalal International Airport</SelectItem>\n                      <SelectItem value=\"Chittagong\">Chittagong - CGP, Shah Amanat International Airport</SelectItem>\n                      <SelectItem value=\"Cox's Bazar\">Cox's Bazar - CXB, Cox's Bazar Airport</SelectItem>\n                      <SelectItem value=\"Sylhet\">Sylhet - ZYL, Osmani International Airport</SelectItem>\n                      <SelectItem value=\"Jessore\">Jessore - JSR, Jessore Airport</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">TO</Label>\n                  <Select value={flightTo} onValueChange={setFlightTo}>\n                    <SelectTrigger className=\"h-12\">\n                      <SelectValue placeholder=\"Select destination\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Cox's Bazar\">Cox's Bazar - CXB, Cox's Bazar Airport</SelectItem>\n                      <SelectItem value=\"Dhaka\">Dhaka - DAC, Hazrat Shahjalal International Airport</SelectItem>\n                      <SelectItem value=\"Chittagong\">Chittagong - CGP, Shah Amanat International Airport</SelectItem>\n                      <SelectItem value=\"Sylhet\">Sylhet - ZYL, Osmani International Airport</SelectItem>\n                      <SelectItem value=\"Jessore\">Jessore - JSR, Jessore Airport</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">DEPARTURE DATE</Label>\n                  <Input\n                    type=\"date\"\n                    value={flightDepartureDate}\n                    onChange={(e) => setFlightDepartureDate(e.target.value)}\n                    className=\"h-12\"\n                  />\n                </div>\n\n                {tripType === 'roundTrip' && (\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">RETURN DATE</Label>\n                    <Input\n                      type=\"date\"\n                      value={flightReturnDate}\n                      onChange={(e) => setFlightReturnDate(e.target.value)}\n                      className=\"h-12\"\n                      placeholder=\"Save more on return flight\"\n                    />\n                  </div>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">TRAVELERS</Label>\n                  <Select value={flightTravelers} onValueChange={setFlightTravelers}>\n                    <SelectTrigger className=\"h-12\">\n                      <SelectValue placeholder=\"Select travelers\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"1\">1 Traveler</SelectItem>\n                      <SelectItem value=\"2\">2 Travelers</SelectItem>\n                      <SelectItem value=\"3\">3 Travelers</SelectItem>\n                      <SelectItem value=\"4\">4 Travelers</SelectItem>\n                      <SelectItem value=\"5\">5+ Travelers</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">CLASS</Label>\n                  <Select value={flightClass} onValueChange={setFlightClass}>\n                    <SelectTrigger className=\"h-12\">\n                      <SelectValue placeholder=\"Select class\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Economy\">Economy</SelectItem>\n                      <SelectItem value=\"Business\">Business</SelectItem>\n                      <SelectItem value=\"First\">First Class</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <Button \n                onClick={handleSearch} \n                className=\"w-full bg-blue-600 hover:bg-blue-700 h-12 text-lg\"\n              >\n                Search Flights\n              </Button>\n            </div>\n\n            {/* Hot Deals Section */}\n            <div className=\"mb-8\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div>\n                  <h2 className=\"text-2xl font-bold text-gray-900 mb-1\">ð¥ Hot Flight Deals</h2>\n                  <p className=\"text-gray-600\">Limited time offers - book now and save big!</p>\n                </div>\n                <Badge className=\"bg-red-500 text-white animate-pulse\">LIMITED TIME</Badge>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6\">\n                <Card className=\"border-2 border-red-200 bg-gradient-to-r from-red-50 to-orange-50\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <Badge className=\"bg-red-500 text-white text-xs\">SAVE 40%</Badge>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm text-gray-500 line-through\">à§³8,000</div>\n                        <div className=\"text-xl font-bold text-red-600\">à§³4,800</div>\n                      </div>\n                    </div>\n                    <h3 className=\"font-semibold mb-1\">Dhaka â Cox's Bazar</h3>\n                    <p className=\"text-sm text-gray-600 mb-2\">US-Bangla Airlines â¢ Jan 25-30</p>\n                    <div className=\"flex items-center justify-between text-xs mb-2\">\n                      <span className=\"text-green-600\">â Free cancellation</span>\n                      <span className=\"text-red-500 font-medium\">3 seats left</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"bg-red-100 border border-red-300 rounded px-2 py-1 flex items-center space-x-1\">\n                        <span className=\"text-xs text-red-600 font-mono font-bold\">FLIGHT40</span>\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\" \n                          className=\"h-4 w-4 p-0 text-red-600 hover:bg-red-200\"\n                          onClick={() => navigator.clipboard.writeText('FLIGHT40')}\n                        >\n                          ð\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-2 border-blue-200 bg-gradient-to-r from-blue-50 to-cyan-50\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <Badge className=\"bg-blue-500 text-white text-xs\">SAVE 35%</Badge>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm text-gray-500 line-through\">à§³12,000</div>\n                        <div className=\"text-xl font-bold text-blue-600\">à§³7,800</div>\n                      </div>\n                    </div>\n                    <h3 className=\"font-semibold mb-1\">Dhaka â Chittagong</h3>\n                    <p className=\"text-sm text-gray-600 mb-2\">Biman Bangladesh â¢ Round Trip</p>\n                    <div className=\"flex items-center justify-between text-xs mb-2\">\n                      <span className=\"text-green-600\">â Meals included</span>\n                      <span className=\"text-blue-500 font-medium\">7 seats left</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"bg-blue-100 border border-blue-300 rounded px-2 py-1 flex items-center space-x-1\">\n                        <span className=\"text-xs text-blue-600 font-mono font-bold\">ROUND35</span>\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\" \n                          className=\"h-4 w-4 p-0 text-blue-600 hover:bg-blue-200\"\n                          onClick={() => navigator.clipboard.writeText('ROUND35')}\n                        >\n                          ð\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-2 border-green-200 bg-gradient-to-r from-green-50 to-emerald-50\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <Badge className=\"bg-green-500 text-white text-xs\">SAVE 30%</Badge>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm text-gray-500 line-through\">à§³15,000</div>\n                        <div className=\"text-xl font-bold text-green-600\">à§³10,500</div>\n                      </div>\n                    </div>\n                    <h3 className=\"font-semibold mb-1\">Dhaka â Sylhet</h3>\n                    <p className=\"text-sm text-gray-600 mb-2\">Novoair â¢ Business Class</p>\n                    <div className=\"flex items-center justify-between text-xs mb-2\">\n                      <span className=\"text-green-600\">â Lounge access</span>\n                      <span className=\"text-green-500 font-medium\">2 seats left</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"bg-green-100 border border-green-300 rounded px-2 py-1 flex items-center space-x-1\">\n                        <span className=\"text-xs text-green-600 font-mono font-bold\">BIZCLASS30</span>\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\" \n                          className=\"h-4 w-4 p-0 text-green-600 hover:bg-green-200\"\n                          onClick={() => navigator.clipboard.writeText('BIZCLASS30')}\n                        >\n                          ð\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Flight Options</h2>\n              <p className=\"text-gray-600\">Choose from available flights for your journey</p>\n            </div>\n\n            {isLoading ? (\n              <div className=\"grid gap-4\">\n                {[...Array(3)].map((_, i) => (\n                  <Card key={i} className=\"elegant-card animate-pulse\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"h-6 bg-gray-200 rounded mb-4\"></div>\n                      <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                      <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"grid gap-4\">\n                {filteredFlights.map((flight) => (\n                  <Card key={flight.id} className=\"elegant-card hover-lift transition-butter\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                            <Plane className=\"w-6 h-6 text-blue-600\" />\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold text-lg\">{flight.origin} â {flight.destination}</h3>\n                            <p className=\"text-gray-600\">{flight.duration}</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-2xl font-bold text-green-600\">à§³{flight.price}</div>\n                          <p className=\"text-sm text-gray-600\">per person</p>\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Calendar className=\"w-4 h-4 text-gray-400\" />\n                          <span className=\"text-sm\">{flight.departureDate}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Clock className=\"w-4 h-4 text-gray-400\" />\n                          <span className=\"text-sm\">{flight.stops}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant=\"secondary\">{flight.dealType}</Badge>\n                        </div>\n                      </div>\n\n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                          <span className=\"text-sm\">4.5</span>\n                        </div>\n                        <Button \n                          className=\"bg-blue-600 hover:bg-blue-700\"\n                          onClick={() => openBookingDialog(flight, 'flight')}\n                        >\n                          Select Flight\n                          <ArrowRight className=\"w-4 h-4 ml-2\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Buses Tab */}\n          <TabsContent value=\"buses\">\n            {/* Bus Search Form */}\n            <div className=\"bg-white rounded-lg shadow-lg p-6 mb-8\">\n              <div className=\"mb-6\">\n                <RadioGroup value={busTripType} onValueChange={setBusTripType} className=\"flex space-x-6\">\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"oneWay\" id=\"busOneWay\" />\n                    <Label htmlFor=\"busOneWay\" className=\"font-medium\">One Way</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"roundTrip\" id=\"busRoundTrip\" />\n                    <Label htmlFor=\"busRoundTrip\" className=\"font-medium\">Round Trip</Label>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              <div className={`grid grid-cols-1 md:grid-cols-2 gap-4 mb-4 ${busTripType === 'roundTrip' ? 'lg:grid-cols-4' : 'lg:grid-cols-3'}`}>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">FROM</Label>\n                  <Select value={busFrom} onValueChange={setBusFrom}>\n                    <SelectTrigger className=\"h-12\">\n                      <SelectValue placeholder=\"Select departure city\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Dhaka\">Dhaka</SelectItem>\n                      <SelectItem value=\"Chittagong\">Chittagong</SelectItem>\n                      <SelectItem value=\"Cox's Bazar\">Cox's Bazar</SelectItem>\n                      <SelectItem value=\"Sylhet\">Sylhet</SelectItem>\n                      <SelectItem value=\"Rangpur\">Rangpur</SelectItem>\n                      <SelectItem value=\"Rajshahi\">Rajshahi</SelectItem>\n                      <SelectItem value=\"Khulna\">Khulna</SelectItem>\n                      <SelectItem value=\"Barisal\">Barisal</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">TO</Label>\n                  <Select value={busTo} onValueChange={setBusTo}>\n                    <SelectTrigger className=\"h-12\">\n                      <SelectValue placeholder=\"Select destination\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Cox's Bazar\">Cox's Bazar</SelectItem>\n                      <SelectItem value=\"Dhaka\">Dhaka</SelectItem>\n                      <SelectItem value=\"Chittagong\">Chittagong</SelectItem>\n                      <SelectItem value=\"Sylhet\">Sylhet</SelectItem>\n                      <SelectItem value=\"Rangpur\">Rangpur</SelectItem>\n                      <SelectItem value=\"Rajshahi\">Rajshahi</SelectItem>\n                      <SelectItem value=\"Khulna\">Khulna</SelectItem>\n                      <SelectItem value=\"Barisal\">Barisal</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">DEPARTURE DATE</Label>\n                  <Input\n                    type=\"date\"\n                    value={busTravelDate}\n                    onChange={(e) => setBusTravelDate(e.target.value)}\n                    className=\"h-12\"\n                  />\n                </div>\n\n                {busTripType === 'roundTrip' && (\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">RETURN DATE</Label>\n                    <Input\n                      type=\"date\"\n                      value={busReturnDate}\n                      onChange={(e) => setBusReturnDate(e.target.value)}\n                      className=\"h-12\"\n                    />\n                  </div>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">PASSENGERS</Label>\n                  <Select value={busPassengers} onValueChange={setBusPassengers}>\n                    <SelectTrigger className=\"h-12\">\n                      <SelectValue placeholder=\"Select passengers\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"1\">1 Passenger</SelectItem>\n                      <SelectItem value=\"2\">2 Passengers</SelectItem>\n                      <SelectItem value=\"3\">3 Passengers</SelectItem>\n                      <SelectItem value=\"4\">4 Passengers</SelectItem>\n                      <SelectItem value=\"5\">5+ Passengers</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">BUS TYPE</Label>\n                  <Select value={busType} onValueChange={setBusType}>\n                    <SelectTrigger className=\"h-12\">\n                      <SelectValue placeholder=\"Select bus type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"AC Bus\">AC Bus</SelectItem>\n                      <SelectItem value=\"Non-AC Bus\">Non-AC Bus</SelectItem>\n                      <SelectItem value=\"Sleeper Coach\">Sleeper Coach</SelectItem>\n                      <SelectItem value=\"Double Decker\">Double Decker</SelectItem>\n                      <SelectItem value=\"Luxury Coach\">Luxury Coach</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">PREFERRED TIME</Label>\n                  <Select value={busDepartureTime} onValueChange={setBusDepartureTime}>\n                    <SelectTrigger className=\"h-12\">\n                      <SelectValue placeholder=\"Select preferred time\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"anytime\">Any time</SelectItem>\n                      <SelectItem value=\"morning\">Morning (6AM - 12PM)</SelectItem>\n                      <SelectItem value=\"afternoon\">Afternoon (12PM - 6PM)</SelectItem>\n                      <SelectItem value=\"evening\">Evening (6PM - 10PM)</SelectItem>\n                      <SelectItem value=\"night\">Night (10PM - 6AM)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <Button \n                onClick={handleSearch} \n                className=\"w-full bg-green-600 hover:bg-green-700 h-12 text-lg\"\n              >\n                Search Buses\n              </Button>\n            </div>\n\n            {/* Hot Deals Section */}\n            <div className=\"mb-8\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div>\n                  <h2 className=\"text-2xl font-bold text-gray-900 mb-1\">ð¥ Hot Bus Deals</h2>\n                  <p className=\"text-gray-600\">Special discounts on popular routes!</p>\n                </div>\n                <Badge className=\"bg-red-500 text-white animate-pulse\">TODAY ONLY</Badge>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6\">\n                <Card className=\"border-2 border-green-200 bg-gradient-to-r from-green-50 to-lime-50\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <Badge className=\"bg-green-600 text-white text-xs\">SAVE 25%</Badge>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm text-gray-500 line-through\">à§³1,200</div>\n                        <div className=\"text-xl font-bold text-green-600\">à§³900</div>\n                      </div>\n                    </div>\n                    <h3 className=\"font-semibold mb-1\">Dhaka â Cox's Bazar</h3>\n                    <p className=\"text-sm text-gray-600 mb-2\">Green Line AC â¢ Sleeper Coach</p>\n                    <div className=\"flex items-center justify-between text-xs mb-2\">\n                      <span className=\"text-green-600\">â WiFi & Charging</span>\n                      <span className=\"text-green-500 font-medium\">12 seats left</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"bg-green-100 border border-green-300 rounded px-2 py-1 flex items-center space-x-1\">\n                        <span className=\"text-xs text-green-600 font-mono font-bold\">BUS25SAVE</span>\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\" \n                          className=\"h-4 w-4 p-0 text-green-600 hover:bg-green-200\"\n                          onClick={() => navigator.clipboard.writeText('BUS25SAVE')}\n                        >\n                          ð\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-2 border-orange-200 bg-gradient-to-r from-orange-50 to-yellow-50\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <Badge className=\"bg-orange-500 text-white text-xs\">SAVE 20%</Badge>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm text-gray-500 line-through\">à§³800</div>\n                        <div className=\"text-xl font-bold text-orange-600\">à§³640</div>\n                      </div>\n                    </div>\n                    <h3 className=\"font-semibold mb-1\">Dhaka â Chittagong</h3>\n                    <p className=\"text-sm text-gray-600 mb-2\">Shohag Paribahan â¢ AC Bus</p>\n                    <div className=\"flex items-center justify-between text-xs mb-2\">\n                      <span className=\"text-green-600\">â Snacks included</span>\n                      <span className=\"text-orange-500 font-medium\">8 seats left</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"bg-orange-100 border border-orange-300 rounded px-2 py-1 flex items-center space-x-1\">\n                        <span className=\"text-xs text-orange-600 font-mono font-bold\">COMFORT20</span>\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\" \n                          className=\"h-4 w-4 p-0 text-orange-600 hover:bg-orange-200\"\n                          onClick={() => navigator.clipboard.writeText('COMFORT20')}\n                        >\n                          ð\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-2 border-purple-200 bg-gradient-to-r from-purple-50 to-pink-50\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <Badge className=\"bg-purple-500 text-white text-xs\">SAVE 30%</Badge>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm text-gray-500 line-through\">à§³1,500</div>\n                        <div className=\"text-xl font-bold text-purple-600\">à§³1,050</div>\n                      </div>\n                    </div>\n                    <h3 className=\"font-semibold mb-1\">Dhaka â Sylhet</h3>\n                    <p className=\"text-sm text-gray-600 mb-2\">Ena Transport â¢ Luxury Coach</p>\n                    <div className=\"flex items-center justify-between text-xs mb-2\">\n                      <span className=\"text-green-600\">â Reclining seats</span>\n                      <span className=\"text-purple-500 font-medium\">5 seats left</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"bg-purple-100 border border-purple-300 rounded px-2 py-1 flex items-center space-x-1\">\n                        <span className=\"text-xs text-purple-600 font-mono font-bold\">LUXURY30</span>\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\" \n                          className=\"h-4 w-4 p-0 text-purple-600 hover:bg-purple-200\"\n                          onClick={() => navigator.clipboard.writeText('LUXURY30')}\n                        >\n                          ð\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Bus Options</h2>\n              <p className=\"text-gray-600\">Comfortable and affordable bus services</p>\n            </div>\n\n            <div className=\"grid gap-4\">\n              {filteredBuses.map((bus) => (\n                <Card key={bus.id} className=\"elegant-card hover-lift transition-butter\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                          <Bus className=\"w-6 h-6 text-green-600\" />\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold text-lg\">{bus.operator}</h3>\n                          <p className=\"text-gray-600\">{bus.type}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-green-600\">à§³{bus.price}</div>\n                        <p className=\"text-sm text-gray-600\">per seat</p>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Clock className=\"w-4 h-4 text-gray-400\" />\n                        <span className=\"text-sm\">{bus.departure} - {bus.arrival}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <MapPin className=\"w-4 h-4 text-gray-400\" />\n                        <span className=\"text-sm\">{bus.duration}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Users className=\"w-4 h-4 text-gray-400\" />\n                        <span className=\"text-sm\">{bus.seats} seats</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                        <span className=\"text-sm\">{bus.rating}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"mb-4\">\n                      <p className=\"text-sm text-gray-600 mb-2\">Amenities:</p>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {bus.amenities.map((amenity) => (\n                          <Badge key={amenity} variant=\"outline\">{amenity}</Badge>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div className=\"flex justify-end\">\n                      <Button \n                        className=\"bg-green-600 hover:bg-green-700\"\n                        onClick={() => openBookingDialog(bus, 'bus')}\n                      >\n                        Select Bus\n                        <ArrowRight className=\"w-4 h-4 ml-2\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          {/* Private Cars Tab */}\n          <TabsContent value=\"cars\">\n            {/* Car Search Form */}\n            <div className=\"bg-white rounded-lg shadow-lg p-6 mb-8\">\n              <div className=\"mb-6\">\n                <RadioGroup value={carTripType} onValueChange={setCarTripType} className=\"flex space-x-6\">\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"oneWay\" id=\"carOneWay\" />\n                    <Label htmlFor=\"carOneWay\" className=\"font-medium\">One Way</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"roundTrip\" id=\"carRoundTrip\" />\n                    <Label htmlFor=\"carRoundTrip\" className=\"font-medium\">Round Trip</Label>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">PICKUP LOCATION</Label>\n                  <Select value={carPickup} onValueChange={setCarPickup}>\n                    <SelectTrigger className=\"h-12\">\n                      <SelectValue placeholder=\"Select pickup location\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Dhaka\">Dhaka City</SelectItem>\n                      <SelectItem value=\"Dhaka Airport\">Dhaka Airport</SelectItem>\n                      <SelectItem value=\"Chittagong\">Chittagong City</SelectItem>\n                      <SelectItem value=\"Cox's Bazar\">Cox's Bazar</SelectItem>\n                      <SelectItem value=\"Sylhet\">Sylhet City</SelectItem>\n                      <SelectItem value=\"Rangpur\">Rangpur</SelectItem>\n                      <SelectItem value=\"Rajshahi\">Rajshahi</SelectItem>\n                      <SelectItem value=\"Khulna\">Khulna</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">DROP-OFF LOCATION</Label>\n                  <Select value={carDropoff} onValueChange={setCarDropoff}>\n                    <SelectTrigger className=\"h-12\">\n                      <SelectValue placeholder=\"Select drop-off location\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Cox's Bazar\">Cox's Bazar</SelectItem>\n                      <SelectItem value=\"Dhaka\">Dhaka City</SelectItem>\n                      <SelectItem value=\"Dhaka Airport\">Dhaka Airport</SelectItem>\n                      <SelectItem value=\"Chittagong\">Chittagong City</SelectItem>\n                      <SelectItem value=\"Sylhet\">Sylhet City</SelectItem>\n                      <SelectItem value=\"Rangpur\">Rangpur</SelectItem>\n                      <SelectItem value=\"Rajshahi\">Rajshahi</SelectItem>\n                      <SelectItem value=\"Khulna\">Khulna</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">PICKUP DATE</Label>\n                  <Input\n                    type=\"date\"\n                    value={carDate}\n                    onChange={(e) => setCarDate(e.target.value)}\n                    className=\"h-12\"\n                  />\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">PICKUP TIME</Label>\n                  <Input\n                    type=\"time\"\n                    value={carTime}\n                    onChange={(e) => setCarTime(e.target.value)}\n                    className=\"h-12\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">PASSENGERS</Label>\n                  <Select value={carPassengers} onValueChange={setCarPassengers}>\n                    <SelectTrigger className=\"h-12\">\n                      <SelectValue placeholder=\"Select passengers\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"1\">1 Passenger</SelectItem>\n                      <SelectItem value=\"2\">2 Passengers</SelectItem>\n                      <SelectItem value=\"3\">3 Passengers</SelectItem>\n                      <SelectItem value=\"4\">4 Passengers</SelectItem>\n                      <SelectItem value=\"5\">5 Passengers</SelectItem>\n                      <SelectItem value=\"6\">6+ Passengers</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600 mb-1 block\">CAR TYPE</Label>\n                  <Select value={carType} onValueChange={setCarType}>\n                    <SelectTrigger className=\"h-12\">\n                      <SelectValue placeholder=\"Select car type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Sedan\">Sedan (4 seats)</SelectItem>\n                      <SelectItem value=\"SUV\">SUV (6-7 seats)</SelectItem>\n                      <SelectItem value=\"Microbus\">Microbus (8-12 seats)</SelectItem>\n                      <SelectItem value=\"Luxury\">Luxury Car</SelectItem>\n                      <SelectItem value=\"Mini Van\">Mini Van (10+ seats)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <Button \n                onClick={handleSearch} \n                className=\"w-full bg-purple-600 hover:bg-purple-700 h-12 text-lg\"\n              >\n                Search Private Cars\n              </Button>\n            </div>\n\n            {/* Hot Deals Section */}\n            <div className=\"mb-8\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div>\n                  <h2 className=\"text-2xl font-bold text-gray-900 mb-1\">ð¥ Hot Car Rental Deals</h2>\n                  <p className=\"text-gray-600\">Exclusive offers on premium vehicles!</p>\n                </div>\n                <Badge className=\"bg-red-500 text-white animate-pulse\">WEEKEND SPECIAL</Badge>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6\">\n                <Card className=\"border-2 border-purple-200 bg-gradient-to-r from-purple-50 to-indigo-50\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <Badge className=\"bg-purple-600 text-white text-xs\">SAVE 40%</Badge>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm text-gray-500 line-through\">à§³5,000</div>\n                        <div className=\"text-xl font-bold text-purple-600\">à§³3,000</div>\n                      </div>\n                    </div>\n                    <h3 className=\"font-semibold mb-1\">Toyota Premio - Sedan</h3>\n                    <p className=\"text-sm text-gray-600 mb-2\">Dhaka to Cox's Bazar â¢ Full Day</p>\n                    <div className=\"flex items-center justify-between text-xs mb-2\">\n                      <span className=\"text-green-600\">â AC + Driver included</span>\n                      <span className=\"text-purple-500 font-medium\">3 cars left</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"bg-purple-100 border border-purple-300 rounded px-2 py-1 flex items-center space-x-1\">\n                        <span className=\"text-xs text-purple-600 font-mono font-bold\">CAR40OFF</span>\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\" \n                          className=\"h-4 w-4 p-0 text-purple-600 hover:bg-purple-200\"\n                          onClick={() => navigator.clipboard.writeText('CAR40OFF')}\n                        >\n                          ð\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-2 border-blue-200 bg-gradient-to-r from-blue-50 to-sky-50\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <Badge className=\"bg-blue-600 text-white text-xs\">SAVE 35%</Badge>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm text-gray-500 line-through\">à§³8,000</div>\n                        <div className=\"text-xl font-bold text-blue-600\">à§³5,200</div>\n                      </div>\n                    </div>\n                    <h3 className=\"font-semibold mb-1\">Toyota Hiace - Microbus</h3>\n                    <p className=\"text-sm text-gray-600 mb-2\">Airport Transfer â¢ 12 Seats</p>\n                    <div className=\"flex items-center justify-between text-xs mb-2\">\n                      <span className=\"text-green-600\">â Free waiting time</span>\n                      <span className=\"text-blue-500 font-medium\">2 cars left</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"bg-blue-100 border border-blue-300 rounded px-2 py-1 flex items-center space-x-1\">\n                        <span className=\"text-xs text-blue-600 font-mono font-bold\">MICRO35</span>\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\" \n                          className=\"h-4 w-4 p-0 text-blue-600 hover:bg-blue-200\"\n                          onClick={() => navigator.clipboard.writeText('MICRO35')}\n                        >\n                          ð\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-2 border-emerald-200 bg-gradient-to-r from-emerald-50 to-teal-50\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <Badge className=\"bg-emerald-600 text-white text-xs\">SAVE 50%</Badge>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm text-gray-500 line-through\">à§³12,000</div>\n                        <div className=\"text-xl font-bold text-emerald-600\">à§³6,000</div>\n                      </div>\n                    </div>\n                    <h3 className=\"font-semibold mb-1\">Mercedes E-Class - Luxury</h3>\n                    <p className=\"text-sm text-gray-600 mb-2\">City Tour â¢ Premium Experience</p>\n                    <div className=\"flex items-center justify-between text-xs mb-2\">\n                      <span className=\"text-green-600\">â Luxury amenities</span>\n                      <span className=\"text-emerald-500 font-medium\">1 car left</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"bg-emerald-100 border border-emerald-300 rounded px-2 py-1 flex items-center space-x-1\">\n                        <span className=\"text-xs text-emerald-600 font-mono font-bold\">LUXURY50</span>\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\" \n                          className=\"h-4 w-4 p-0 text-emerald-600 hover:bg-emerald-200\"\n                          onClick={() => navigator.clipboard.writeText('LUXURY50')}\n                        >\n                          ð\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Private Car Options</h2>\n              <p className=\"text-gray-600\">Comfortable private transportation with professional drivers</p>\n            </div>\n\n            <div className=\"grid gap-4\">\n              {filteredCars.map((car) => (\n                <Card key={car.id} className=\"elegant-card hover-lift transition-butter\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center\">\n                          <Car className=\"w-6 h-6 text-purple-600\" />\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold text-lg\">{car.type}</h3>\n                          <p className=\"text-gray-600\">{car.category}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-green-600\">à§³{car.price}</div>\n                        <p className=\"text-sm text-gray-600\">total trip</p>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Users className=\"w-4 h-4 text-gray-400\" />\n                        <span className=\"text-sm\">Up to {car.capacity} passengers</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Clock className=\"w-4 h-4 text-gray-400\" />\n                        <span className=\"text-sm\">{car.duration}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <DollarSign className=\"w-4 h-4 text-gray-400\" />\n                        <span className=\"text-sm\">{car.driver}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                        <span className=\"text-sm\">{car.rating}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"mb-4\">\n                      <p className=\"text-sm text-gray-600 mb-2\">Features:</p>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {car.features.map((feature) => (\n                          <Badge key={feature} variant=\"outline\">{feature}</Badge>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div className=\"flex justify-end\">\n                      <Button \n                        className=\"bg-purple-600 hover:bg-purple-700\"\n                        onClick={() => openBookingDialog(car, 'car')}\n                      >\n                        Select Car\n                        <ArrowRight className=\"w-4 h-4 ml-2\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":53847},"client/src/components/booking-dialog.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useMutation, useQueryClient, useQuery } from '@tanstack/react-query';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Calendar, Clock, Users, MapPin, CreditCard, User, Mail, Phone, Tag } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { TripPlanner, Bus, PrivateCar, Booking } from '@shared/schema';\n\nconst bookingSchema = z.object({\n  customerName: z.string().min(2, 'Name must be at least 2 characters'),\n  email: z.string().email('Please enter a valid email address'),\n  phone: z.string().min(10, 'Phone number must be at least 10 digits'),\n  passengers: z.string().min(1, 'Number of passengers is required'),\n  couponCode: z.string().optional(),\n  specialRequests: z.string().optional(),\n  travelDate: z.string().min(1, 'Travel date is required'),\n});\n\ntype BookingFormData = z.infer<typeof bookingSchema>;\n\ninterface BookingDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  item: TripPlanner | Bus | PrivateCar | null;\n  type: 'flight' | 'bus' | 'car';\n}\n\nexport default function BookingDialog({ isOpen, onClose, item, type }: BookingDialogProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [selectedSeats, setSelectedSeats] = useState<string[]>([]);\n  const [couponDiscount, setCouponDiscount] = useState(0);\n  const [couponApplied, setCouponApplied] = useState(false);\n  const { toast } = useToast();\n  const { user, isAuthenticated } = useAuth();\n  const queryClient = useQueryClient();\n\n  const form = useForm<BookingFormData>({\n    resolver: zodResolver(bookingSchema),\n    defaultValues: {\n      customerName: user?.firstName ? `${user.firstName} ${user.lastName || ''}`.trim() : '',\n      email: user?.email || '',\n      phone: '',\n      passengers: '1',\n      couponCode: '',\n      specialRequests: '',\n      travelDate: '',\n    },\n  });\n\n  // Fetch booked seats for this bus and travel date\n  const { data: bookedSeats = [] } = useQuery<string[]>({\n    queryKey: ['/api/bookings/seats', item?.id, form.watch('travelDate')],\n    enabled: type === 'bus' && !!item?.id && !!form.watch('travelDate'),\n    queryFn: async () => {\n      const response = await fetch(`/api/bookings/seats?busId=${item?.id}&travelDate=${form.watch('travelDate')}`);\n      if (!response.ok) return [];\n      const data = await response.json();\n      return data.bookedSeats || [];\n    },\n  });\n\n  // Reset selected seats when dialog opens or item changes\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedSeats([]);\n      setCouponDiscount(0);\n      setCouponApplied(false);\n    }\n  }, [isOpen, item?.id]);\n\n  // Generate seat layout for bus\n  const generateSeatLayout = (bus: Bus) => {\n    const totalSeats = bus.seats;\n    const seats = [];\n    for (let i = 1; i <= totalSeats; i++) {\n      seats.push(`${Math.ceil(i / 4)}${String.fromCharCode(64 + ((i - 1) % 4) + 1)}`);\n    }\n    return seats;\n  };\n\n  const handleSeatClick = (seatNumber: string) => {\n    if (bookedSeats.includes(seatNumber)) return; // Can't select booked seats\n    \n    setSelectedSeats(prev => {\n      const maxSeats = parseInt(form.watch('passengers')) || 1;\n      if (prev.includes(seatNumber)) {\n        return prev.filter(seat => seat !== seatNumber);\n      } else if (prev.length < maxSeats) {\n        return [...prev, seatNumber];\n      }\n      return prev;\n    });\n  };\n\n  const applyCoupon = () => {\n    const couponCode = form.watch('couponCode')?.toUpperCase();\n    if (!couponCode) return;\n\n    // Define coupon codes and their discounts\n    const coupons: { [key: string]: number } = {\n      'FLIGHT40': 40,\n      'ROUND35': 35,\n      'BIZCLASS30': 30,\n      'BUS25SAVE': 25,\n      'COMFORT20': 20,\n      'LUXURY30': 30,\n      'CAR40OFF': 40,\n      'MICRO35': 35,\n      'LUXURY50': 50,\n    };\n\n    const discount = coupons[couponCode];\n    if (discount) {\n      setCouponDiscount(discount);\n      setCouponApplied(true);\n      toast({\n        title: 'Coupon Applied!',\n        description: `You saved ${discount}% with code ${couponCode}`,\n      });\n    } else {\n      setCouponDiscount(0);\n      setCouponApplied(false);\n      toast({\n        title: 'Invalid Coupon',\n        description: 'The coupon code you entered is not valid.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const removeCoupon = () => {\n    setCouponDiscount(0);\n    setCouponApplied(false);\n    form.setValue('couponCode', '');\n    toast({\n      title: 'Coupon Removed',\n      description: 'The coupon has been removed from your booking.',\n    });\n  };\n\n  const bookingMutation = useMutation({\n    mutationFn: async (data: BookingFormData) => {\n      const bookingData = {\n        itemId: item?.id,\n        itemType: type,\n        customerName: data.customerName,\n        email: data.email,\n        phone: data.phone,\n        passengers: parseInt(data.passengers),\n        couponCode: data.couponCode || '',\n        specialRequests: data.specialRequests || '',\n        travelDate: data.travelDate,\n        totalAmount: Math.round((item?.price || 0) * (1 - couponDiscount / 100)),\n        status: 'confirmed',\n        confirmationNumber: `BDE${Math.random().toString(36).substr(2, 8).toUpperCase()}`,\n        propertyName: type === 'bus' ? (item as Bus)?.operator : (type === 'flight' ? (item as TripPlanner)?.origin + ' â ' + (item as TripPlanner)?.destination : (item as PrivateCar)?.type) || '',\n        propertyLocation: type === 'bus' ? (item as Bus)?.operator + ' Service' : (type === 'flight' ? (item as TripPlanner)?.origin + ' to ' + (item as TripPlanner)?.destination : 'Private Car Service'),\n        propertyPhone: type === 'bus' ? '+880-1800-BUS' : (type === 'flight' ? '+880-1800-FLIGHT' : '+880-1800-CAR'),\n        bookingType: type,\n        ...(type === 'bus' && { selectedSeats }),\n      };\n\n      const response = await fetch('/api/bookings', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(bookingData),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create booking');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Booking Confirmed!',\n        description: 'Your transportation has been successfully booked.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      form.reset();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Booking Failed',\n        description: error.message || 'Something went wrong. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = async (data: BookingFormData) => {\n    // Validate seat selection for buses\n    if (type === 'bus' && selectedSeats.length !== parseInt(data.passengers)) {\n      toast({\n        title: 'Seat Selection Required',\n        description: `Please select ${data.passengers} seat(s) for your booking.`,\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      await bookingMutation.mutateAsync(data);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n\n\n  const getItemDetails = () => {\n    if (!item) return [];\n\n    switch (type) {\n      case 'flight':\n        const flight = item as TripPlanner;\n        return [\n          { label: 'Duration', value: flight.duration, icon: Clock },\n          { label: 'Stops', value: flight.stops, icon: MapPin },\n          { label: 'Deal Type', value: flight.dealType, icon: Badge },\n        ];\n      case 'bus':\n        const bus = item as Bus;\n        return [\n          { label: 'Departure', value: bus.departure, icon: Clock },\n          { label: 'Arrival', value: bus.arrival, icon: Clock },\n          { label: 'Duration', value: bus.duration, icon: Clock },\n          { label: 'Available Seats', value: `${bus.seats} seats`, icon: Users },\n        ];\n      case 'car':\n        const car = item as PrivateCar;\n        return [\n          { label: 'Capacity', value: `${car.capacity} passengers`, icon: Users },\n          { label: 'Duration', value: car.duration, icon: Clock },\n          { label: 'Driver', value: car.driver, icon: User },\n        ];\n      default:\n        return [];\n    }\n  };\n\n  const getAmenities = () => {\n    if (!item) return [];\n\n    switch (type) {\n      case 'bus':\n        const bus = item as Bus;\n        return bus.amenities || [];\n      case 'car':\n        const car = item as PrivateCar;\n        return car.features || [];\n      default:\n        return [];\n    }\n  };\n\n  if (!item) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold\">\n            Complete Your Booking\n          </DialogTitle>\n          <DialogDescription>\n            Please provide your details to confirm your {type} booking.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Booking Summary */}\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <h3 className=\"font-semibold text-lg mb-3\">\n              {type === 'bus' ? `${(item as Bus)?.operator} - ${(item as Bus)?.type}` : \n               type === 'flight' ? `${(item as TripPlanner)?.origin} â ${(item as TripPlanner)?.destination}` :\n               `${(item as PrivateCar)?.type} (${(item as PrivateCar)?.category})`}\n            </h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n              {getItemDetails().map((detail, index) => {\n                const IconComponent = detail.icon;\n                return (\n                  <div key={index} className=\"flex items-center space-x-2\">\n                    <IconComponent className=\"w-4 h-4 text-gray-500\" />\n                    <span className=\"text-sm font-medium\">{detail.label}:</span>\n                    <span className=\"text-sm\">{detail.value}</span>\n                  </div>\n                );\n              })}\n            </div>\n\n            {getAmenities().length > 0 && (\n              <div className=\"mb-4\">\n                <p className=\"text-sm font-medium mb-2\">\n                  {type === 'car' ? 'Features' : 'Amenities'}:\n                </p>\n                <div className=\"flex flex-wrap gap-2\">\n                  {getAmenities().map((amenity) => (\n                    <Badge key={amenity} variant=\"outline\" className=\"text-xs\">\n                      {amenity}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            <Separator className=\"my-4\" />\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">Original Price:</span>\n                <span className={`text-sm ${couponApplied ? 'line-through text-gray-500' : 'font-semibold'}`}>\n                  à§³{(item?.price || 0).toLocaleString()}\n                </span>\n              </div>\n              \n              {couponApplied && (\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-green-600\">Discount ({couponDiscount}%):</span>\n                  <span className=\"text-sm text-green-600\">\n                    -à§³{Math.round((item?.price || 0) * (couponDiscount / 100)).toLocaleString()}\n                  </span>\n                </div>\n              )}\n              \n              <div className=\"flex justify-between items-center border-t pt-2\">\n                <span className=\"text-lg font-semibold\">Total Amount:</span>\n                <span className=\"text-2xl font-bold text-green-600\">\n                  à§³{Math.round((item?.price || 0) * (1 - couponDiscount / 100)).toLocaleString()}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Booking Form */}\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"customerName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center space-x-2\">\n                        <User className=\"w-4 h-4\" />\n                        <span>Full Name</span>\n                      </FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter your full name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center space-x-2\">\n                        <Mail className=\"w-4 h-4\" />\n                        <span>Email Address</span>\n                      </FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"your.email@example.com\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center space-x-2\">\n                        <Phone className=\"w-4 h-4\" />\n                        <span>Phone Number</span>\n                      </FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"+880 1XX XXX XXXX\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"passengers\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center space-x-2\">\n                        <Users className=\"w-4 h-4\" />\n                        <span>Number of Passengers</span>\n                      </FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" min=\"1\" max=\"10\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"travelDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"flex items-center space-x-2\">\n                      <Calendar className=\"w-4 h-4\" />\n                      <span>Travel Date</span>\n                    </FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Seat Selection for Bus Bookings */}\n              {type === 'bus' && item && form.watch('travelDate') && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-semibold\">Select Your Seats</h3>\n                    <Badge variant=\"outline\">\n                      {selectedSeats.length} of {form.watch('passengers')} selected\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"bg-gray-50 dark:bg-gray-800 p-4 rounded-lg\">\n                    <div className=\"flex justify-center gap-6 mb-4 text-sm\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-4 h-4 bg-white dark:bg-gray-700 border-2 border-gray-300 dark:border-gray-600 rounded\"></div>\n                        <span>Available</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-4 h-4 bg-green-500 border-2 border-green-600 rounded\"></div>\n                        <span>Selected</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-4 h-4 bg-red-500 border-2 border-red-600 rounded\"></div>\n                        <span>Booked</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex justify-center mb-4\">\n                      <div className=\"bg-gray-300 dark:bg-gray-600 px-4 py-2 rounded text-sm font-medium\">\n                        Driver\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-4 gap-2 max-w-md mx-auto\">\n                      {generateSeatLayout(item as Bus).map((seatNumber) => {\n                        const isBooked = bookedSeats.includes(seatNumber);\n                        const isSelected = selectedSeats.includes(seatNumber);\n                        \n                        return (\n                          <button\n                            key={seatNumber}\n                            type=\"button\"\n                            onClick={() => handleSeatClick(seatNumber)}\n                            disabled={isBooked}\n                            data-testid={`seat-${seatNumber}`}\n                            className={`\n                              aspect-square rounded-lg border-2 text-sm font-medium transition-all\n                              ${isBooked \n                                ? 'bg-red-500 border-red-600 text-white cursor-not-allowed opacity-75' \n                                : isSelected\n                                ? 'bg-green-500 border-green-600 text-white shadow-lg'\n                                : 'bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 hover:border-green-400 hover:bg-green-50 dark:hover:bg-green-900/20'\n                              }\n                            `}\n                          >\n                            {seatNumber}\n                          </button>\n                        );\n                      })}\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Coupon Code Section */}\n              <div className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"couponCode\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center space-x-2\">\n                        <Tag className=\"w-4 h-4\" />\n                        <span>Coupon Code (Optional)</span>\n                      </FormLabel>\n                      <div className=\"flex space-x-2\">\n                        <FormControl>\n                          <Input\n                            placeholder=\"Enter coupon code (e.g., FLIGHT40)\"\n                            {...field}\n                            onChange={(e) => {\n                              field.onChange(e);\n                              if (couponApplied) {\n                                setCouponApplied(false);\n                                setCouponDiscount(0);\n                              }\n                            }}\n                            className={couponApplied ? 'border-green-500' : ''}\n                          />\n                        </FormControl>\n                        {!couponApplied ? (\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={applyCoupon}\n                            disabled={!field.value}\n                          >\n                            Apply\n                          </Button>\n                        ) : (\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={removeCoupon}\n                            className=\"text-red-600 border-red-200 hover:bg-red-50\"\n                          >\n                            Remove\n                          </Button>\n                        )}\n                      </div>\n                      {couponApplied && (\n                        <p className=\"text-sm text-green-600 flex items-center space-x-1\">\n                          <Tag className=\"w-3 h-3\" />\n                          <span>Coupon applied successfully! You saved {couponDiscount}%</span>\n                        </p>\n                      )}\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"specialRequests\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Special Requests (Optional)</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Any special requirements or requests...\"\n                        className=\"min-h-[80px]\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex space-x-4 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={onClose}\n                  className=\"flex-1\"\n                  disabled={isSubmitting}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                  disabled={isSubmitting}\n                >\n                  <CreditCard className=\"w-4 h-4 mr-2\" />\n                  {isSubmitting ? 'Processing...' : 'Confirm Booking'}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":23235},"client/src/pages/support.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { \n  Phone, \n  Mail, \n  MapPin, \n  Clock, \n  MessageCircle, \n  HelpCircle, \n  Search,\n  ChevronDown,\n  ChevronUp,\n  Send,\n  CheckCircle,\n  AlertCircle,\n  Info,\n  Headphones\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport Navigation from '@/components/navigation';\nimport Footer from '@/components/footer';\n\n// Form schema for support ticket\nconst supportFormSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  email: z.string().email('Please enter a valid email address'),\n  phone: z.string().optional(),\n  category: z.string().min(1, 'Please select a category'),\n  subject: z.string().min(5, 'Subject must be at least 5 characters'),\n  message: z.string().min(20, 'Message must be at least 20 characters'),\n  priority: z.string().min(1, 'Please select a priority level'),\n});\n\ntype SupportFormData = z.infer<typeof supportFormSchema>;\n\ninterface FAQ {\n  id: string;\n  question: string;\n  answer: string;\n  category: string;\n}\n\nexport default function Support() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [formSubmitted, setFormSubmitted] = useState(false);\n\n  const form = useForm<SupportFormData>({\n    resolver: zodResolver(supportFormSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      phone: '',\n      category: '',\n      subject: '',\n      message: '',\n      priority: '',\n    },\n  });\n\n  // FAQ data\n  const faqs: FAQ[] = [\n    {\n      id: '1',\n      question: 'How do I book a hotel or flight through BD Explorer?',\n      answer: 'To book accommodations or flights, navigate to the Hotels or Trip Planner section, use our search filters to find options that match your preferences, select your desired option, and follow the booking process. You can pay securely through our integrated payment system.',\n      category: 'booking'\n    },\n    {\n      id: '2',\n      question: 'What payment methods do you accept?',\n      answer: 'We accept all major credit cards (Visa, MasterCard, American Express), debit cards, mobile banking (bKash, Nagad, Rocket), and bank transfers. All payments are processed securely through our encrypted payment gateway.',\n      category: 'payment'\n    },\n    {\n      id: '3',\n      question: 'Can I cancel or modify my booking?',\n      answer: 'Yes, you can cancel or modify most bookings. The cancellation policy depends on the specific hotel, flight, or service provider. Please check the cancellation terms during booking or contact our support team for assistance.',\n      category: 'booking'\n    },\n    {\n      id: '4',\n      question: 'Do you offer travel insurance?',\n      answer: 'Yes, we partner with leading insurance providers to offer comprehensive travel insurance covering trip cancellation, medical emergencies, lost luggage, and more. You can add insurance during the booking process.',\n      category: 'services'\n    },\n    {\n      id: '5',\n      question: 'What destinations does BD Explorer cover?',\n      answer: 'BD Explorer specializes in Bangladesh tourism, covering all major destinations including Cox\\'s Bazar, Sundarbans, Sylhet Tea Gardens, Saint Martin Island, Chittagong Hill Tracts, and many more beautiful locations across Bangladesh.',\n      category: 'destinations'\n    },\n    {\n      id: '6',\n      question: 'How can I get a refund for my booking?',\n      answer: 'Refund eligibility depends on the cancellation policy of your specific booking. Most refunds are processed within 5-7 business days. Contact our support team with your booking reference number to initiate a refund request.',\n      category: 'payment'\n    },\n    {\n      id: '7',\n      question: 'Do you provide 24/7 customer support?',\n      answer: 'Yes, our customer support team is available 24/7 to assist you. You can reach us via phone, email, live chat, or by submitting a support ticket through this page.',\n      category: 'support'\n    },\n    {\n      id: '8',\n      question: 'Are there group booking discounts available?',\n      answer: 'Yes, we offer special rates for group bookings (10+ people). Contact our group booking specialists for customized packages and discounted rates for your group travel needs.',\n      category: 'booking'\n    },\n    {\n      id: '9',\n      question: 'How do I create an account on BD Explorer?',\n      answer: 'You can create an account by clicking the \"Sign Up\" button in the top navigation. You\\'ll need to provide your email, create a password, and verify your email address. Having an account allows you to track bookings and receive personalized recommendations.',\n      category: 'account'\n    },\n    {\n      id: '10',\n      question: 'What if I need special assistance during my trip?',\n      answer: 'We provide 24/7 travel assistance for all our customers. If you need help during your trip, contact our emergency support line. We can assist with rebooking, emergency accommodations, medical assistance referrals, and more.',\n      category: 'services'\n    }\n  ];\n\n  // Filter FAQs based on search and category\n  const filteredFAQs = faqs.filter(faq => {\n    const matchesSearch = faq.question.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         faq.answer.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = selectedCategory === 'all' || faq.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const onSubmit = async (data: SupportFormData) => {\n\n    // Here you would typically send the data to your API\n    setFormSubmitted(true);\n    form.reset();\n  };\n\n  return (\n    <div className=\"min-h-screen section-bg-soft\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <div \n        className=\"relative pt-24 pb-16 bg-gradient-to-br from-blue-600 via-blue-700 to-blue-800\"\n        style={{\n          backgroundImage: `linear-gradient(rgba(37, 99, 235, 0.85), rgba(29, 78, 216, 0.85)), url('https://images.unsplash.com/photo-1516321318423-f06f85e504b3?ixlib=rb-4.0.3&auto=format&fit=crop&w=2340&q=80')`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          backgroundRepeat: 'no-repeat'\n        }}\n      >\n        <div className=\"absolute inset-0 bg-black/20\"></div>\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            {/* Left content */}\n            <div className=\"text-center lg:text-left\">\n              <div className=\"flex justify-center lg:justify-start mb-6\">\n                <div className=\"icon-bg-blue\">\n                  <Headphones className=\"w-8 h-8\" />\n                </div>\n              </div>\n              <h1 className=\"text-4xl md:text-5xl font-bold text-white mb-6\">\n                How Can We Help You?\n              </h1>\n              <p className=\"text-xl text-blue-100 mb-8 max-w-2xl mx-auto lg:mx-0\">\n                Get instant support for your travel needs. Our expert team is here to assist you 24/7 with bookings, payments, and travel guidance.\n              </p>\n              \n              {/* Quick stats */}\n              <div className=\"grid grid-cols-3 gap-6 max-w-lg mx-auto lg:mx-0\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-white\">24/7</div>\n                  <div className=\"text-blue-200 text-sm\">Support</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-white\">2 min</div>\n                  <div className=\"text-blue-200 text-sm\">Response Time</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-white\">98%</div>\n                  <div className=\"text-blue-200 text-sm\">Satisfaction</div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Right side - Support illustration */}\n            <div className=\"hidden lg:block\">\n              <div className=\"relative\">\n                <img \n                  src=\"/attached_assets/support_1755695837052.jpg\"\n                  alt=\"Customer support - Get help and assistance\"\n                  className=\"rounded-xl shadow-2xl w-full max-w-md ml-auto\"\n                />\n                <div className=\"absolute -bottom-6 -left-6 bg-white rounded-lg shadow-lg p-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                      <CheckCircle className=\"w-6 h-6 text-green-600\" />\n                    </div>\n                    <div>\n                      <div className=\"font-semibold text-gray-900\">Issue Resolved!</div>\n                      <div className=\"text-sm text-gray-600\">Your booking is confirmed</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Contact Cards */}\n      <div className=\"relative -mt-8 mb-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card className=\"elegant-card hover-lift\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"icon-bg-green mb-4 mx-auto\">\n                  <Phone className=\"w-6 h-6\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Call Us</h3>\n                <p className=\"text-gray-600 mb-3\">Speak directly with our support team</p>\n                <div className=\"space-y-1\">\n                  <p className=\"font-medium text-blue-600\">+880 1711-123456</p>\n                  <p className=\"font-medium text-blue-600\">+880 2-9876543</p>\n                </div>\n                <Badge className=\"mt-3 bg-green-100 text-green-800\">24/7 Available</Badge>\n              </CardContent>\n            </Card>\n\n            <Card className=\"elegant-card hover-lift\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"icon-bg-orange mb-4 mx-auto\">\n                  <MessageCircle className=\"w-6 h-6\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Live Chat</h3>\n                <p className=\"text-gray-600 mb-3\">Get instant help through chat</p>\n                <Button className=\"w-full bg-orange-600 hover:bg-orange-700\">\n                  Start Chat\n                </Button>\n                <Badge className=\"mt-3 bg-orange-100 text-orange-800\">Average response: 2 min</Badge>\n              </CardContent>\n            </Card>\n\n            <Card className=\"elegant-card hover-lift\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"icon-bg-purple mb-4 mx-auto\">\n                  <Mail className=\"w-6 h-6\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Email Support</h3>\n                <p className=\"text-gray-600 mb-3\">Send us detailed inquiries</p>\n                <div className=\"space-y-1\">\n                  <p className=\"font-medium text-blue-600\">support@bdexplorer.com</p>\n                  <p className=\"font-medium text-blue-600\">booking@bdexplorer.com</p>\n                </div>\n                <Badge className=\"mt-3 bg-purple-100 text-purple-800\">Response within 2 hours</Badge>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-16\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-12\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2\">\n            {/* Privacy Policy & Terms Section */}\n            <div className=\"mb-12\">\n              <div className=\"flex justify-center mb-4\">\n                <div className=\"icon-bg-purple\">\n                  <Info className=\"w-6 h-6\" />\n                </div>\n              </div>\n              <h2 className=\"text-3xl font-bold text-gray-900 text-center mb-8\">\n                Legal Information\n              </h2>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n                {/* Privacy Policy Card */}\n                <Card className=\"elegant-card hover-lift\">\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-xl font-semibold text-gray-900 mb-4 flex items-center\">\n                      <div className=\"icon-bg-blue mr-3\">\n                        <Info className=\"w-5 h-5\" />\n                      </div>\n                      Privacy Policy\n                    </h3>\n                    <p className=\"text-gray-600 mb-4\">\n                      BD Explorer is committed to protecting your privacy and ensuring transparent data practices. This policy outlines how we collect, use, store, and protect your personal information.\n                    </p>\n                    <div className=\"space-y-4 text-sm text-gray-600\">\n                      <div>\n                        <h4 className=\"font-semibold text-gray-800 mb-2\">Information We Collect:</h4>\n                        <div className=\"space-y-2 ml-4\">\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                            <span>Personal details (name, email, phone) for bookings</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                            <span>Payment information (encrypted via secure gateways)</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                            <span>Travel preferences and booking history</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                            <span>Website usage data for service improvement</span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <h4 className=\"font-semibold text-gray-800 mb-2\">Data Protection:</h4>\n                        <div className=\"space-y-2 ml-4\">\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                            <span>256-bit SSL encryption for all data transmission</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                            <span>Secure servers with regular security audits</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                            <span>Limited access to authorized personnel only</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                            <span>Regular data backup and recovery procedures</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h4 className=\"font-semibold text-gray-800 mb-2\">Your Rights:</h4>\n                        <div className=\"space-y-2 ml-4\">\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                            <span>Access and download your personal data</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                            <span>Request data correction or deletion</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                            <span>Opt-out of marketing communications</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                            <span>Data portability to other services</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h4 className=\"font-semibold text-gray-800 mb-2\">Third-Party Sharing:</h4>\n                        <div className=\"space-y-2 ml-4\">\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                            <span>No selling or sharing personal data</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                            <span>Partners limited to booking fulfillment only</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                            <span>Payment processors for secure transactions</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                            <span>Legal compliance when required by law</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                  </CardContent>\n                </Card>\n\n                {/* Terms of Service Card */}\n                <Card className=\"elegant-card hover-lift\">\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-xl font-semibold text-gray-900 mb-4 flex items-center\">\n                      <div className=\"icon-bg-orange mr-3\">\n                        <Info className=\"w-5 h-5\" />\n                      </div>\n                      Terms of Service\n                    </h3>\n                    <p className=\"text-gray-600 mb-4\">\n                      These terms govern your use of BD Explorer services. By using our platform, you agree to these terms and conditions. Last updated: August 2025.\n                    </p>\n                    <div className=\"space-y-4 text-sm text-gray-600\">\n                      <div>\n                        <h4 className=\"font-semibold text-gray-800 mb-2\">Booking Terms:</h4>\n                        <div className=\"space-y-2 ml-4\">\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                            <span>Bookings confirmed upon payment processing</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                            <span>Prices subject to availability and may change</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                            <span>Valid identification required for all travelers</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                            <span>Special requests subject to supplier approval</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h4 className=\"font-semibold text-gray-800 mb-2\">Cancellation Policy:</h4>\n                        <div className=\"space-y-2 ml-4\">\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                            <span>Free cancellation within 24 hours of booking</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                            <span>Cancellation fees apply based on provider terms</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                            <span>Refunds processed within 5-7 business days</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                            <span>Travel insurance recommended for protection</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h4 className=\"font-semibold text-gray-800 mb-2\">User Responsibilities:</h4>\n                        <div className=\"space-y-2 ml-4\">\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                            <span>Provide accurate and complete information</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                            <span>Maintain account security and confidentiality</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                            <span>Comply with destination laws and regulations</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                            <span>Respect local customs and communities</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h4 className=\"font-semibold text-gray-800 mb-2\">Service Limitations:</h4>\n                        <div className=\"space-y-2 ml-4\">\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                            <span>Services subject to third-party provider terms</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                            <span>No liability for force majeure events</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                            <span>Customer support available 24/7</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                            <span>Dispute resolution through mediation first</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h4 className=\"font-semibold text-gray-800 mb-2\">Payment & Refunds:</h4>\n                        <div className=\"space-y-2 ml-4\">\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                            <span>Secure payment processing with PCI compliance</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                            <span>Multiple payment methods accepted</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                            <span>Transparent pricing with no hidden fees</span>\n                          </div>\n                          <div className=\"flex items-start space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                            <span>Refund eligibility based on booking terms</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n\n            {/* FAQ Section */}\n            <div className=\"mb-8\">\n              <div className=\"flex justify-center mb-4\">\n                <div className=\"icon-bg-blue\">\n                  <HelpCircle className=\"w-6 h-6\" />\n                </div>\n              </div>\n              <h2 className=\"text-3xl font-bold text-gray-900 text-center mb-4\">\n                Frequently Asked Questions\n              </h2>\n              <p className=\"text-gray-600 text-center mb-8\">\n                Find quick answers to common questions about BD Explorer services\n              </p>\n\n              {/* Search and Filter */}\n              <div className=\"flex flex-col sm:flex-row gap-4 mb-8\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Search FAQs...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-faq-search\"\n                  />\n                </div>\n                <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                  <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-faq-category\">\n                    <SelectValue placeholder=\"All Categories\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    <SelectItem value=\"booking\">Booking</SelectItem>\n                    <SelectItem value=\"payment\">Payment</SelectItem>\n                    <SelectItem value=\"services\">Services</SelectItem>\n                    <SelectItem value=\"destinations\">Destinations</SelectItem>\n                    <SelectItem value=\"account\">Account</SelectItem>\n                    <SelectItem value=\"support\">Support</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* FAQ Accordion */}\n              {filteredFAQs.length > 0 ? (\n                <Accordion type=\"single\" collapsible className=\"space-y-4\">\n                  {filteredFAQs.map((faq) => (\n                    <AccordionItem \n                      key={faq.id} \n                      value={faq.id}\n                      className=\"elegant-card border-0\"\n                      data-testid={`faq-item-${faq.id}`}\n                    >\n                      <AccordionTrigger className=\"px-6 py-4 text-left hover:no-underline\">\n                        <div className=\"flex items-start space-x-3\">\n                          <Badge variant=\"secondary\" className=\"mt-1 capitalize\">\n                            {faq.category}\n                          </Badge>\n                          <span className=\"font-medium text-gray-900\">{faq.question}</span>\n                        </div>\n                      </AccordionTrigger>\n                      <AccordionContent className=\"px-6 pb-4\">\n                        <p className=\"text-gray-600 leading-relaxed\">{faq.answer}</p>\n                      </AccordionContent>\n                    </AccordionItem>\n                  ))}\n                </Accordion>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <Search className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-700 mb-2\">No FAQs Found</h3>\n                  <p className=\"text-gray-500\">Try adjusting your search terms or category filter.</p>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Support Form Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"elegant-card sticky top-8\">\n              <CardHeader className=\"text-center\">\n                <div className=\"flex justify-center mb-4\">\n                  <div className=\"icon-bg-green\">\n                    <Send className=\"w-6 h-6\" />\n                  </div>\n                </div>\n                <CardTitle className=\"text-xl font-bold text-gray-900\">\n                  Submit a Support Ticket\n                </CardTitle>\n                <p className=\"text-gray-600\">\n                  Can't find what you're looking for? Send us a detailed message.\n                </p>\n              </CardHeader>\n              <CardContent>\n                {formSubmitted ? (\n                  <div className=\"text-center py-8\">\n                    <CheckCircle className=\"w-12 h-12 text-green-600 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                      Ticket Submitted!\n                    </h3>\n                    <p className=\"text-gray-600 mb-4\">\n                      We've received your support ticket and will respond within 2 hours.\n                    </p>\n                    <Button \n                      onClick={() => setFormSubmitted(false)}\n                      variant=\"outline\"\n                      className=\"w-full\"\n                    >\n                      Submit Another Ticket\n                    </Button>\n                  </div>\n                ) : (\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Full Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Your full name\" {...field} data-testid=\"input-support-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email Address</FormLabel>\n                            <FormControl>\n                              <Input type=\"email\" placeholder=\"your.email@example.com\" {...field} data-testid=\"input-support-email\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"phone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Phone Number (Optional)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"+880 1XXX-XXXXXX\" {...field} data-testid=\"input-support-phone\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"category\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Category</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-support-category\">\n                                  <SelectValue placeholder=\"Select a category\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"booking\">Booking Issues</SelectItem>\n                                <SelectItem value=\"payment\">Payment Problems</SelectItem>\n                                <SelectItem value=\"technical\">Technical Support</SelectItem>\n                                <SelectItem value=\"refund\">Refund Request</SelectItem>\n                                <SelectItem value=\"general\">General Inquiry</SelectItem>\n                                <SelectItem value=\"feedback\">Feedback</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"priority\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Priority Level</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-support-priority\">\n                                  <SelectValue placeholder=\"Select priority\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"low\">Low - General question</SelectItem>\n                                <SelectItem value=\"medium\">Medium - Need assistance</SelectItem>\n                                <SelectItem value=\"high\">High - Urgent issue</SelectItem>\n                                <SelectItem value=\"urgent\">Urgent - Critical problem</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"subject\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Subject</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Brief description of your issue\" {...field} data-testid=\"input-support-subject\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"message\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Message</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Please provide detailed information about your issue...\"\n                                className=\"min-h-[120px]\"\n                                {...field}\n                                data-testid=\"textarea-support-message\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                        disabled={form.formState.isSubmitting}\n                        data-testid=\"button-submit-ticket\"\n                      >\n                        {form.formState.isSubmitting ? 'Submitting...' : 'Submit Ticket'}\n                        <Send className=\"w-4 h-4 ml-2\" />\n                      </Button>\n                    </form>\n                  </Form>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Contact Information */}\n            <Card className=\"elegant-card mt-8\">\n              <CardHeader>\n                <CardTitle className=\"text-lg font-bold text-gray-900 flex items-center\">\n                  <MapPin className=\"w-5 h-5 mr-2 text-blue-600\" />\n                  Contact Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <MapPin className=\"w-5 h-5 text-gray-400 mt-1\" />\n                  <div>\n                    <p className=\"font-medium text-gray-900\">Office Address</p>\n                    <p className=\"text-gray-600\">\n                      House 45, Road 12, Dhanmondi<br />\n                      Dhaka 1209, Bangladesh\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <Clock className=\"w-5 h-5 text-gray-400 mt-1\" />\n                  <div>\n                    <p className=\"font-medium text-gray-900\">Business Hours</p>\n                    <p className=\"text-gray-600\">\n                      Monday - Friday: 9:00 AM - 8:00 PM<br />\n                      Saturday: 10:00 AM - 6:00 PM<br />\n                      Sunday: 11:00 AM - 5:00 PM\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <AlertCircle className=\"w-5 h-5 text-orange-500 mt-1\" />\n                  <div>\n                    <p className=\"font-medium text-gray-900\">Emergency Support</p>\n                    <p className=\"text-gray-600\">\n                      24/7 emergency travel assistance available for all active bookings.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":41389},"client/src/components/hotel-booking-dialog.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Calendar, Clock, Users, MapPin, CreditCard, User, Mail, Phone, Star, Download } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { Hotel, Restaurant } from '@shared/schema';\n\nconst hotelBookingSchema = z.object({\n  customerName: z.string().min(2, 'Name must be at least 2 characters'),\n  email: z.string().email('Please enter a valid email address'),\n  phone: z.string().min(10, 'Phone number must be at least 10 digits'),\n  roomType: z.string().min(1, 'Please select a room type'),\n  checkIn: z.string().min(1, 'Check-in date is required'),\n  checkOut: z.string().min(1, 'Check-out date is required'),\n  guests: z.string().min(1, 'Number of guests is required'),\n});\n\nconst restaurantBookingSchema = z.object({\n  customerName: z.string().min(2, 'Name must be at least 2 characters'),\n  email: z.string().email('Please enter a valid email address'),\n  phone: z.string().min(10, 'Phone number must be at least 10 digits'),\n  reservationDate: z.string().min(1, 'Reservation date is required'),\n  reservationTime: z.string().min(1, 'Reservation time is required'),\n  partySize: z.string().min(1, 'Party size is required'),\n});\n\ntype HotelBookingFormData = z.infer<typeof hotelBookingSchema>;\ntype RestaurantBookingFormData = z.infer<typeof restaurantBookingSchema>;\n\ninterface PropertyBookingDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  item: Hotel | Restaurant | null;\n  type: 'hotel' | 'restaurant';\n}\n\nexport default function PropertyBookingDialog({ isOpen, onClose, item, type }: PropertyBookingDialogProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [bookingDetails, setBookingDetails] = useState<any>(null);\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  const isHotel = type === 'hotel';\n  const schema = isHotel ? hotelBookingSchema : restaurantBookingSchema;\n\n  const form = useForm<HotelBookingFormData | RestaurantBookingFormData>({\n    resolver: zodResolver(schema),\n    defaultValues: {\n      customerName: user?.firstName ? `${user.firstName} ${user.lastName || ''}`.trim() : '',\n      email: user?.email || '',\n      phone: '',\n      ...(isHotel\n        ? {\n            roomType: '',\n            checkIn: '',\n            checkOut: '',\n            guests: '2',\n          }\n        : {\n            reservationDate: '',\n            reservationTime: '',\n            partySize: '2',\n          }),\n    },\n  });\n\n  const bookingMutation = useMutation({\n    mutationFn: async (data: HotelBookingFormData | RestaurantBookingFormData) => {\n      if (!item) throw new Error('No item selected');\n\n      const bookingData = {\n        itemId: item.id,\n        itemType: type,\n        customerName: data.customerName,\n        email: data.email,\n        phone: data.phone,\n        propertyName: item.name,\n        propertyLocation: item.location,\n        propertyImageUrl: item.imageUrl,\n        propertyPhone: item.phone || '',\n        bookingType: type,\n        confirmationNumber: `BD${Date.now().toString().slice(-6)}${Math.random().toString(36).substr(2, 3).toUpperCase()}`,\n        ...(isHotel && 'roomType' in data\n          ? {\n              roomType: data.roomType,\n              checkIn: data.checkIn,\n              checkOut: data.checkOut,\n              guests: parseInt(data.guests),\n              nights: Math.ceil((new Date(data.checkOut).getTime() - new Date(data.checkIn).getTime()) / (1000 * 60 * 60 * 24)),\n              totalAmount: Math.ceil(Math.random() * 10000) + 5000, // Random amount between 5000-15000 Taka\n            }\n          : {\n              reservationDate: (data as RestaurantBookingFormData).reservationDate,\n              reservationTime: (data as RestaurantBookingFormData).reservationTime,\n              partySize: parseInt((data as RestaurantBookingFormData).partySize),\n              cuisine: (item as Restaurant).cuisine,\n              priceRange: (item as Restaurant).priceRange,\n            }),\n      };\n\n      return await apiRequest('POST', '/api/bookings', bookingData);\n    },\n    onSuccess: (result) => {\n      setBookingDetails(result);\n      setShowSuccess(true);\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      toast({\n        title: \"Booking Confirmed!\",\n        description: `Your ${type} booking has been confirmed. Confirmation number: ${(result as any)?.confirmationNumber || 'N/A'}`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = async (data: HotelBookingFormData | RestaurantBookingFormData) => {\n    setIsSubmitting(true);\n    try {\n      await bookingMutation.mutateAsync(data);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleClose = () => {\n    if (!isSubmitting) {\n      setShowSuccess(false);\n      setBookingDetails(null);\n      form.reset();\n      onClose();\n    }\n  };\n\n  const downloadReceipt = () => {\n    if (!bookingDetails) return;\n    \n    // Simple receipt download implementation\n    const receiptText = `\nBD EXPLORER BOOKING RECEIPT\n==========================\n\nConfirmation Number: ${bookingDetails.confirmationNumber}\nProperty: ${bookingDetails.propertyName}\nLocation: ${bookingDetails.propertyLocation}\nCustomer: ${bookingDetails.customerName}\nEmail: ${bookingDetails.email}\nPhone: ${bookingDetails.phone}\n\n${isHotel ? `\nRoom Type: ${bookingDetails.roomType}\nCheck-in: ${bookingDetails.checkIn}\nCheck-out: ${bookingDetails.checkOut}\nGuests: ${bookingDetails.guests}\nNights: ${bookingDetails.nights}\nTotal Amount: à§³${bookingDetails.totalAmount}\n` : `\nReservation Date: ${bookingDetails.reservationDate}\nReservation Time: ${bookingDetails.reservationTime}\nParty Size: ${bookingDetails.partySize}\nCuisine: ${bookingDetails.cuisine}\n`}\n\nBooked on: ${new Date().toLocaleDateString()}\nStatus: Confirmed\n\nThank you for choosing BD Explorer!\nContact: +880-2-123-4567\n    `;\n\n    const blob = new Blob([receiptText], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `BD-Explorer-Receipt-${bookingDetails.confirmationNumber}.txt`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  if (!item) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        {showSuccess ? (\n          <div className=\"text-center py-8\">\n            <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <svg className=\"w-8 h-8 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n              </svg>\n            </div>\n            <h3 className=\"text-2xl font-bold text-green-600 mb-2\">Booking Confirmed!</h3>\n            <p className=\"text-gray-600 mb-4\">\n              Your {type} booking has been confirmed. You'll receive a confirmation email shortly.\n            </p>\n            \n            <div className=\"bg-gray-50 rounded-lg p-6 mb-6 text-left\">\n              <h4 className=\"font-semibold mb-3\">Booking Details</h4>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Confirmation Number:</span>\n                  <span className=\"font-mono font-semibold\">{bookingDetails?.confirmationNumber}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Property:</span>\n                  <span>{bookingDetails?.propertyName}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Location:</span>\n                  <span>{bookingDetails?.propertyLocation}</span>\n                </div>\n                {isHotel && (\n                  <>\n                    <div className=\"flex justify-between\">\n                      <span>Room Type:</span>\n                      <span>{bookingDetails?.roomType}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Check-in:</span>\n                      <span>{bookingDetails?.checkIn}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Check-out:</span>\n                      <span>{bookingDetails?.checkOut}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Total Amount:</span>\n                      <span className=\"font-semibold\">à§³{bookingDetails?.totalAmount}</span>\n                    </div>\n                  </>\n                )}\n                {!isHotel && (\n                  <>\n                    <div className=\"flex justify-between\">\n                      <span>Date:</span>\n                      <span>{bookingDetails?.reservationDate}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Time:</span>\n                      <span>{bookingDetails?.reservationTime}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Party Size:</span>\n                      <span>{bookingDetails?.partySize} people</span>\n                    </div>\n                  </>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex gap-3 justify-center\">\n              <Button onClick={downloadReceipt} variant=\"outline\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Download Receipt\n              </Button>\n              <Button onClick={handleClose}>\n                Close\n              </Button>\n            </div>\n          </div>\n        ) : (\n          <>\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                {isHotel ? <MapPin className=\"w-5 h-5\" /> : <Users className=\"w-5 h-5\" />}\n                Book {isHotel ? 'Hotel' : 'Restaurant'}: {item.name}\n              </DialogTitle>\n              <DialogDescription>\n                Complete your booking for {item.name} in {item.location}\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div className=\"border rounded-lg overflow-hidden\">\n                  <img \n                    src={item.imageUrl} \n                    alt={item.name}\n                    className=\"w-full h-40 object-cover\"\n                  />\n                  <div className=\"p-4\">\n                    <h3 className=\"font-semibold\">{item.name}</h3>\n                    <p className=\"text-sm text-gray-600 flex items-center gap-1\">\n                      <MapPin className=\"w-4 h-4\" />\n                      {item.location}\n                    </p>\n                    <div className=\"flex items-center gap-1 mt-1\">\n                      <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                      <span className=\"text-sm\">{item.rating}</span>\n                      {isHotel && (\n                        <>\n                          <span className=\"text-gray-300 mx-2\">â¢</span>\n                          <span className=\"text-sm font-semibold\">à§³{(item as Hotel).pricePerNight}/night</span>\n                        </>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"customerName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center gap-2\">\n                          <User className=\"w-4 h-4\" />\n                          Full Name\n                        </FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center gap-2\">\n                          <Mail className=\"w-4 h-4\" />\n                          Email\n                        </FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center gap-2\">\n                          <Phone className=\"w-4 h-4\" />\n                          Phone Number\n                        </FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {isHotel ? (\n                    <>\n                      <FormField\n                        control={form.control}\n                        name=\"roomType\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Room Type</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select room type\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"standard\">Standard Room</SelectItem>\n                                <SelectItem value=\"deluxe\">Deluxe Room</SelectItem>\n                                <SelectItem value=\"couple\">Couple Room</SelectItem>\n                                <SelectItem value=\"suite\">Suite</SelectItem>\n                                <SelectItem value=\"family\">Family Room</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"checkIn\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"flex items-center gap-2\">\n                                <Calendar className=\"w-4 h-4\" />\n                                Check-in\n                              </FormLabel>\n                              <FormControl>\n                                <Input type=\"date\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"checkOut\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"flex items-center gap-2\">\n                                <Calendar className=\"w-4 h-4\" />\n                                Check-out\n                              </FormLabel>\n                              <FormControl>\n                                <Input type=\"date\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"guests\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2\">\n                              <Users className=\"w-4 h-4\" />\n                              Number of Guests\n                            </FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"1\">1 Guest</SelectItem>\n                                <SelectItem value=\"2\">2 Guests</SelectItem>\n                                <SelectItem value=\"3\">3 Guests</SelectItem>\n                                <SelectItem value=\"4\">4 Guests</SelectItem>\n                                <SelectItem value=\"5\">5+ Guests</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </>\n                  ) : (\n                    <>\n                      <FormField\n                        control={form.control}\n                        name=\"reservationDate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2\">\n                              <Calendar className=\"w-4 h-4\" />\n                              Reservation Date\n                            </FormLabel>\n                            <FormControl>\n                              <Input type=\"date\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"reservationTime\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2\">\n                              <Clock className=\"w-4 h-4\" />\n                              Reservation Time\n                            </FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select time\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"12:00\">12:00 PM</SelectItem>\n                                <SelectItem value=\"12:30\">12:30 PM</SelectItem>\n                                <SelectItem value=\"13:00\">1:00 PM</SelectItem>\n                                <SelectItem value=\"13:30\">1:30 PM</SelectItem>\n                                <SelectItem value=\"14:00\">2:00 PM</SelectItem>\n                                <SelectItem value=\"18:00\">6:00 PM</SelectItem>\n                                <SelectItem value=\"18:30\">6:30 PM</SelectItem>\n                                <SelectItem value=\"19:00\">7:00 PM</SelectItem>\n                                <SelectItem value=\"19:30\">7:30 PM</SelectItem>\n                                <SelectItem value=\"20:00\">8:00 PM</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"partySize\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2\">\n                              <Users className=\"w-4 h-4\" />\n                              Party Size\n                            </FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"1\">1 Person</SelectItem>\n                                <SelectItem value=\"2\">2 People</SelectItem>\n                                <SelectItem value=\"3\">3 People</SelectItem>\n                                <SelectItem value=\"4\">4 People</SelectItem>\n                                <SelectItem value=\"5\">5 People</SelectItem>\n                                <SelectItem value=\"6\">6+ People</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </>\n                  )}\n\n                  <Separator />\n\n                  <div className=\"flex gap-3\">\n                    <Button type=\"button\" variant=\"outline\" onClick={handleClose} disabled={isSubmitting}>\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={isSubmitting} className=\"flex-1\">\n                      {isSubmitting ? (\n                        <>\n                          <CreditCard className=\"w-4 h-4 mr-2 animate-spin\" />\n                          Processing...\n                        </>\n                      ) : (\n                        <>\n                          <CreditCard className=\"w-4 h-4 mr-2\" />\n                          Confirm Booking\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </div>\n          </>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":24213},"client/src/pages/hotel-booking.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useRoute, useLocation } from 'wouter';\nimport { Calendar, Clock, Users, MapPin, Star, CreditCard, ArrowLeft, Check, Phone, Download, Building2 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { apiRequest } from '@/lib/queryClient';\nimport Navigation from '@/components/navigation';\nimport Footer from '@/components/footer';\nimport type { Hotel } from '@shared/schema';\n\nexport default function HotelBooking() {\n  const [, params] = useRoute('/hotel-booking/:id');\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const { user, isAuthenticated } = useAuth();\n  const queryClient = useQueryClient();\n  \n  // Booking form state\n  const [customerName, setCustomerName] = useState('');\n  const [customerEmail, setCustomerEmail] = useState('');\n  const [customerPhone, setCustomerPhone] = useState('');\n  const [customerNid, setCustomerNid] = useState('');\n  const [roomType, setRoomType] = useState('');\n  const [checkIn, setCheckIn] = useState('');\n  const [checkOut, setCheckOut] = useState('');\n  const [guests, setGuests] = useState('2');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showSuccessDialog, setShowSuccessDialog] = useState(false);\n  const [bookingDetails, setBookingDetails] = useState<any>(null);\n\n  const hotelId = params?.id;\n\n  // Check authentication\n  useEffect(() => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Sign In Required\",\n        description: \"Please sign in to make a booking. You'll be redirected to the login page.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        navigate('/sign-in');\n      }, 1000);\n      return;\n    }\n  }, [isAuthenticated, navigate, toast]);\n\n  // Pre-fill user data when available\n  useEffect(() => {\n    if (user) {\n      setCustomerName(user.firstName ? `${user.firstName} ${user.lastName || ''}`.trim() : '');\n      setCustomerEmail(user.email || '');\n    }\n  }, [user]);\n\n  // Fetch hotel data\n  const { data: hotels = [] } = useQuery<Hotel[]>({\n    queryKey: ['/api/hotels'],\n  });\n\n  const selectedHotel = hotels.find(h => h.id === hotelId);\n\n  const bookingMutation = useMutation({\n    mutationFn: async (bookingData: any) => {\n      return await apiRequest('POST', '/api/bookings', bookingData);\n    },\n    onSuccess: (result) => {\n      setBookingDetails(result);\n      setShowSuccessDialog(true);\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      toast({\n        title: \"Booking Confirmed!\",\n        description: `Your hotel booking has been confirmed. Confirmation number: ${(result as any)?.confirmationNumber || 'N/A'}`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedHotel) return;\n\n    setIsSubmitting(true);\n    try {\n      const bookingData = {\n        itemId: selectedHotel.id,\n        itemType: 'hotel',\n        customerName,\n        email: customerEmail,\n        phone: customerPhone,\n        nid: customerNid,\n        propertyName: selectedHotel.name,\n        propertyLocation: selectedHotel.location,\n        propertyImageUrl: selectedHotel.imageUrl,\n        propertyPhone: selectedHotel.phone || '',\n        bookingType: 'hotel',\n        confirmationNumber: `BD${Date.now().toString().slice(-6)}${Math.random().toString(36).substr(2, 3).toUpperCase()}`,\n        roomType,\n        checkIn,\n        checkOut,\n        guests: parseInt(guests),\n        nights: Math.ceil((new Date(checkOut).getTime() - new Date(checkIn).getTime()) / (1000 * 60 * 60 * 24)),\n        totalAmount: Math.ceil(Math.random() * 10000) + 5000, // Random amount between 5000-15000 Taka\n      };\n\n      await bookingMutation.mutateAsync(bookingData);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const downloadReceipt = () => {\n    if (!bookingDetails) return;\n    \n    const receiptText = `\nBD EXPLORER BOOKING RECEIPT\n==========================\n\nConfirmation Number: ${bookingDetails.confirmationNumber}\nProperty: ${bookingDetails.propertyName}\nLocation: ${bookingDetails.propertyLocation}\nCustomer: ${bookingDetails.customerName}\nEmail: ${bookingDetails.email}\nPhone: ${bookingDetails.phone}\nNational ID: ${bookingDetails.nid}\n\nRoom Type: ${bookingDetails.roomType}\nCheck-in: ${bookingDetails.checkIn}\nCheck-out: ${bookingDetails.checkOut}\nGuests: ${bookingDetails.guests}\nNights: ${bookingDetails.nights}\nTotal Amount: à§³${bookingDetails.totalAmount}\n\nBooked on: ${new Date().toLocaleDateString()}\nStatus: Confirmed\n\nThank you for choosing BD Explorer!\nContact: +880-2-123-4567\n    `;\n\n    const blob = new Blob([receiptText], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `BD-Explorer-Receipt-${bookingDetails.confirmationNumber}.txt`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  if (!selectedHotel) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navigation />\n        <div className=\"pt-24 pb-16\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h1 className=\"text-3xl font-bold text-gray-800 mb-4\">Hotel Not Found</h1>\n            <p className=\"text-gray-600 mb-8\">The hotel you're looking for doesn't exist.</p>\n            <Button onClick={() => navigate('/hotels')}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Hotels\n            </Button>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (showSuccessDialog) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navigation />\n        <div className=\"pt-24 pb-16\">\n          <div className=\"max-w-3xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"bg-white rounded-xl shadow-lg p-8 text-center\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Check className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <h1 className=\"text-3xl font-bold text-green-600 mb-4\">Booking Confirmed!</h1>\n              <p className=\"text-gray-600 mb-6\">\n                Your hotel booking has been confirmed. You'll receive a confirmation email shortly.\n              </p>\n              \n              <div className=\"bg-gray-50 rounded-lg p-6 mb-8 text-left\">\n                <h3 className=\"font-semibold mb-4 text-center\">Booking Details</h3>\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span>Confirmation Number:</span>\n                    <span className=\"font-mono font-semibold\">{bookingDetails?.confirmationNumber}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Hotel:</span>\n                    <span>{bookingDetails?.propertyName}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Location:</span>\n                    <span>{bookingDetails?.propertyLocation}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Room Type:</span>\n                    <span>{bookingDetails?.roomType}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Check-in:</span>\n                    <span>{bookingDetails?.checkIn}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Check-out:</span>\n                    <span>{bookingDetails?.checkOut}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>National ID:</span>\n                    <span>{bookingDetails?.nid}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Total Amount:</span>\n                    <span className=\"font-semibold text-lg\">à§³{bookingDetails?.totalAmount}</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex gap-4 justify-center\">\n                <Button onClick={downloadReceipt} variant=\"outline\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Download Receipt\n                </Button>\n                <Button onClick={() => navigate('/hotels')}>\n                  Back to Hotels\n                </Button>\n                <Button onClick={() => navigate('/my-bookings')} variant=\"outline\">\n                  View My Bookings\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navigation />\n      \n      <div className=\"pt-24 pb-16\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <div className=\"flex items-center gap-4 mb-8\">\n            <Button variant=\"outline\" onClick={() => navigate('/hotels')}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back\n            </Button>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"icon-bg-blue\">\n                <Building2 className=\"w-6 h-6\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900\">Book Hotel</h1>\n                <p className=\"text-gray-600\">Complete your reservation</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Hotel Information */}\n            <Card className=\"elegant-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Building2 className=\"w-5 h-5\" />\n                  {selectedHotel.name}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <img \n                  src={selectedHotel.imageUrl} \n                  alt={selectedHotel.name}\n                  className=\"w-full h-64 object-cover rounded-lg\"\n                />\n                \n                <div className=\"space-y-3\">\n                  <p className=\"flex items-center gap-2 text-gray-600\">\n                    <MapPin className=\"w-4 h-4\" />\n                    {selectedHotel.location}\n                  </p>\n                  <div className=\"flex items-center gap-2\">\n                    <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                    <span className=\"font-semibold\">{selectedHotel.rating}</span>\n                    <span className=\"text-gray-600\">â¢ à§³{selectedHotel.pricePerNight}/night</span>\n                  </div>\n                  <p className=\"text-gray-600\">{selectedHotel.description}</p>\n                  \n                  {selectedHotel.amenities && selectedHotel.amenities.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Amenities</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {selectedHotel.amenities.map((amenity, index) => (\n                          <Badge key={index} variant=\"secondary\">\n                            {amenity}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Booking Form */}\n            <Card className=\"elegant-card\">\n              <CardHeader>\n                <CardTitle>Booking Details</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"customerName\">Full Name</Label>\n                      <Input\n                        id=\"customerName\"\n                        value={customerName}\n                        onChange={(e) => setCustomerName(e.target.value)}\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"customerPhone\">Phone Number</Label>\n                      <Input\n                        id=\"customerPhone\"\n                        value={customerPhone}\n                        onChange={(e) => setCustomerPhone(e.target.value)}\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"customerEmail\">Email</Label>\n                    <Input\n                      id=\"customerEmail\"\n                      type=\"email\"\n                      value={customerEmail}\n                      onChange={(e) => setCustomerEmail(e.target.value)}\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"customerNid\">National ID (NID) *</Label>\n                    <Input\n                      id=\"customerNid\"\n                      value={customerNid}\n                      onChange={(e) => setCustomerNid(e.target.value)}\n                      placeholder=\"Enter your National ID number\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"roomType\">Room Type</Label>\n                    <Select value={roomType} onValueChange={setRoomType} required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select room type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"standard\">Standard Room</SelectItem>\n                        <SelectItem value=\"deluxe\">Deluxe Room</SelectItem>\n                        <SelectItem value=\"couple\">Couple Room</SelectItem>\n                        <SelectItem value=\"suite\">Suite</SelectItem>\n                        <SelectItem value=\"family\">Family Room</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"checkIn\">Check-in Date</Label>\n                      <Input\n                        id=\"checkIn\"\n                        type=\"date\"\n                        value={checkIn}\n                        onChange={(e) => setCheckIn(e.target.value)}\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"checkOut\">Check-out Date</Label>\n                      <Input\n                        id=\"checkOut\"\n                        type=\"date\"\n                        value={checkOut}\n                        onChange={(e) => setCheckOut(e.target.value)}\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"guests\">Number of Guests</Label>\n                    <Select value={guests} onValueChange={setGuests} required>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"1\">1 Guest</SelectItem>\n                        <SelectItem value=\"2\">2 Guests</SelectItem>\n                        <SelectItem value=\"3\">3 Guests</SelectItem>\n                        <SelectItem value=\"4\">4 Guests</SelectItem>\n                        <SelectItem value=\"5\">5+ Guests</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"bg-gray-50 rounded-lg p-4\">\n                    <h4 className=\"font-semibold mb-2\">Booking Summary</h4>\n                    <div className=\"space-y-1 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>Hotel:</span>\n                        <span>{selectedHotel.name}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Room:</span>\n                        <span>{roomType || 'Not selected'}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Guests:</span>\n                        <span>{guests}</span>\n                      </div>\n                      {checkIn && checkOut && (\n                        <>\n                          <div className=\"flex justify-between\">\n                            <span>Nights:</span>\n                            <span>{Math.ceil((new Date(checkOut).getTime() - new Date(checkIn).getTime()) / (1000 * 60 * 60 * 24))}</span>\n                          </div>\n                          <Separator />\n                          <div className=\"flex justify-between font-semibold\">\n                            <span>Estimated Total:</span>\n                            <span>à§³{Math.ceil((Math.ceil((new Date(checkOut).getTime() - new Date(checkIn).getTime()) / (1000 * 60 * 60 * 24))) * selectedHotel.pricePerNight)}</span>\n                          </div>\n                        </>\n                      )}\n                    </div>\n                  </div>\n\n                  <Button type=\"submit\" disabled={isSubmitting} className=\"w-full\">\n                    {isSubmitting ? (\n                      <>\n                        <CreditCard className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Processing...\n                      </>\n                    ) : (\n                      <>\n                        <CreditCard className=\"w-4 h-4 mr-2\" />\n                        Confirm Booking\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":19159},"client/src/pages/restaurant-booking.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useRoute, useLocation } from 'wouter';\nimport { Calendar, Clock, Users, MapPin, Star, CreditCard, ArrowLeft, Check, Phone, Download, Utensils } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { apiRequest } from '@/lib/queryClient';\nimport Navigation from '@/components/navigation';\nimport Footer from '@/components/footer';\nimport type { Restaurant } from '@shared/schema';\n\nexport default function RestaurantBooking() {\n  const [, params] = useRoute('/restaurant-booking/:id');\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const { user, isAuthenticated } = useAuth();\n  const queryClient = useQueryClient();\n  \n  // Booking form state\n  const [customerName, setCustomerName] = useState('');\n  const [customerEmail, setCustomerEmail] = useState('');\n  const [customerPhone, setCustomerPhone] = useState('');\n  const [reservationDate, setReservationDate] = useState('');\n  const [reservationTime, setReservationTime] = useState('');\n  const [partySize, setPartySize] = useState('2');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showSuccessDialog, setShowSuccessDialog] = useState(false);\n  const [bookingDetails, setBookingDetails] = useState<any>(null);\n\n  const restaurantId = params?.id;\n\n  // Check authentication\n  useEffect(() => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Sign In Required\",\n        description: \"Please sign in to make a booking. You'll be redirected to the login page.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        navigate('/sign-in');\n      }, 1000);\n      return;\n    }\n  }, [isAuthenticated, navigate, toast]);\n\n  // Pre-fill user data when available\n  useEffect(() => {\n    if (user) {\n      setCustomerName(user.firstName ? `${user.firstName} ${user.lastName || ''}`.trim() : '');\n      setCustomerEmail(user.email || '');\n    }\n  }, [user]);\n\n  // Fetch restaurant data\n  const { data: restaurants = [] } = useQuery<Restaurant[]>({\n    queryKey: ['/api/restaurants'],\n  });\n\n  const selectedRestaurant = restaurants.find(r => r.id === restaurantId);\n\n  const bookingMutation = useMutation({\n    mutationFn: async (bookingData: any) => {\n      return await apiRequest('POST', '/api/bookings', bookingData);\n    },\n    onSuccess: (result) => {\n      setBookingDetails(result);\n      setShowSuccessDialog(true);\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      toast({\n        title: \"Booking Confirmed!\",\n        description: `Your restaurant booking has been confirmed. Confirmation number: ${(result as any)?.confirmationNumber || 'N/A'}`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedRestaurant) return;\n\n    setIsSubmitting(true);\n    try {\n      const bookingData = {\n        itemId: selectedRestaurant.id,\n        itemType: 'restaurant',\n        customerName,\n        email: customerEmail,\n        phone: customerPhone,\n        propertyName: selectedRestaurant.name,\n        propertyLocation: selectedRestaurant.location,\n        propertyImageUrl: selectedRestaurant.imageUrl,\n        propertyPhone: selectedRestaurant.phone || '',\n        bookingType: 'restaurant',\n        confirmationNumber: `BD${Date.now().toString().slice(-6)}${Math.random().toString(36).substr(2, 3).toUpperCase()}`,\n        reservationDate,\n        reservationTime,\n        partySize: parseInt(partySize),\n        cuisine: selectedRestaurant.cuisine,\n        priceRange: selectedRestaurant.priceRange,\n      };\n\n      await bookingMutation.mutateAsync(bookingData);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const downloadReceipt = () => {\n    if (!bookingDetails) return;\n    \n    const receiptText = `\nBD EXPLORER BOOKING RECEIPT\n==========================\n\nConfirmation Number: ${bookingDetails.confirmationNumber}\nRestaurant: ${bookingDetails.propertyName}\nLocation: ${bookingDetails.propertyLocation}\nCustomer: ${bookingDetails.customerName}\nEmail: ${bookingDetails.email}\nPhone: ${bookingDetails.phone}\n\nReservation Date: ${bookingDetails.reservationDate}\nReservation Time: ${bookingDetails.reservationTime}\nParty Size: ${bookingDetails.partySize}\nCuisine: ${bookingDetails.cuisine}\n\nBooked on: ${new Date().toLocaleDateString()}\nStatus: Confirmed\n\nThank you for choosing BD Explorer!\nContact: +880-2-123-4567\n    `;\n\n    const blob = new Blob([receiptText], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `BD-Explorer-Receipt-${bookingDetails.confirmationNumber}.txt`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  if (!selectedRestaurant) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navigation />\n        <div className=\"pt-24 pb-16\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h1 className=\"text-3xl font-bold text-gray-800 mb-4\">Restaurant Not Found</h1>\n            <p className=\"text-gray-600 mb-8\">The restaurant you're looking for doesn't exist.</p>\n            <Button onClick={() => navigate('/hotels')}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Restaurants\n            </Button>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (showSuccessDialog) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navigation />\n        <div className=\"pt-24 pb-16\">\n          <div className=\"max-w-3xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"bg-white rounded-xl shadow-lg p-8 text-center\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Check className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <h1 className=\"text-3xl font-bold text-green-600 mb-4\">Reservation Confirmed!</h1>\n              <p className=\"text-gray-600 mb-6\">\n                Your restaurant reservation has been confirmed. You'll receive a confirmation email shortly.\n              </p>\n              \n              <div className=\"bg-gray-50 rounded-lg p-6 mb-8 text-left\">\n                <h3 className=\"font-semibold mb-4 text-center\">Reservation Details</h3>\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span>Confirmation Number:</span>\n                    <span className=\"font-mono font-semibold\">{bookingDetails?.confirmationNumber}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Restaurant:</span>\n                    <span>{bookingDetails?.propertyName}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Location:</span>\n                    <span>{bookingDetails?.propertyLocation}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Date:</span>\n                    <span>{bookingDetails?.reservationDate}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Time:</span>\n                    <span>{bookingDetails?.reservationTime}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Party Size:</span>\n                    <span>{bookingDetails?.partySize} people</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex gap-4 justify-center\">\n                <Button onClick={downloadReceipt} variant=\"outline\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Download Receipt\n                </Button>\n                <Button onClick={() => navigate('/hotels')}>\n                  Back to Restaurants\n                </Button>\n                <Button onClick={() => navigate('/my-bookings')} variant=\"outline\">\n                  View My Bookings\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navigation />\n      \n      <div className=\"pt-24 pb-16\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <div className=\"flex items-center gap-4 mb-8\">\n            <Button variant=\"outline\" onClick={() => navigate('/hotels')}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back\n            </Button>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"icon-bg-orange\">\n                <Utensils className=\"w-6 h-6\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900\">Book Table</h1>\n                <p className=\"text-gray-600\">Make your reservation</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Restaurant Information */}\n            <Card className=\"elegant-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Utensils className=\"w-5 h-5\" />\n                  {selectedRestaurant.name}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <img \n                  src={selectedRestaurant.imageUrl} \n                  alt={selectedRestaurant.name}\n                  className=\"w-full h-64 object-cover rounded-lg\"\n                />\n                \n                <div className=\"space-y-3\">\n                  <p className=\"flex items-center gap-2 text-gray-600\">\n                    <MapPin className=\"w-4 h-4\" />\n                    {selectedRestaurant.location}\n                  </p>\n                  <div className=\"flex items-center gap-2\">\n                    <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                    <span className=\"font-semibold\">{selectedRestaurant.rating}</span>\n                    <span className=\"text-gray-600\">â¢ {selectedRestaurant.cuisine}</span>\n                  </div>\n                  <p className=\"text-gray-600\">{selectedRestaurant.description}</p>\n                  \n                  <div className=\"flex gap-2\">\n                    <Badge variant=\"secondary\">{selectedRestaurant.cuisine}</Badge>\n                    <Badge variant=\"outline\">{selectedRestaurant.priceRange}</Badge>\n                  </div>\n\n                  {selectedRestaurant.specialties && selectedRestaurant.specialties.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Specialties</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {selectedRestaurant.specialties.map((specialty, index) => (\n                          <Badge key={index} variant=\"secondary\">\n                            {specialty}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Booking Form */}\n            <Card className=\"elegant-card\">\n              <CardHeader>\n                <CardTitle>Reservation Details</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"customerName\">Full Name</Label>\n                      <Input\n                        id=\"customerName\"\n                        value={customerName}\n                        onChange={(e) => setCustomerName(e.target.value)}\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"customerPhone\">Phone Number</Label>\n                      <Input\n                        id=\"customerPhone\"\n                        value={customerPhone}\n                        onChange={(e) => setCustomerPhone(e.target.value)}\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"customerEmail\">Email</Label>\n                    <Input\n                      id=\"customerEmail\"\n                      type=\"email\"\n                      value={customerEmail}\n                      onChange={(e) => setCustomerEmail(e.target.value)}\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"reservationDate\">Reservation Date</Label>\n                    <Input\n                      id=\"reservationDate\"\n                      type=\"date\"\n                      value={reservationDate}\n                      onChange={(e) => setReservationDate(e.target.value)}\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"reservationTime\">Reservation Time</Label>\n                    <Select value={reservationTime} onValueChange={setReservationTime} required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select time\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"12:00\">12:00 PM</SelectItem>\n                        <SelectItem value=\"12:30\">12:30 PM</SelectItem>\n                        <SelectItem value=\"13:00\">1:00 PM</SelectItem>\n                        <SelectItem value=\"13:30\">1:30 PM</SelectItem>\n                        <SelectItem value=\"14:00\">2:00 PM</SelectItem>\n                        <SelectItem value=\"18:00\">6:00 PM</SelectItem>\n                        <SelectItem value=\"18:30\">6:30 PM</SelectItem>\n                        <SelectItem value=\"19:00\">7:00 PM</SelectItem>\n                        <SelectItem value=\"19:30\">7:30 PM</SelectItem>\n                        <SelectItem value=\"20:00\">8:00 PM</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"partySize\">Party Size</Label>\n                    <Select value={partySize} onValueChange={setPartySize} required>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"1\">1 Person</SelectItem>\n                        <SelectItem value=\"2\">2 People</SelectItem>\n                        <SelectItem value=\"3\">3 People</SelectItem>\n                        <SelectItem value=\"4\">4 People</SelectItem>\n                        <SelectItem value=\"5\">5 People</SelectItem>\n                        <SelectItem value=\"6\">6+ People</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"bg-gray-50 rounded-lg p-4\">\n                    <h4 className=\"font-semibold mb-2\">Reservation Summary</h4>\n                    <div className=\"space-y-1 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>Restaurant:</span>\n                        <span>{selectedRestaurant.name}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Date:</span>\n                        <span>{reservationDate || 'Not selected'}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Time:</span>\n                        <span>{reservationTime || 'Not selected'}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Party Size:</span>\n                        <span>{partySize} people</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Cuisine:</span>\n                        <span>{selectedRestaurant.cuisine}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Button type=\"submit\" disabled={isSubmitting} className=\"w-full\">\n                    {isSubmitting ? (\n                      <>\n                        <Clock className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Processing...\n                      </>\n                    ) : (\n                      <>\n                        <Calendar className=\"w-4 h-4 mr-2\" />\n                        Confirm Reservation\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":18084},"client/src/pages/transport-booking.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useRoute, useLocation } from 'wouter';\nimport { Plane, Bus, Car, Calendar, Clock, Users, MapPin, Star, CreditCard, ArrowLeft, Check, Phone, Download, Tag } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { apiRequest } from '@/lib/queryClient';\nimport Navigation from '@/components/navigation';\nimport Footer from '@/components/footer';\nimport type { TripPlanner, Bus as BusType, PrivateCar } from '@shared/schema';\n\nexport default function TransportBooking() {\n  const [, params] = useRoute('/transport-booking/:type/:id');\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const { user, isAuthenticated } = useAuth();\n  const queryClient = useQueryClient();\n  \n  // Booking form state\n  const [customerName, setCustomerName] = useState('');\n  const [customerEmail, setCustomerEmail] = useState('');\n  const [customerPhone, setCustomerPhone] = useState('');\n  const [customerNid, setCustomerNid] = useState('');\n  const [passengers, setPassengers] = useState('1');\n  const [travelDate, setTravelDate] = useState('');\n  const [selectedSeats, setSelectedSeats] = useState<string[]>([]);\n  const [couponCode, setCouponCode] = useState('');\n  const [specialRequests, setSpecialRequests] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showSuccessDialog, setShowSuccessDialog] = useState(false);\n  const [bookingDetails, setBookingDetails] = useState<any>(null);\n\n  const transportType = params?.type as 'flight' | 'bus' | 'car';\n  const transportId = params?.id;\n\n  // Check authentication\n  useEffect(() => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Sign In Required\",\n        description: \"Please sign in to make a booking. You'll be redirected to the login page.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        navigate('/sign-in');\n      }, 1000);\n      return;\n    }\n  }, [isAuthenticated, navigate, toast]);\n\n  // Pre-fill user data when available\n  useEffect(() => {\n    if (user) {\n      setCustomerName(user.firstName ? `${user.firstName} ${user.lastName || ''}`.trim() : '');\n      setCustomerEmail(user.email || '');\n    }\n  }, [user]);\n\n  // Fetch transport data based on type\n  const { data: flights = [] } = useQuery<TripPlanner[]>({\n    queryKey: ['/api/trip-planners'],\n    enabled: transportType === 'flight',\n  });\n\n  const { data: buses = [] } = useQuery<BusType[]>({\n    queryKey: ['/api/buses'],\n    enabled: transportType === 'bus',\n  });\n\n  const { data: cars = [] } = useQuery<PrivateCar[]>({\n    queryKey: ['/api/private-cars'],\n    enabled: transportType === 'car',\n  });\n\n  // Get selected transport item\n  const selectedTransport = transportType === 'flight' \n    ? flights.find(f => f.id === transportId)\n    : transportType === 'bus'\n    ? buses.find(b => b.id === transportId)\n    : cars.find(c => c.id === transportId);\n\n  // Fetch booked seats for buses\n  const { data: bookedSeats = [] } = useQuery<string[]>({\n    queryKey: ['/api/bookings/seats', transportId, travelDate],\n    enabled: transportType === 'bus' && !!transportId && !!travelDate,\n    queryFn: async () => {\n      const response = await fetch(`/api/bookings/seats?busId=${transportId}&travelDate=${travelDate}`);\n      if (!response.ok) return [];\n      const data = await response.json();\n      return data.bookedSeats || [];\n    },\n  });\n\n  const bookingMutation = useMutation({\n    mutationFn: async (bookingData: any) => {\n      return await apiRequest('POST', '/api/bookings', bookingData);\n    },\n    onSuccess: (result) => {\n      setBookingDetails(result);\n      setShowSuccessDialog(true);\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      toast({\n        title: \"Booking Confirmed!\",\n        description: `Your ${transportType} booking has been confirmed. Confirmation number: ${(result as any)?.confirmationNumber || 'N/A'}`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedTransport) return;\n\n    setIsSubmitting(true);\n    try {\n      const bookingData = {\n        itemId: selectedTransport.id,\n        itemType: transportType,\n        customerName,\n        email: customerEmail,\n        phone: customerPhone,\n        nid: customerNid,\n        passengers: parseInt(passengers),\n        travelDate,\n        specialRequests,\n        confirmationNumber: `BD${Date.now().toString().slice(-6)}${Math.random().toString(36).substr(2, 3).toUpperCase()}`,\n        ...(transportType === 'bus' && { selectedSeats }),\n      };\n\n      await bookingMutation.mutateAsync(bookingData);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const downloadReceipt = () => {\n    if (!bookingDetails) return;\n    \n    const receiptText = `\nBD EXPLORER BOOKING RECEIPT\n==========================\n\nConfirmation Number: ${bookingDetails.confirmationNumber}\nTransport: ${transportType.charAt(0).toUpperCase() + transportType.slice(1)}\nCustomer: ${bookingDetails.customerName}\nEmail: ${bookingDetails.email}\nPhone: ${bookingDetails.phone}\nNational ID: ${bookingDetails.nid}\n\nTravel Date: ${bookingDetails.travelDate}\nPassengers: ${bookingDetails.passengers}\n${transportType === 'bus' && bookingDetails.selectedSeats ? `Selected Seats: ${bookingDetails.selectedSeats.join(', ')}` : ''}\n\nBooked on: ${new Date().toLocaleDateString()}\nStatus: Confirmed\n\nThank you for choosing BD Explorer!\nContact: +880-2-123-4567\n    `;\n\n    const blob = new Blob([receiptText], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `BD-Explorer-Receipt-${bookingDetails.confirmationNumber}.txt`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  // Generate seat layout for buses\n  const generateSeatLayout = () => {\n    const totalSeats = 40; // Typical bus seat count\n    const seatsPerRow = 4;\n    const seats = [];\n    \n    for (let i = 1; i <= totalSeats; i++) {\n      const seatNumber = `${Math.ceil(i / seatsPerRow)}${String.fromCharCode(64 + ((i - 1) % seatsPerRow) + 1)}`;\n      seats.push(seatNumber);\n    }\n    \n    return seats;\n  };\n\n  const toggleSeat = (seatNumber: string) => {\n    if (bookedSeats.includes(seatNumber)) return; // Can't select booked seats\n    \n    if (selectedSeats.includes(seatNumber)) {\n      setSelectedSeats(prev => prev.filter(s => s !== seatNumber));\n    } else {\n      if (selectedSeats.length < parseInt(passengers)) {\n        setSelectedSeats(prev => [...prev, seatNumber]);\n      } else {\n        toast({\n          title: \"Seat Selection Limit\",\n          description: `You can only select ${passengers} seat(s) for ${passengers} passenger(s).`,\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const getTransportIcon = () => {\n    switch (transportType) {\n      case 'flight':\n        return <Plane className=\"w-6 h-6\" />;\n      case 'bus':\n        return <Bus className=\"w-6 h-6\" />;\n      case 'car':\n        return <Car className=\"w-6 h-6\" />;\n      default:\n        return <Car className=\"w-6 h-6\" />;\n    }\n  };\n\n  const getTransportTitle = () => {\n    switch (transportType) {\n      case 'flight':\n        return 'Book Flight';\n      case 'bus':\n        return 'Book Bus Ticket';\n      case 'car':\n        return 'Book Private Car';\n      default:\n        return 'Book Transport';\n    }\n  };\n\n  if (!selectedTransport) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navigation />\n        <div className=\"pt-24 pb-16\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h1 className=\"text-3xl font-bold text-gray-800 mb-4\">Transport Not Found</h1>\n            <p className=\"text-gray-600 mb-8\">The transport option you're looking for doesn't exist.</p>\n            <Button onClick={() => navigate('/trip-planner')}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Trip Planner\n            </Button>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (showSuccessDialog) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navigation />\n        <div className=\"pt-24 pb-16\">\n          <div className=\"max-w-3xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"bg-white rounded-xl shadow-lg p-8 text-center\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Check className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <h1 className=\"text-3xl font-bold text-green-600 mb-4\">Booking Confirmed!</h1>\n              <p className=\"text-gray-600 mb-6\">\n                Your {transportType} booking has been confirmed. You'll receive a confirmation email shortly.\n              </p>\n              \n              <div className=\"bg-gray-50 rounded-lg p-6 mb-8 text-left\">\n                <h3 className=\"font-semibold mb-4 text-center\">Booking Details</h3>\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span>Confirmation Number:</span>\n                    <span className=\"font-mono font-semibold\">{bookingDetails?.confirmationNumber}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Transport:</span>\n                    <span>{transportType.charAt(0).toUpperCase() + transportType.slice(1)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Travel Date:</span>\n                    <span>{bookingDetails?.travelDate}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Passengers:</span>\n                    <span>{bookingDetails?.passengers}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>National ID:</span>\n                    <span>{bookingDetails?.nid}</span>\n                  </div>\n                  {transportType === 'bus' && bookingDetails?.selectedSeats && (\n                    <div className=\"flex justify-between\">\n                      <span>Selected Seats:</span>\n                      <span>{bookingDetails.selectedSeats.join(', ')}</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex gap-4 justify-center\">\n                <Button onClick={downloadReceipt} variant=\"outline\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Download Receipt\n                </Button>\n                <Button onClick={() => navigate('/trip-planner')}>\n                  Back to Trip Planner\n                </Button>\n                <Button onClick={() => navigate('/my-bookings')} variant=\"outline\">\n                  View My Bookings\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navigation />\n      \n      <div className=\"pt-24 pb-16\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <div className=\"flex items-center gap-4 mb-8\">\n            <Button variant=\"outline\" onClick={() => navigate('/trip-planner')}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back\n            </Button>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"icon-bg-blue\">\n                {getTransportIcon()}\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900\">{getTransportTitle()}</h1>\n                <p className=\"text-gray-600\">Complete your booking</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Transport Information */}\n            <Card className=\"elegant-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  {getTransportIcon()}\n                  {transportType === 'flight' \n                    ? `${(selectedTransport as TripPlanner).origin} â ${(selectedTransport as TripPlanner).destination}`\n                    : transportType === 'bus'\n                    ? `${(selectedTransport as BusType).operator} - ${(selectedTransport as BusType).type}`\n                    : `${(selectedTransport as PrivateCar).type} - ${(selectedTransport as PrivateCar).category}`\n                  }\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  {transportType === 'flight' && (\n                    <>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Route:</span>\n                        <span className=\"font-semibold\">{(selectedTransport as TripPlanner).origin} â {(selectedTransport as TripPlanner).destination}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Duration:</span>\n                        <span>{(selectedTransport as TripPlanner).duration}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Price:</span>\n                        <span className=\"font-semibold text-lg\">à§³{(selectedTransport as TripPlanner).price}</span>\n                      </div>\n                    </>\n                  )}\n                  \n                  {transportType === 'bus' && (\n                    <>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Operator:</span>\n                        <span className=\"font-semibold\">{(selectedTransport as BusType).operator}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Bus Type:</span>\n                        <span>{(selectedTransport as BusType).type}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Route:</span>\n                        <span>{(selectedTransport as BusType).route}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Departure:</span>\n                        <span>{(selectedTransport as BusType).departureTime}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Price per seat:</span>\n                        <span className=\"font-semibold text-lg\">à§³{(selectedTransport as BusType).price}</span>\n                      </div>\n                    </>\n                  )}\n                  \n                  {transportType === 'car' && (\n                    <>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Car Type:</span>\n                        <span className=\"font-semibold\">{(selectedTransport as PrivateCar).type}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Category:</span>\n                        <span>{(selectedTransport as PrivateCar).category}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Capacity:</span>\n                        <span>{(selectedTransport as PrivateCar).capacity} passengers</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Price per day:</span>\n                        <span className=\"font-semibold text-lg\">à§³{(selectedTransport as PrivateCar).pricePerDay}</span>\n                      </div>\n                    </>\n                  )}\n                </div>\n\n                {transportType === 'bus' && travelDate && (\n                  <div>\n                    <h4 className=\"font-semibold mb-3\">Select Seats</h4>\n                    <div className=\"grid grid-cols-4 gap-2 max-w-xs mx-auto\">\n                      {generateSeatLayout().slice(0, 32).map((seatNumber) => {\n                        const isBooked = bookedSeats.includes(seatNumber);\n                        const isSelected = selectedSeats.includes(seatNumber);\n                        \n                        return (\n                          <button\n                            key={seatNumber}\n                            type=\"button\"\n                            onClick={() => toggleSeat(seatNumber)}\n                            disabled={isBooked}\n                            className={`\n                              w-8 h-8 text-xs font-semibold rounded border transition-colors\n                              ${isBooked \n                                ? 'bg-red-200 border-red-300 text-red-700 cursor-not-allowed' \n                                : isSelected\n                                ? 'bg-blue-500 border-blue-600 text-white'\n                                : 'bg-white border-gray-300 hover:bg-gray-50'\n                              }\n                            `}\n                          >\n                            {seatNumber}\n                          </button>\n                        );\n                      })}\n                    </div>\n                    <div className=\"flex gap-4 text-xs mt-3 justify-center\">\n                      <div className=\"flex items-center gap-1\">\n                        <div className=\"w-3 h-3 bg-white border border-gray-300 rounded\"></div>\n                        <span>Available</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <div className=\"w-3 h-3 bg-blue-500 rounded\"></div>\n                        <span>Selected</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <div className=\"w-3 h-3 bg-red-200 rounded\"></div>\n                        <span>Booked</span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Booking Form */}\n            <Card className=\"elegant-card\">\n              <CardHeader>\n                <CardTitle>Booking Details</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"customerName\">Full Name</Label>\n                      <Input\n                        id=\"customerName\"\n                        value={customerName}\n                        onChange={(e) => setCustomerName(e.target.value)}\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"customerPhone\">Phone Number</Label>\n                      <Input\n                        id=\"customerPhone\"\n                        value={customerPhone}\n                        onChange={(e) => setCustomerPhone(e.target.value)}\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"customerEmail\">Email</Label>\n                    <Input\n                      id=\"customerEmail\"\n                      type=\"email\"\n                      value={customerEmail}\n                      onChange={(e) => setCustomerEmail(e.target.value)}\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"customerNid\">National ID (NID) *</Label>\n                    <Input\n                      id=\"customerNid\"\n                      value={customerNid}\n                      onChange={(e) => setCustomerNid(e.target.value)}\n                      placeholder=\"Enter your National ID number\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"travelDate\">Travel Date</Label>\n                    <Input\n                      id=\"travelDate\"\n                      type=\"date\"\n                      value={travelDate}\n                      onChange={(e) => setTravelDate(e.target.value)}\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"passengers\">Number of Passengers</Label>\n                    <Select value={passengers} onValueChange={(value) => {\n                      setPassengers(value);\n                      setSelectedSeats([]); // Reset seat selection when passenger count changes\n                    }} required>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"1\">1 Passenger</SelectItem>\n                        <SelectItem value=\"2\">2 Passengers</SelectItem>\n                        <SelectItem value=\"3\">3 Passengers</SelectItem>\n                        <SelectItem value=\"4\">4 Passengers</SelectItem>\n                        <SelectItem value=\"5\">5+ Passengers</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"couponCode\">Coupon Code (Optional)</Label>\n                    <Input\n                      id=\"couponCode\"\n                      value={couponCode}\n                      onChange={(e) => setCouponCode(e.target.value)}\n                      placeholder=\"Enter discount code\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"specialRequests\">Special Requests (Optional)</Label>\n                    <Textarea\n                      id=\"specialRequests\"\n                      value={specialRequests}\n                      onChange={(e) => setSpecialRequests(e.target.value)}\n                      placeholder=\"Any special requests or notes\"\n                      rows={3}\n                    />\n                  </div>\n\n                  {transportType === 'bus' && selectedSeats.length > 0 && (\n                    <div className=\"bg-blue-50 rounded-lg p-3\">\n                      <h5 className=\"font-semibold mb-1\">Selected Seats:</h5>\n                      <p className=\"text-sm text-blue-700\">{selectedSeats.join(', ')}</p>\n                    </div>\n                  )}\n\n                  <Separator />\n\n                  <div className=\"bg-gray-50 rounded-lg p-4\">\n                    <h4 className=\"font-semibold mb-2\">Booking Summary</h4>\n                    <div className=\"space-y-1 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>Transport:</span>\n                        <span>{transportType.charAt(0).toUpperCase() + transportType.slice(1)}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Travel Date:</span>\n                        <span>{travelDate || 'Not selected'}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Passengers:</span>\n                        <span>{passengers}</span>\n                      </div>\n                      {transportType === 'bus' && selectedSeats.length > 0 && (\n                        <>\n                          <div className=\"flex justify-between\">\n                            <span>Price per seat:</span>\n                            <span>à§³{(selectedTransport as BusType).price}</span>\n                          </div>\n                          <Separator />\n                          <div className=\"flex justify-between font-semibold\">\n                            <span>Total Amount:</span>\n                            <span>à§³{selectedSeats.length * (selectedTransport as BusType).price}</span>\n                          </div>\n                        </>\n                      )}\n                    </div>\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    disabled={isSubmitting || (transportType === 'bus' && selectedSeats.length === 0)} \n                    className=\"w-full\"\n                  >\n                    {isSubmitting ? (\n                      <>\n                        <CreditCard className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Processing...\n                      </>\n                    ) : (\n                      <>\n                        <CreditCard className=\"w-4 h-4 mr-2\" />\n                        Confirm Booking\n                      </>\n                    )}\n                  </Button>\n                  \n                  {transportType === 'bus' && selectedSeats.length === 0 && travelDate && (\n                    <p className=\"text-sm text-gray-500 text-center\">\n                      Please select {passengers} seat(s) to continue\n                    </p>\n                  )}\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":26831},"api/_middleware.ts":{"content":"import { storage } from '../server/storage';\nimport { getSession, isAuthenticated } from '../server/auth';\n\n// Export storage and auth utilities for API routes\nexport { storage, getSession, isAuthenticated };","size_bytes":208},"api/bookings.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\nimport { storage } from './_middleware';\nimport { insertBookingSchema } from '../shared/schema';\nimport { z } from 'zod';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (req.method === 'GET') {\n    // Get user bookings - for now return empty array since we don't have session management\n    res.json([]);\n  } else if (req.method === 'POST') {\n    try {\n      const validatedData = insertBookingSchema.parse(req.body);\n      const booking = await storage.createBooking(validatedData);\n      res.status(201).json(booking);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create booking\" });\n    }\n  } else {\n    res.status(405).json({ message: 'Method not allowed' });\n  }\n}","size_bytes":939},"api/buses.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\nimport { storage } from './_middleware';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (req.method !== 'GET') {\n    return res.status(405).json({ message: 'Method not allowed' });\n  }\n\n  try {\n    const buses = await storage.getBuses();\n    res.json(buses);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch buses' });\n  }\n}","size_bytes":455},"api/destinations.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\nimport { storage } from './_middleware';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (req.method !== 'GET') {\n    return res.status(405).json({ message: 'Method not allowed' });\n  }\n\n  try {\n    const destinations = await storage.getDestinations();\n    res.json(destinations);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch destinations' });\n  }\n}","size_bytes":483},"api/hotels.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\nimport { storage } from './_middleware';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (req.method !== 'GET') {\n    return res.status(405).json({ message: 'Method not allowed' });\n  }\n\n  try {\n    const hotels = await storage.getHotels();\n    res.json(hotels);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch hotels' });\n  }\n}","size_bytes":459},"api/private-cars.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\nimport { storage } from './_middleware';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (req.method !== 'GET') {\n    return res.status(405).json({ message: 'Method not allowed' });\n  }\n\n  try {\n    const privateCars = await storage.getPrivateCars();\n    res.json(privateCars);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch private cars' });\n  }\n}","size_bytes":480},"api/restaurants.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\nimport { storage } from './_middleware';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (req.method !== 'GET') {\n    return res.status(405).json({ message: 'Method not allowed' });\n  }\n\n  try {\n    const restaurants = await storage.getRestaurants();\n    res.json(restaurants);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch restaurants' });\n  }\n}","size_bytes":479},"api/trip-planners.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\nimport { storage } from './_middleware';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (req.method !== 'GET') {\n    return res.status(405).json({ message: 'Method not allowed' });\n  }\n\n  try {\n    const tripPlanners = await storage.getTripPlanners();\n    res.json(tripPlanners);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch trip planners' });\n  }\n}","size_bytes":484},"api/auth/me.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (req.method !== 'GET') {\n    return res.status(405).json({ message: 'Method not allowed' });\n  }\n\n  // For Vercel serverless functions, session management needs to be handled differently\n  // You might want to use JWT tokens or other stateless authentication\n  return res.status(401).json({ message: \"Unauthorized\" });\n}","size_bytes":474},"api/auth/signin.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\nimport { storage } from '../_middleware';\nimport { loginSchema } from '../../shared/schema';\nimport { z } from 'zod';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (req.method !== 'POST') {\n    return res.status(405).json({ message: 'Method not allowed' });\n  }\n\n  try {\n    const validatedData = loginSchema.parse(req.body);\n    const user = await storage.validateUser(validatedData.email, validatedData.password);\n    \n    if (!user) {\n      return res.status(401).json({ message: \"Invalid email or password\" });\n    }\n    \n    const { password, ...userWithoutPassword } = user;\n    res.json(userWithoutPassword);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n    }\n    res.status(500).json({ message: \"Failed to sign in\" });\n  }\n}","size_bytes":940},"api/auth/signout.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (req.method !== 'POST') {\n    return res.status(405).json({ message: 'Method not allowed' });\n  }\n\n  // For Vercel serverless functions, session management needs to be handled differently\n  // You might want to use JWT tokens or other stateless authentication\n  res.json({ message: 'Signed out successfully' });\n}","size_bytes":467},"api/auth/signup.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\nimport { storage } from '../_middleware';\nimport { insertUserSchema } from '../../shared/schema';\nimport { z } from 'zod';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (req.method !== 'POST') {\n    return res.status(405).json({ message: 'Method not allowed' });\n  }\n\n  try {\n    const validatedData = insertUserSchema.parse(req.body);\n    \n    // Check if user already exists\n    const existingUser = await storage.getUserByEmail(validatedData.email);\n    if (existingUser) {\n      return res.status(400).json({ message: \"User already exists with this email\" });\n    }\n\n    const existingUsername = await storage.getUserByUsername(validatedData.username);\n    if (existingUsername) {\n      return res.status(400).json({ message: \"Username already taken\" });\n    }\n\n    const user = await storage.createUser(validatedData);\n    \n    const { password, ...userWithoutPassword } = user;\n    res.status(201).json(userWithoutPassword);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n    }\n    res.status(500).json({ message: \"Failed to create user\" });\n  }\n}","size_bytes":1259},"api/destinations/[id].ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\nimport { storage } from '../_middleware';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (req.method !== 'GET') {\n    return res.status(405).json({ message: 'Method not allowed' });\n  }\n\n  try {\n    const { id } = req.query;\n    if (!id || typeof id !== 'string') {\n      return res.status(400).json({ message: 'Invalid destination ID' });\n    }\n\n    const destination = await storage.getDestination(id);\n    if (!destination) {\n      return res.status(404).json({ message: 'Destination not found' });\n    }\n\n    res.json(destination);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch destination' });\n  }\n}","size_bytes":738},"api/hotels/[id].ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\nimport { storage } from '../_middleware';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  if (req.method !== 'GET') {\n    return res.status(405).json({ message: 'Method not allowed' });\n  }\n\n  try {\n    const { id } = req.query;\n    if (!id || typeof id !== 'string') {\n      return res.status(400).json({ message: 'Invalid hotel ID' });\n    }\n\n    const hotel = await storage.getHotel(id);\n    if (!hotel) {\n      return res.status(404).json({ message: 'Hotel not found' });\n    }\n\n    res.json(hotel);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch hotel' });\n  }\n}","size_bytes":696}}}